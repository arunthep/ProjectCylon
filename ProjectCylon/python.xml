<?xml version="1.0" encoding="Windows-1252" ?>
	<!--
	@author Gregori Gerebtzoff
	@version 1.2
	-->
<NotepadPlus>
	<AutoComplete>
		<Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," additionalWordChar = "." />
		<KeyWord name="ActionChains" func="yes">
			<Overload retVal="" descr="Generate user actions.&#10;All actions are stored in the ActionChains object. Call perform() to fire&#10;stored actions.">
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.click" func="yes">
			<Overload retVal="" descr="Clicks an element.&#10;&#10;:Args:&#10; - on_element: The element to click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.click_and_hold" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on an element.&#10;&#10;:Args:&#10; - on_element: The element to mouse down.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.context_click" func="yes">
			<Overload retVal="" descr="Performs a context-click (right click) on an element.&#10;&#10;:Args:&#10; - on_element: The element to context-click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.double_click" func="yes">
			<Overload retVal="" descr="Double-clicks an element.&#10;&#10;:Args:&#10; - on_element: The element to double-click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.drag_and_drop" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on the source element,&#10;   then moves to the target element and releases the mouse button.&#10;&#10;:Args:&#10; - source: The element to mouse down.&#10; - target: The element to mouse up.">
				<Param name="self" />
				<Param name="source" />
				<Param name="target" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.drag_and_drop_by_offset" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on the source element,&#10;   then moves to the target element and releases the mouse button.&#10;&#10;:Args:&#10; - source: The element to mouse down.&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="source" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.key_down" func="yes">
			<Overload retVal="" descr="Sends a key press only, without releasing it.&#10;Should only be used with modifier keys (Control, Alt and Shift).&#10;&#10;:Args:&#10; - key: The modifier key to send. Values are defined in Keys class.&#10; - target: The element to send keys.&#10;   If None, sends a key to current focused element.">
				<Param name="self" />
				<Param name="value" />
				<Param name="[element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.key_up" func="yes">
			<Overload retVal="" descr="Releases a modifier key.&#10;&#10;:Args:&#10; - key: The modifier key to send. Values are defined in Keys class.&#10; - target: The element to send keys.&#10;   If None, sends a key to current focused element.">
				<Param name="self" />
				<Param name="value" />
				<Param name="[element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.move_by_offset" func="yes">
			<Overload retVal="" descr="Moving the mouse to an offset from current mouse position.&#10;&#10;:Args:&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.move_to_element" func="yes">
			<Overload retVal="" descr="Moving the mouse to the middle of an element.&#10;&#10;:Args:&#10; - to_element: The element to move to.">
				<Param name="self" />
				<Param name="to_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.move_to_element_with_offset" func="yes">
			<Overload retVal="" descr="Move the mouse by an offset of the specificed element.&#10;Offsets are relative to the top-left corner of the element.&#10;&#10;:Args:&#10; - to_element: The element to move to.&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="to_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.perform" func="yes">
			<Overload retVal="" descr="Performs all stored actions.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.release" func="yes">
			<Overload retVal="" descr="Releasing a held mouse button.&#10;&#10;:Args:&#10; - on_element: The element to mouse up.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.send_keys" func="yes">
			<Overload retVal="" descr="Sends keys to current focused element.&#10;&#10;:Args:&#10; - keys_to_send: The keys to send.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="ActionChains.send_keys_to_element" func="yes">
			<Overload retVal="" descr="Sends keys to an element.&#10;&#10;:Args:&#10; - element: The element to send keys.&#10; - keys_to_send: The keys to send.">
				<Param name="self" />
				<Param name="element" />
			</Overload>
		</KeyWord>
		<KeyWord name="AnsiToWin32" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="ArithmeticError" func="yes">
			<Overload retVal="" descr="Base class for arithmetic errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="AssertionError" func="yes">
			<Overload retVal="" descr="Assertion failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="At" func="yes">
			<Overload retVal="" descr=>
				<Param name="x" />
				<Param name="[y=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="AtEnd" />
		<KeyWord name="AtInsert" />
		<KeyWord name="AtSelFirst" />
		<KeyWord name="AtSelLast" />
		<KeyWord name="AttributeError" func="yes">
			<Overload retVal="" descr="Attribute not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="BaseException" func="yes">
			<Overload retVal="" descr="Common base class for all exceptions">
			</Overload>
		</KeyWord>
		<KeyWord name="BaseTestSuite" func="yes">
			<Overload retVal="" descr="Function of unittest.BaseTestSuite">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType" func="yes">
			<Overload retVal="" descr="bool(x) -&gt; bool&#10;&#10;Returns True when the argument x is true, False otherwise.&#10;The builtins True and False are the only two instances of the class bool.&#10;The class bool is a subclass of the class int, and cannot be subclassed.">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="BooleanType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="BufferError" func="yes">
			<Overload retVal="" descr="Buffer error.">
			</Overload>
		</KeyWord>
		<KeyWord name="BufferType" func="yes">
			<Overload retVal="" descr="buffer(object [, offset[, size]])&#10;&#10;Create a new buffer object which references the given object.&#10;The buffer will reference a slice of the target object from the&#10;start of the object (or at the specified offset). The slice will&#10;extend to the end of the target object (or with the specified size).">
			</Overload>
		</KeyWord>
		<KeyWord name="BuiltinFunctionType" />
		<KeyWord name="BuiltinMethodType" />
		<KeyWord name="BytesWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about bytes and buffer related problems, mostly&#10;related to conversion from str or comparing to str.">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome" func="yes">
			<Overload retVal="" descr="Controls the ChromeDriver and allows you to drive the browser.&#10;&#10;You will need to download the ChromeDriver executable from&#10;http://code.google.com/p/chromedriver/downloads/list">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the ChromeDriver executable&#10;that is started when starting the ChromeDriver">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Chrome.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions" />
		<KeyWord name="ChromeOptions.add_argument" func="yes">
			<Overload retVal="" descr="Adds an argument to the list&#10;&#10;:Args:&#10; - Sets the arguments">
				<Param name="self" />
				<Param name="argument" />
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.add_experimental_option" func="yes">
			<Overload retVal="" descr="Adds an experimental option which is passed to chrome.&#10;&#10;Args:&#10;  name: The experimental option name.&#10;  value: The option value.">
				<Param name="self" />
				<Param name="name" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.add_extension" func="yes">
			<Overload retVal="" descr="Adds the path to the extension to a list that will be used to extract it&#10;to the ChromeDriver&#10;&#10;:Args:&#10; - extension: path to the *.crx file">
				<Param name="self" />
				<Param name="extension" />
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.arguments" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.binary_location" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.experimental_options" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.extensions" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChromeOptions.to_capabilities" func="yes">
			<Overload retVal="" descr="Creates a capabilities with all the options that have been set and&#10;&#10;returns a dictionary with everything">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="ClassType" func="yes">
			<Overload retVal="" descr="classobj(name, bases, dict)&#10;&#10;Create a class object.  The name must be a string; the second argument&#10;a tuple of classes, and the third a dictionary.">
			</Overload>
		</KeyWord>
		<KeyWord name="Click" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType" func="yes">
			<Overload retVal="" descr="code(argcount, nlocals, stacksize, flags, codestring, constants, names,&#10;      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])&#10;&#10;Create a code object.  Not for the faint of heart.">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_argcount" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_cellvars" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_consts" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_filename" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_firstlineno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_flags" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_freevars" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_lnotab" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_name" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_names" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_nlocals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_stacksize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="CodeType.co_varnames" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexType" func="yes">
			<Overload retVal="" descr="complex(real[, imag]) -&gt; complex number&#10;&#10;Create a complex number from a real part and an optional imaginary part.&#10;This is equivalent to (real + imag*1j) where imag defaults to 0.">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexType.conjugate" func="yes">
			<Overload retVal="" descr="complex.conjugate() -&gt; complex&#10;&#10;Returns the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexType.imag" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexType.real" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser" func="yes">
			<Overload retVal="" descr="Configuration file parser.&#10;&#10;A setup file consists of sections, lead by a &quot;[section]&quot; header,&#10;and followed by &quot;name: value&quot; entries, with continuations and such in&#10;the style of RFC 822.&#10;&#10;The option values can contain format strings which refer to other values in&#10;the same section, or values in a special [DEFAULT] section.&#10;&#10;For example:&#10;&#10;    something: %(dir)s/whatever&#10;&#10;would resolve the &quot;%(dir)s&quot; to the value of dir.  All reference&#10;expansions are done late, on demand.&#10;&#10;Intrinsic defaults can be specified by passing them into the&#10;ConfigParser constructor as a dictionary.&#10;&#10;class:&#10;&#10;ConfigParser -- responsible for parsing a list of&#10;                configuration files, and managing the parsed database.&#10;&#10;    methods:&#10;&#10;    __init__(defaults=None)&#10;        create the parser and specify a dictionary of intrinsic defaults.  The&#10;        keys must be strings, the values must be appropriate for %()s string&#10;        interpolation.  Note that `__name__' is always an intrinsic default;&#10;        its value is the section's name.&#10;&#10;    sections()&#10;        return all the configuration section names, sans DEFAULT&#10;&#10;    has_section(section)&#10;        return whether the given section exists&#10;&#10;    has_option(section, option)&#10;        return whether the given option exists in the given section&#10;&#10;    options(section)&#10;        return list of configuration options for the named section&#10;&#10;    read(filenames)&#10;        read and parse the list of named configuration files, given by&#10;        name.  A single filename is also allowed.  Non-existing files&#10;        are ignored.  Return list of successfully read files.&#10;&#10;    readfp(fp, filename=None)&#10;        read and parse one configuration file, given as a file object.&#10;        The filename defaults to fp.name; it is only used in error&#10;        messages (if fp has no `name' attribute, the string `&lt;???&gt;' is used).&#10;&#10;    get(section, option, raw=False, vars=None)&#10;        return a string value for the named option.  All % interpolations are&#10;        expanded in the return values, based on the defaults passed into the&#10;        constructor and the DEFAULT section.  Additional substitutions may be&#10;        provided using the `vars' argument, which must be a dictionary whose&#10;        contents override any pre-existing defaults.&#10;&#10;    getint(section, options)&#10;        like get(), but convert value to an integer&#10;&#10;    getfloat(section, options)&#10;        like get(), but convert value to a float&#10;&#10;    getboolean(section, options)&#10;        like get(), but convert value to a boolean (currently case&#10;        insensitively defined as 0, false, no, off for False, and 1, true,&#10;        yes, on for True).  Returns False or True.&#10;&#10;    items(section, raw=False, vars=None)&#10;        return a list of tuples with (name, value) for each option&#10;        in the section.&#10;&#10;    remove_section(section)&#10;        remove the given file section and all its options&#10;&#10;    remove_option(section, option)&#10;        remove the given option from the given section&#10;&#10;    set(section, option, value)&#10;        set the given option&#10;&#10;    write(fp)&#10;        write the configuration state in .ini format">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.ConfigParser" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.DEFAULTSECT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.DuplicateSectionError" func="yes">
			<Overload retVal="" descr="Raised when a section is multiply-created.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.DuplicateSectionError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.DuplicateSectionError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.Error" func="yes">
			<Overload retVal="" descr="Base class for ConfigParser exceptions.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.Error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.Error.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationDepthError" func="yes">
			<Overload retVal="" descr="Raised when substitutions are nested too deeply.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationDepthError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationDepthError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationError" func="yes">
			<Overload retVal="" descr="Base class for interpolation-related exceptions.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationMissingOptionError" func="yes">
			<Overload retVal="" descr="A string substitution required a setting which was not available.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationMissingOptionError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationMissingOptionError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationSyntaxError" func="yes">
			<Overload retVal="" descr="Raised when the source text into which substitutions are made&#10;does not conform to the required syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationSyntaxError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.InterpolationSyntaxError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.MAX_INTERPOLATION_DEPTH" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.MissingSectionHeaderError" func="yes">
			<Overload retVal="" descr="Raised when a key-value pair is found before any section header.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.MissingSectionHeaderError.append" />
		<KeyWord name="ConfigParser.MissingSectionHeaderError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.MissingSectionHeaderError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoOptionError" func="yes">
			<Overload retVal="" descr="A requested option was not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoOptionError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoOptionError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoSectionError" func="yes">
			<Overload retVal="" descr="Raised when no section matches a requested option.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoSectionError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.NoSectionError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.ParsingError" func="yes">
			<Overload retVal="" descr="Raised when a configuration file does not follow legal syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.ParsingError.append" />
		<KeyWord name="ConfigParser.ParsingError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.ParsingError.message" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.RawConfigParser" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="ConfigParser.SafeConfigParser" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="DeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about deprecated features.">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities" />
		<KeyWord name="DesiredCapabilities.ANDROID" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.CHROME" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.FIREFOX" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.HTMLUNIT" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.HTMLUNITWITHJS" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.INTERNETEXPLORER" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.IPAD" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.IPHONE" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.OPERA" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.PHANTOMJS" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DesiredCapabilities.SAFARI" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType" />
		<KeyWord name="DictProxyType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="DictProxyType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.clear" func="yes">
			<Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.pop" func="yes">
			<Overload retVal="" descr="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.&#10;If key is not found, d is returned if given, otherwise KeyError is raised">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="DictType.viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.clear" func="yes">
			<Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.pop" func="yes">
			<Overload retVal="" descr="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.&#10;If key is not found, d is returned if given, otherwise KeyError is raised">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="DictionaryType.viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="EC" />
		<KeyWord name="EC.NoAlertPresentException" />
		<KeyWord name="EC.NoAlertPresentException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoAlertPresentException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoSuchElementException" func="yes">
			<Overload retVal="" descr="find_element_by_* can't find the element.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoSuchElementException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoSuchElementException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoSuchFrameException" />
		<KeyWord name="EC.NoSuchFrameException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.NoSuchFrameException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.StaleElementReferenceException" func="yes">
			<Overload retVal="" descr='Indicates that a reference to an element is now "stale" --- the&#10;element no longer appears on the DOM of the page.'>
			</Overload>
		</KeyWord>
		<KeyWord name="EC.StaleElementReferenceException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.StaleElementReferenceException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.WebDriverException" />
		<KeyWord name="EC.WebDriverException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.WebDriverException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.alert_is_present" func="yes">
			<Overload retVal="" descr="Expect an alert to be present.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.element_located_selection_state_to_be" func="yes">
			<Overload retVal="" descr="An expectation to locate an element and check if the selection state&#10;specified is in that state.&#10;locator is a tuple of (by, path)&#10;is_selected is a boolean">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.element_located_to_be_selected" func="yes">
			<Overload retVal="" descr="An expectation for the element to be located is selected.&#10;locator is a tuple of (by, path)">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.element_selection_state_to_be" func="yes">
			<Overload retVal="" descr='An expectation for checking if the given element is selected.&#10;element is WebElement object&#10;is_selected is a Boolean."'>
			</Overload>
		</KeyWord>
		<KeyWord name="EC.element_to_be_clickable" func="yes">
			<Overload retVal="" descr="An Expectation for checking an element is visible and enabled such that&#10;you can click it.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.element_to_be_selected" func="yes">
			<Overload retVal="" descr="An expectation for checking the selection is selected.&#10;element is WebElement object">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.frame_to_be_available_and_switch_to_it" func="yes">
			<Overload retVal="" descr="An expectation for checking whether the given frame is available to&#10;switch to.  If the frame is available it switches the given driver to the&#10;specified frame.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.invisibility_of_element_located" func="yes">
			<Overload retVal="" descr="An Expectation for checking that an element is either invisible or not&#10;present on the DOM.&#10;&#10;locator used to find the element">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.presence_of_all_elements_located" func="yes">
			<Overload retVal="" descr="An expectation for checking that there is at least one element present&#10;on a web page.&#10;locator is used to find the element&#10;returns the list of WebElements once they are located">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.presence_of_element_located" func="yes">
			<Overload retVal="" descr="An expectation for checking that an element is present on the DOM&#10;of a page. This does not necessarily mean that the element is visible.&#10;locator - used to find the element&#10;returns the WebElement once it is located">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.staleness_of" func="yes">
			<Overload retVal="" descr="Wait until an element is no longer attached to the DOM.&#10;element is the element to wait for.&#10;returns False if the element is still attached to the DOM, true otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.text_to_be_present_in_element" func="yes">
			<Overload retVal="" descr="An expectation for checking if the given text is present in the&#10;specified element.&#10;locator, text">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.text_to_be_present_in_element_value" func="yes">
			<Overload retVal="" descr="An expectation for checking if the given text is present in the element's&#10;locator, text">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.title_contains" func="yes">
			<Overload retVal="" descr="An expectation for checking that the title contains a case-sensitive&#10;substring. title is the fragment of title expected&#10;returns True when the title matches, False otherwise">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.title_is" func="yes">
			<Overload retVal="" descr="An expectation for checking the title of a page.&#10;title is the expected title, which must be an exact match&#10;returns True if the title matches, false otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.visibility_of" func="yes">
			<Overload retVal="" descr="An expectation for checking that an element, known to be present on the&#10;DOM of a page, is visible. Visibility means that the element is not only&#10;displayed but also has a height and width that is greater than 0.&#10;element is the WebElement&#10;returns the (same) WebElement once it is visible">
			</Overload>
		</KeyWord>
		<KeyWord name="EC.visibility_of_element_located" func="yes">
			<Overload retVal="" descr="An expectation for checking that an element is present on the DOM of a&#10;page and visible. Visibility means that the element is not only displayed&#10;but also has a height and width that is greater than 0.&#10;locator - used to find the element&#10;returns the WebElement once it is located and visible">
			</Overload>
		</KeyWord>
		<KeyWord name="EOFError" func="yes">
			<Overload retVal="" descr="Read beyond end of file.">
			</Overload>
		</KeyWord>
		<KeyWord name="Element" />
		<KeyWord name="Element.Click" />
		<KeyWord name="Element.Get" />
		<KeyWord name="Element.SendKeys" />
		<KeyWord name="Element.Verify" />
		<KeyWord name="Element.VerifyAttribute" />
		<KeyWord name="Element.VerifyIsChecked" />
		<KeyWord name="Element.VerifyIsDisabled" />
		<KeyWord name="Element.VerifyIsEnabled" />
		<KeyWord name="Element.VerifyIsUncheck" />
		<KeyWord name="Element.VerifyNotexist" />
		<KeyWord name="Element.VerifyText" />
		<KeyWord name="Element.VerifyUI" />
		<KeyWord name="Element.VerifyValue" />
		<KeyWord name="Element.locatingmethod" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="EllipsisType" />
		<KeyWord name="EnvironmentError" func="yes">
			<Overload retVal="" descr="Base class for I/O related errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Exception" func="yes">
			<Overload retVal="" descr="Common base class for all non-exit exceptions.">
			</Overload>
		</KeyWord>
		<KeyWord name="False" />
		<KeyWord name="FileType" func="yes">
			<Overload retVal="" descr="file(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),&#10;writing or appending.  The file will be created if it doesn't exist&#10;when opened for writing or appending; it will be truncated when&#10;opened for writing.  Add a 'b' to the mode for binary files.&#10;Add a '+' to the mode to allow simultaneous reading and writing.&#10;If the buffering argument is given, 0 means unbuffered, 1 means line&#10;buffered, and larger numbers specify the buffer size.  The preferred way&#10;to open a file is with the builtin open() function.&#10;Add a 'U' to mode to open the file for input with universal newline&#10;support.  Any line ending in the input file will be seen as a '\n'&#10;in Python.  Also, a file so opened gains the attribute 'newlines';&#10;the value for this attribute is one of None (no newline read yet),&#10;'\r', '\n', '\r\n' or a tuple containing all the newline types seen.&#10;&#10;'U' cannot be combined with 'w' or '+' mode.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.close" func="yes">
			<Overload retVal="" descr="close() -&gt; None or (perhaps) an integer.  Close the file.&#10;&#10;Sets data attribute .closed to True.  A closed file cannot be used for&#10;further I/O operations.  close() may be called more than once without&#10;error.  Some kinds of file objects (for example, opened by popen())&#10;may return an exit status upon closing.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.closed" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.encoding" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.errors" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.fileno" func="yes">
			<Overload retVal="" descr='fileno() -&gt; integer "file descriptor".&#10;&#10;This is needed for lower-level file interfaces, such os.read().'>
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.flush" func="yes">
			<Overload retVal="" descr="flush() -&gt; None.  Flush the internal I/O buffer.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.isatty" func="yes">
			<Overload retVal="" descr="isatty() -&gt; true or false.  True if the file is connected to a tty device.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.mode" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.name" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.newlines" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.read" func="yes">
			<Overload retVal="" descr="read([size]) -&gt; read at most size bytes, returned as a string.&#10;&#10;If the size argument is negative or omitted, read until EOF is reached.&#10;Notice that when in non-blocking mode, less data than what was requested&#10;may be returned, even if no size parameter was given.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.readinto" func="yes">
			<Overload retVal="" descr="readinto() -&gt; Undocumented.  Don't use this; it may go away.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.readline" func="yes">
			<Overload retVal="" descr="readline([size]) -&gt; next line from the file, as a string.&#10;&#10;Retain newline.  A non-negative size argument limits the maximum&#10;number of bytes to return (an incomplete line may be returned then).&#10;Return an empty string at EOF.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.readlines" func="yes">
			<Overload retVal="" descr="readlines([size]) -&gt; list of strings, each a line from the file.&#10;&#10;Call readline() repeatedly and return a list of the lines so read.&#10;The optional size argument, if given, is an approximate bound on the&#10;total number of bytes in the lines returned.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.seek" func="yes">
			<Overload retVal="" descr="seek(offset[, whence]) -&gt; None.  Move to new file position.&#10;&#10;Argument offset is a byte count.  Optional argument whence defaults to&#10;0 (offset from start of file, offset should be &gt;= 0); other values are 1&#10;(move relative to current position, positive or negative), and 2 (move&#10;relative to end of file, usually negative, although many platforms allow&#10;seeking beyond the end of a file).  If the file is opened in text mode,&#10;only offsets returned by tell() are legal.  Use of other offsets causes&#10;undefined behavior.&#10;Note that not all file objects are seekable.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.softspace" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.tell" func="yes">
			<Overload retVal="" descr="tell() -&gt; current file position, an integer (may be a long integer).">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.truncate" func="yes">
			<Overload retVal="" descr="truncate([size]) -&gt; None.  Truncate the file to at most size bytes.&#10;&#10;Size defaults to the current file position, as returned by tell().">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.write" func="yes">
			<Overload retVal="" descr="write(str) -&gt; None.  Write string str to file.&#10;&#10;Note that due to buffering, flush() or close() may be needed before&#10;the file on disk reflects the data written.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.writelines" func="yes">
			<Overload retVal="" descr="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file.&#10;&#10;Note that newlines are not added.  The sequence can be any iterable object&#10;producing strings. This is equivalent to calling write() for each string.">
			</Overload>
		</KeyWord>
		<KeyWord name="FileType.xreadlines" func="yes">
			<Overload retVal="" descr="xreadlines() -&gt; returns self.&#10;&#10;For backward compatibility. File objects now include the performance&#10;optimizations previously implemented in the xreadlines module.">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox" />
		<KeyWord name="Firefox.NATIVE_EVENTS_ALLOWED" func="yes">
			<Overload retVal="" descr="(bool)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.create_web_element" func="yes">
			<Overload retVal="" descr="Override from RemoteWebDriver to use firefox.WebElement.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.firefox_profile" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.quit" func="yes">
			<Overload retVal="" descr="Quits the driver and close every associated window.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Firefox.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile" />
		<KeyWord name="FirefoxProfile.ANONYMOUS_PROFILE_NAME" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.DEFAULT_PREFERENCES" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.accept_untrusted_certs" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.add_extension" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[extension=webdriver.xpi]" />
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.assume_untrusted_cert_issuer" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.encoded" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.native_events_enabled" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.path" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.port" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.set_preference" func="yes">
			<Overload retVal="" descr="sets the preference that we want in the profile.">
				<Param name="self" />
				<Param name="key" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="FirefoxProfile.set_proxy" />
		<KeyWord name="FirefoxProfile.update_preferences" />
		<KeyWord name="FixTk" />
		<KeyWord name="FixTk.convert_path" />
		<KeyWord name="FixTk.name" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FixTk.prefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FixTk.tcldir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FixTk.tixdir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FixTk.v" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FixTk.ver" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Returns a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raises OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any float.">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.fromhex" func="yes">
			<Overload retVal="" descr="float.fromhex(string) -&gt; float&#10;&#10;Create a floating-point number from a hexadecimal string.&#10;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#10;2047.984375&#10;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#10;-4.9406564584124654e-324">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FloatingPointError" func="yes">
			<Overload retVal="" descr="Floating point operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Formatter" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType" />
		<KeyWord name="FrameType.f_back" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_builtins" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_exc_traceback" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_exc_type" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_exc_value" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_lasti" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_lineno" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_locals" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_restricted" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FrameType.f_trace" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionTestCase" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType" func="yes">
			<Overload retVal="" descr="function(code, globals[, name[, argdefs[, closure]]])&#10;&#10;Create a function object from a code object and a dictionary.&#10;The optional name string overrides the name from the code object.&#10;The optional argdefs tuple specifies the default argument values.&#10;The optional closure tuple supplies the bindings for free variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_closure" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_code" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_defaults" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_dict" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_doc" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionType.func_name" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="FutureWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about constructs that will change semantically&#10;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorExit" func="yes">
			<Overload retVal="" descr="Request that a generator exit.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType" />
		<KeyWord name="GeneratorType.close" func="yes">
			<Overload retVal="" descr="close(arg) -&gt; raise GeneratorExit inside generator.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.gi_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.gi_frame" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.gi_running" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.send" func="yes">
			<Overload retVal="" descr="send(arg) -&gt; send 'arg' into generator,&#10;return next yielded value or raise StopIteration.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorType.throw" func="yes">
			<Overload retVal="" descr="throw(typ[,val[,tb]]) -&gt; raise exception in generator,&#10;return next yielded value or raise StopIteration.">
			</Overload>
		</KeyWord>
		<KeyWord name="Get" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="GetSetDescriptorType" />
		<KeyWord name="Given" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="Go" func="yes">
			<Overload retVal="" descr="Function of Page">
			</Overload>
		</KeyWord>
		<KeyWord name="IOError" func="yes">
			<Overload retVal="" descr="I/O operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie" />
		<KeyWord name="Ie.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.quit" />
		<KeyWord name="Ie.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ie.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportError" func="yes">
			<Overload retVal="" descr="Import can't find module, or can't find name in module.">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about probable mistakes in module imports">
			</Overload>
		</KeyWord>
		<KeyWord name="IndentationError" func="yes">
			<Overload retVal="" descr="Improper indentation.">
			</Overload>
		</KeyWord>
		<KeyWord name="IndexError" func="yes">
			<Overload retVal="" descr="Sequence index out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="InstanceType" func="yes">
			<Overload retVal="" descr="instance(class[, dict])&#10;&#10;Create an instance without calling its __init__() method.&#10;The class must be a classic class.&#10;If present, dict must be a dictionary or None.">
			</Overload>
		</KeyWord>
		<KeyWord name="InstanceType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to an integer, if possible.  A floating point&#10;argument will be truncated towards zero (this does not include a string&#10;representation of a floating point number!)  When converting a string, use&#10;the optional base.  It is an error to supply a base when converting a&#10;non-string.  If base is zero, the proper base is guessed based on the&#10;string content.  If the argument is outside the integer range a&#10;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="IntType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyError" func="yes">
			<Overload retVal="" descr="Mapping key not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyboardInterrupt" func="yes">
			<Overload retVal="" descr="Program interrupted by user.">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType" func="yes">
			<Overload retVal="" descr="function(code, globals[, name[, argdefs[, closure]]])&#10;&#10;Create a function object from a code object and a dictionary.&#10;The optional name string overrides the name from the code object.&#10;The optional argdefs tuple specifies the default argument values.&#10;The optional closure tuple supplies the bindings for free variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_closure" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_code" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_defaults" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_dict" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_doc" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LambdaType.func_name" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType" func="yes">
			<Overload retVal="" descr="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.append" func="yes">
			<Overload retVal="" descr="L.append(object) -- append object to end">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.count" func="yes">
			<Overload retVal="" descr="L.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.extend" func="yes">
			<Overload retVal="" descr="L.extend(iterable) -- extend list by appending elements from the iterable">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.index" func="yes">
			<Overload retVal="" descr="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.insert" func="yes">
			<Overload retVal="" descr="L.insert(index, object) -- insert object before index">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.pop" func="yes">
			<Overload retVal="" descr="L.pop([index]) -&gt; item -- remove and return item at index (default last).&#10;Raises IndexError if list is empty or index is out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.remove" func="yes">
			<Overload retVal="" descr="L.remove(value) -- remove first occurrence of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.reverse" func="yes">
			<Overload retVal="" descr="L.reverse() -- reverse *IN PLACE*">
			</Overload>
		</KeyWord>
		<KeyWord name="ListType.sort" func="yes">
			<Overload retVal="" descr="L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;&#10;cmp(x, y) -&gt; -1, 0, 1">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType" func="yes">
			<Overload retVal="" descr="long(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to a long integer, if possible.  A floating&#10;point argument will be truncated towards zero (this does not include a&#10;string representation of a floating point number!)  When converting a&#10;string, use the optional base.  It is an error to supply a base when&#10;converting a non-string.">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.bit_length" func="yes">
			<Overload retVal="" descr="long.bit_length() -&gt; int or long&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37L)&#10;'0b100101'&#10;&gt;&gt;&gt; (37L).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any long.">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LongType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="LookupError" func="yes">
			<Overload retVal="" descr="Base class for lookup errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="MemberDescriptorType" />
		<KeyWord name="MemoryError" func="yes">
			<Overload retVal="" descr="Out of memory.">
			</Overload>
		</KeyWord>
		<KeyWord name="MethodType" func="yes">
			<Overload retVal="" descr="instancemethod(function, instance, class)&#10;&#10;Create an instance method object.">
			</Overload>
		</KeyWord>
		<KeyWord name="MethodType.im_class" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MethodType.im_func" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MethodType.im_self" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MissingSectionHeaderError" func="yes">
			<Overload retVal="" descr="Function of ConfigParser.MissingSectionHeaderError">
			</Overload>
		</KeyWord>
		<KeyWord name="ModuleType" func="yes">
			<Overload retVal="" descr="module(name[, doc])&#10;&#10;Create a module object.&#10;The name must be a string; the optional doc argument can have any type.">
			</Overload>
		</KeyWord>
		<KeyWord name="NameError" func="yes">
			<Overload retVal="" descr="Name not found globally.">
			</Overload>
		</KeyWord>
		<KeyWord name="NoDefaultRoot" func="yes">
			<Overload retVal="" descr="Inhibit setting of default root window.&#10;&#10;Call this function to inhibit that the first instance of&#10;Tk is used for windows without an explicit parent window.">
			</Overload>
		</KeyWord>
		<KeyWord name="None" />
		<KeyWord name="NoneType" />
		<KeyWord name="NotImplementedError" func="yes">
			<Overload retVal="" descr="Method or function hasn't been implemented yet.">
			</Overload>
		</KeyWord>
		<KeyWord name="NotImplementedType" />
		<KeyWord name="OSError" func="yes">
			<Overload retVal="" descr="OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="ObjectType" func="yes">
			<Overload retVal="" descr="The most base type">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera" func="yes">
			<Overload retVal="" descr="Controls the OperaDriver and allows you to drive the browser.">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the OperaDriver executable&#10;that is started when starting the OperaDriver">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Opera.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="OverflowError" func="yes">
			<Overload retVal="" descr="Result too large to be represented.">
			</Overload>
		</KeyWord>
		<KeyWord name="Page" />
		<KeyWord name="Page.Go" />
		<KeyWord name="Page.Verify" />
		<KeyWord name="ParsingError" func="yes">
			<Overload retVal="" descr="Function of ConfigParser.ParsingError">
			</Overload>
		</KeyWord>
		<KeyWord name="PendingDeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about features which will be deprecated&#10;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS" func="yes">
			<Overload retVal="" descr="Wrapper to communicate with PhantomJS through Ghostdriver.&#10;&#10;You will need to follow all the directions here:&#10;https://github.com/detro/ghostdriver">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the PhantomJS executable&#10;that is started when starting the PhantomJS">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhantomJS.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Popen" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy" />
		<KeyWord name="Proxy.add_to_capabilities" />
		<KeyWord name="Proxy.auto_detect" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.ftp_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.http_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.no_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.proxyType" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.proxy_autoconfig_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.proxy_type" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Proxy.ssl_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="ReferenceError" func="yes">
			<Overload retVal="" descr="Weak ref proxy used after referent went away.">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote" func="yes">
			<Overload retVal="" descr="Controls a browser by sending commands to a remote server.&#10;This server is expected to be running the WebDriver wire protocol as defined&#10;here: http://code.google.com/p/selenium/wiki/JsonWireProtocol&#10;&#10;:Attributes:&#10; - command_executor - The command.CommandExecutor object used to execute commands.&#10; - error_handler - errorhandler.ErrorHandler object used to verify that the server did not return an error.&#10; - session_id - The session ID to send with every command.&#10; - capabilities - A dictionary of capabilities of the underlying browser for this instance's session.&#10; - proxy - A selenium.webdriver.common.proxy.Proxy object, to specify a proxy for the browser to use.">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.quit" func="yes">
			<Overload retVal="" descr="Quits the driver and closes every associated window.&#10;&#10;:Usage:&#10;    driver.quit()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="Remote.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeError" func="yes">
			<Overload retVal="" descr="Unspecified run-time error.">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious runtime behavior.">
			</Overload>
		</KeyWord>
		<KeyWord name="SendKeys" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="SliceType" func="yes">
			<Overload retVal="" descr="slice([start,] stop[, step])&#10;&#10;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
			</Overload>
		</KeyWord>
		<KeyWord name="SliceType.indices" func="yes">
			<Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#10;&#10;Assuming a sequence of length len, calculate the start and stop&#10;indices, and the stride length of the extended slice described by&#10;S. Out of bounds indices are clipped in a manner consistent with the&#10;handling of normal slices.">
			</Overload>
		</KeyWord>
		<KeyWord name="SliceType.start" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="SliceType.step" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="SliceType.stop" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="StandardError" func="yes">
			<Overload retVal="" descr="Base class for all standard Python exceptions that do not represent&#10;interpreter exiting.">
			</Overload>
		</KeyWord>
		<KeyWord name="Step" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="StopIteration" func="yes">
			<Overload retVal="" descr="Signal the end from iterator.next().">
			</Overload>
		</KeyWord>
		<KeyWord name="StringIO" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; string&#10;&#10;Return a copy of the string S with only its first character&#10;capitalized.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.center" func="yes">
			<Overload retVal="" descr="S.center(width[, fillchar]) -&gt; string&#10;&#10;Return S centered in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.count" func="yes">
			<Overload retVal="" descr="S.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of substring sub in&#10;string S[start:end].  Optional arguments start and end are interpreted&#10;as in slice notation.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; object&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; object&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that is able to handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.endswith" func="yes">
			<Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.expandtabs" func="yes">
			<Overload retVal="" descr="S.expandtabs([tabsize]) -&gt; string&#10;&#10;Return a copy of S where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; string&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#10;&#10;Return True if all characters in S are alphabetic&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#10;&#10;Return True if all characters in S are whitespace&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in S are uppercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; string&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; string&#10;&#10;Return S left-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; string&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.replace" func="yes">
			<Overload retVal="" descr="S.replace(old, new[, count]) -&gt; string&#10;&#10;Return a copy of string S with all occurrences of substring&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rfind" func="yes">
			<Overload retVal="" descr="S.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rjust" func="yes">
			<Overload retVal="" descr="S.rjust(width[, fillchar]) -&gt; string&#10;&#10;Return S right-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rpartition" func="yes">
			<Overload retVal="" descr="S.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, starting at the end of S, and return&#10;the part before it, the separator itself, and the part after it.  If the&#10;separator is not found, return two empty strings and S.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string, starting at the end of the string and working&#10;to the front.  If maxsplit is given, at most maxsplit splits are&#10;done. If sep is not specified or is None, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.split" func="yes">
			<Overload retVal="" descr="S.split([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified or is None, any&#10;whitespace string is a separator and empty strings are removed&#10;from the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines([keepends]) -&gt; list of strings&#10;&#10;Return a list of the lines in S, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; string&#10;&#10;Return a copy of the string S with uppercase characters&#10;converted to lowercase and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; string&#10;&#10;Return a titlecased version of S, i.e. words start with uppercase&#10;characters, all remaining cased characters have lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.translate" func="yes">
			<Overload retVal="" descr="S.translate(table [,deletechars]) -&gt; string&#10;&#10;Return a copy of the string S, where all characters occurring&#10;in the optional argument deletechars are removed, and the&#10;remaining characters have been mapped through the given&#10;translation table, which must be a string of length 256 or None.&#10;If the table argument is None, no translation is applied and&#10;the operation simply removes the characters in deletechars.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; string&#10;&#10;Return a copy of the string S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="StringType.zfill" func="yes">
			<Overload retVal="" descr="S.zfill(width) -&gt; string&#10;&#10;Pad a numeric string S with zeros on the left, to fill a field&#10;of the specified width.  The string S is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxError" func="yes">
			<Overload retVal="" descr="Invalid syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemError" func="yes">
			<Overload retVal="" descr="Internal error in the Python interpreter.&#10;&#10;Please report this to the Python maintainer, along with the traceback,&#10;the Python version, and the hardware/OS platform and version.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemExit" func="yes">
			<Overload retVal="" descr="Request to exit from the interpreter.">
			</Overload>
		</KeyWord>
		<KeyWord name="TabError" func="yes">
			<Overload retVal="" descr="Improper mixture of spaces and tabs.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tcl" func="yes">
			<Overload retVal="" descr=>
				<Param name="[screenName=None" />
				<Param name="[baseName=None" />
				<Param name="[className=Tk" />
				<Param name="[useTk=0]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="TclError" />
		<KeyWord name="TclError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TclError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TestCase" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="TestLoader" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="TestProgram" func="yes">
			<Overload retVal="" descr="Function of unittest.TestProgram">
			</Overload>
		</KeyWord>
		<KeyWord name="TestResult" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="TestSuite" func="yes">
			<Overload retVal="" descr="Function of unittest.TestSuite">
			</Overload>
		</KeyWord>
		<KeyWord name="TextTestResult" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="TextTestRunner" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestRunner">
			</Overload>
		</KeyWord>
		<KeyWord name="Then" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="TimeoutException" func="yes">
			<Overload retVal="" descr="Thrown when a command does not complete in enough time.">
			</Overload>
		</KeyWord>
		<KeyWord name="TimeoutException.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TimeoutException.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter" func="yes">
			<Overload retVal="" descr='Wrapper functions for Tcl/Tk.&#10;&#10;Tkinter provides classes which allow the display, positioning and&#10;control of widgets. Toplevel widgets are Tk and Toplevel. Other&#10;widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,&#10;Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox&#10;LabelFrame and PanedWindow.&#10;&#10;Properties of the widgets are specified with keyword arguments.&#10;Keyword arguments have the same name as the corresponding resource&#10;under Tk.&#10;&#10;Widgets are positioned with one of the geometry managers Place, Pack&#10;or Grid. These managers can be called with methods place, pack, grid&#10;available in every Widget.&#10;&#10;Actions are bound to events by resources (e.g. keyword argument&#10;command) or with the method bind.&#10;&#10;Example (Hello, World):&#10;import Tkinter&#10;from Tkconstants import *&#10;tk = Tkinter.Tk()&#10;frame = Tkinter.Frame(tk, relief=RIDGE, borderwidth=2)&#10;frame.pack(fill=BOTH,expand=1)&#10;label = Tkinter.Label(frame, text="Hello, World")&#10;label.pack(fill=X, expand=1)&#10;button = Tkinter.Button(frame,text="Exit",command=tk.destroy)&#10;button.pack(side=BOTTOM)&#10;tk.mainloop()'>
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ACTIVE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ALL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ANCHOR" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ARC" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.At" func="yes">
			<Overload retVal="" descr=>
				<Param name="x" />
				<Param name="[y=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.AtEnd" />
		<KeyWord name="Tkinter.AtInsert" />
		<KeyWord name="Tkinter.AtSelFirst" />
		<KeyWord name="Tkinter.AtSelLast" />
		<KeyWord name="Tkinter.BASELINE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BEVEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BOTH" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BOTTOM" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BROWSE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BUTT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BaseWidget" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BitmapImage" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType" func="yes">
			<Overload retVal="" descr="bool(x) -&gt; bool&#10;&#10;Returns True when the argument x is true, False otherwise.&#10;The builtins True and False are the only two instances of the class bool.&#10;The class bool is a subclass of the class int, and cannot be subclassed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BooleanVar" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BufferType" func="yes">
			<Overload retVal="" descr="buffer(object [, offset[, size]])&#10;&#10;Create a new buffer object which references the given object.&#10;The buffer will reference a slice of the target object from the&#10;start of the object (or at the specified offset). The slice will&#10;extend to the end of the target object (or with the specified size).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.BuiltinFunctionType" />
		<KeyWord name="Tkinter.BuiltinMethodType" />
		<KeyWord name="Tkinter.Button" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CASCADE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CENTER" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CHAR" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CHECKBUTTON" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CHORD" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.COMMAND" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CURRENT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CallWrapper" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Canvas" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Checkbutton" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ClassType" func="yes">
			<Overload retVal="" descr="classobj(name, bases, dict)&#10;&#10;Create a class object.  The name must be a string; the second argument&#10;a tuple of classes, and the third a dictionary.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType" func="yes">
			<Overload retVal="" descr="code(argcount, nlocals, stacksize, flags, codestring, constants, names,&#10;      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])&#10;&#10;Create a code object.  Not for the faint of heart.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_argcount" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_cellvars" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_consts" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_filename" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_firstlineno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_flags" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_freevars" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_lnotab" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_name" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_names" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_nlocals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_stacksize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.CodeType.co_varnames" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ComplexType" func="yes">
			<Overload retVal="" descr="complex(real[, imag]) -&gt; complex number&#10;&#10;Create a complex number from a real part and an optional imaginary part.&#10;This is equivalent to (real + imag*1j) where imag defaults to 0.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ComplexType.conjugate" func="yes">
			<Overload retVal="" descr="complex.conjugate() -&gt; complex&#10;&#10;Returns the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ComplexType.imag" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ComplexType.real" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DISABLED" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DOTBOX" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType" />
		<KeyWord name="Tkinter.DictProxyType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictProxyType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.clear" func="yes">
			<Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.pop" func="yes">
			<Overload retVal="" descr="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.&#10;If key is not found, d is returned if given, otherwise KeyError is raised">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictType.viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.clear" func="yes">
			<Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.pop" func="yes">
			<Overload retVal="" descr="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.&#10;If key is not found, d is returned if given, otherwise KeyError is raised">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DictionaryType.viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.DoubleVar" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.E" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.END" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.EW" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.EXCEPTION" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.EXTENDED" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.EllipsisType" />
		<KeyWord name="Tkinter.Entry" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Event" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FIRST" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FLAT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType" func="yes">
			<Overload retVal="" descr="file(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),&#10;writing or appending.  The file will be created if it doesn't exist&#10;when opened for writing or appending; it will be truncated when&#10;opened for writing.  Add a 'b' to the mode for binary files.&#10;Add a '+' to the mode to allow simultaneous reading and writing.&#10;If the buffering argument is given, 0 means unbuffered, 1 means line&#10;buffered, and larger numbers specify the buffer size.  The preferred way&#10;to open a file is with the builtin open() function.&#10;Add a 'U' to mode to open the file for input with universal newline&#10;support.  Any line ending in the input file will be seen as a '\n'&#10;in Python.  Also, a file so opened gains the attribute 'newlines';&#10;the value for this attribute is one of None (no newline read yet),&#10;'\r', '\n', '\r\n' or a tuple containing all the newline types seen.&#10;&#10;'U' cannot be combined with 'w' or '+' mode.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.close" func="yes">
			<Overload retVal="" descr="close() -&gt; None or (perhaps) an integer.  Close the file.&#10;&#10;Sets data attribute .closed to True.  A closed file cannot be used for&#10;further I/O operations.  close() may be called more than once without&#10;error.  Some kinds of file objects (for example, opened by popen())&#10;may return an exit status upon closing.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.closed" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.encoding" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.errors" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.fileno" func="yes">
			<Overload retVal="" descr='fileno() -&gt; integer "file descriptor".&#10;&#10;This is needed for lower-level file interfaces, such os.read().'>
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.flush" func="yes">
			<Overload retVal="" descr="flush() -&gt; None.  Flush the internal I/O buffer.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.isatty" func="yes">
			<Overload retVal="" descr="isatty() -&gt; true or false.  True if the file is connected to a tty device.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.mode" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.name" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.newlines" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.read" func="yes">
			<Overload retVal="" descr="read([size]) -&gt; read at most size bytes, returned as a string.&#10;&#10;If the size argument is negative or omitted, read until EOF is reached.&#10;Notice that when in non-blocking mode, less data than what was requested&#10;may be returned, even if no size parameter was given.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.readinto" func="yes">
			<Overload retVal="" descr="readinto() -&gt; Undocumented.  Don't use this; it may go away.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.readline" func="yes">
			<Overload retVal="" descr="readline([size]) -&gt; next line from the file, as a string.&#10;&#10;Retain newline.  A non-negative size argument limits the maximum&#10;number of bytes to return (an incomplete line may be returned then).&#10;Return an empty string at EOF.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.readlines" func="yes">
			<Overload retVal="" descr="readlines([size]) -&gt; list of strings, each a line from the file.&#10;&#10;Call readline() repeatedly and return a list of the lines so read.&#10;The optional size argument, if given, is an approximate bound on the&#10;total number of bytes in the lines returned.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.seek" func="yes">
			<Overload retVal="" descr="seek(offset[, whence]) -&gt; None.  Move to new file position.&#10;&#10;Argument offset is a byte count.  Optional argument whence defaults to&#10;0 (offset from start of file, offset should be &gt;= 0); other values are 1&#10;(move relative to current position, positive or negative), and 2 (move&#10;relative to end of file, usually negative, although many platforms allow&#10;seeking beyond the end of a file).  If the file is opened in text mode,&#10;only offsets returned by tell() are legal.  Use of other offsets causes&#10;undefined behavior.&#10;Note that not all file objects are seekable.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.softspace" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.tell" func="yes">
			<Overload retVal="" descr="tell() -&gt; current file position, an integer (may be a long integer).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.truncate" func="yes">
			<Overload retVal="" descr="truncate([size]) -&gt; None.  Truncate the file to at most size bytes.&#10;&#10;Size defaults to the current file position, as returned by tell().">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.write" func="yes">
			<Overload retVal="" descr="write(str) -&gt; None.  Write string str to file.&#10;&#10;Note that due to buffering, flush() or close() may be needed before&#10;the file on disk reflects the data written.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.writelines" func="yes">
			<Overload retVal="" descr="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file.&#10;&#10;Note that newlines are not added.  The sequence can be any iterable object&#10;producing strings. This is equivalent to calling write() for each string.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FileType.xreadlines" func="yes">
			<Overload retVal="" descr="xreadlines() -&gt; returns self.&#10;&#10;For backward compatibility. File objects now include the performance&#10;optimizations previously implemented in the xreadlines module.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Returns a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raises OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any float.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.fromhex" func="yes">
			<Overload retVal="" descr="float.fromhex(string) -&gt; float&#10;&#10;Create a floating-point number from a hexadecimal string.&#10;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#10;2047.984375&#10;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#10;-4.9406564584124654e-324">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FloatType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Frame" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType" />
		<KeyWord name="Tkinter.FrameType.f_back" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_builtins" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_exc_traceback" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_exc_type" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_exc_value" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_lasti" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_lineno" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_locals" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_restricted" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FrameType.f_trace" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType" func="yes">
			<Overload retVal="" descr="function(code, globals[, name[, argdefs[, closure]]])&#10;&#10;Create a function object from a code object and a dictionary.&#10;The optional name string overrides the name from the code object.&#10;The optional argdefs tuple specifies the default argument values.&#10;The optional closure tuple supplies the bindings for free variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_closure" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_code" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_defaults" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_dict" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_doc" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.FunctionType.func_name" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GROOVE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType" />
		<KeyWord name="Tkinter.GeneratorType.close" func="yes">
			<Overload retVal="" descr="close(arg) -&gt; raise GeneratorExit inside generator.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.gi_code" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.gi_frame" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.gi_running" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.send" func="yes">
			<Overload retVal="" descr="send(arg) -&gt; send 'arg' into generator,&#10;return next yielded value or raise StopIteration.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GeneratorType.throw" func="yes">
			<Overload retVal="" descr="throw(typ[,val[,tb]]) -&gt; raise exception in generator,&#10;return next yielded value or raise StopIteration.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.GetSetDescriptorType" />
		<KeyWord name="Tkinter.Grid" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.HIDDEN" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.HORIZONTAL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.INSERT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.INSIDE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Image" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.InstanceType" func="yes">
			<Overload retVal="" descr="instance(class[, dict])&#10;&#10;Create an instance without calling its __init__() method.&#10;The class must be a classic class.&#10;If present, dict must be a dictionary or None.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.InstanceType.next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to an integer, if possible.  A floating point&#10;argument will be truncated towards zero (this does not include a string&#10;representation of a floating point number!)  When converting a string, use&#10;the optional base.  It is an error to supply a base when converting a&#10;non-string.  If base is zero, the proper base is guessed based on the&#10;string content.  If the argument is outside the integer range a&#10;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.IntVar" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LAST" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LEFT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Label" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LabelFrame" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType" func="yes">
			<Overload retVal="" descr="function(code, globals[, name[, argdefs[, closure]]])&#10;&#10;Create a function object from a code object and a dictionary.&#10;The optional name string overrides the name from the code object.&#10;The optional argdefs tuple specifies the default argument values.&#10;The optional closure tuple supplies the bindings for free variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_closure" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_code" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_defaults" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_dict" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_doc" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_globals" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LambdaType.func_name" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType" func="yes">
			<Overload retVal="" descr="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.append" func="yes">
			<Overload retVal="" descr="L.append(object) -- append object to end">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.count" func="yes">
			<Overload retVal="" descr="L.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.extend" func="yes">
			<Overload retVal="" descr="L.extend(iterable) -- extend list by appending elements from the iterable">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.index" func="yes">
			<Overload retVal="" descr="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.insert" func="yes">
			<Overload retVal="" descr="L.insert(index, object) -- insert object before index">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.pop" func="yes">
			<Overload retVal="" descr="L.pop([index]) -&gt; item -- remove and return item at index (default last).&#10;Raises IndexError if list is empty or index is out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.remove" func="yes">
			<Overload retVal="" descr="L.remove(value) -- remove first occurrence of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.reverse" func="yes">
			<Overload retVal="" descr="L.reverse() -- reverse *IN PLACE*">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ListType.sort" func="yes">
			<Overload retVal="" descr="L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;&#10;cmp(x, y) -&gt; -1, 0, 1">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Listbox" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType" func="yes">
			<Overload retVal="" descr="long(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to a long integer, if possible.  A floating&#10;point argument will be truncated towards zero (this does not include a&#10;string representation of a floating point number!)  When converting a&#10;string, use the optional base.  It is an error to supply a base when&#10;converting a non-string.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.bit_length" func="yes">
			<Overload retVal="" descr="long.bit_length() -&gt; int or long&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37L)&#10;'0b100101'&#10;&gt;&gt;&gt; (37L).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any long.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.LongType.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MITER" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MOVETO" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MULTIPLE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MemberDescriptorType" />
		<KeyWord name="Tkinter.Menu" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Menubutton" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Message" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MethodType" func="yes">
			<Overload retVal="" descr="instancemethod(function, instance, class)&#10;&#10;Create an instance method object.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MethodType.im_class" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MethodType.im_func" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.MethodType.im_self" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Misc" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ModuleType" func="yes">
			<Overload retVal="" descr="module(name[, doc])&#10;&#10;Create a module object.&#10;The name must be a string; the optional doc argument can have any type.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.N" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NONE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NORMAL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NS" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NSEW" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NUMERIC" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NW" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NoDefaultRoot" func="yes">
			<Overload retVal="" descr="Inhibit setting of default root window.&#10;&#10;Call this function to inhibit that the first instance of&#10;Tk is used for windows without an explicit parent window.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.NoneType" />
		<KeyWord name="Tkinter.NotImplementedType" />
		<KeyWord name="Tkinter.ON" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.OUTSIDE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ObjectType" func="yes">
			<Overload retVal="" descr="The most base type">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.OptionMenu" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.PAGES" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.PIESLICE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.PROJECTING" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Pack" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.PanedWindow" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.PhotoImage" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Place" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.RADIOBUTTON" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.RAISED" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.READABLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.RIDGE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.RIGHT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.ROUND" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Radiobutton" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.S" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SCROLL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SEL_FIRST" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SEL_LAST" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SEPARATOR" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SINGLE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SOLID" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SUNKEN" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SW" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Scale" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Scrollbar" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SliceType" func="yes">
			<Overload retVal="" descr="slice([start,] stop[, step])&#10;&#10;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SliceType.indices" func="yes">
			<Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#10;&#10;Assuming a sequence of length len, calculate the start and stop&#10;indices, and the stride length of the extended slice described by&#10;S. Out of bounds indices are clipped in a manner consistent with the&#10;handling of normal slices.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SliceType.start" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SliceType.step" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.SliceType.stop" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Spinbox" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; string&#10;&#10;Return a copy of the string S with only its first character&#10;capitalized.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.center" func="yes">
			<Overload retVal="" descr="S.center(width[, fillchar]) -&gt; string&#10;&#10;Return S centered in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.count" func="yes">
			<Overload retVal="" descr="S.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of substring sub in&#10;string S[start:end].  Optional arguments start and end are interpreted&#10;as in slice notation.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; object&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; object&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that is able to handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.endswith" func="yes">
			<Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.expandtabs" func="yes">
			<Overload retVal="" descr="S.expandtabs([tabsize]) -&gt; string&#10;&#10;Return a copy of S where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; string&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#10;&#10;Return True if all characters in S are alphabetic&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#10;&#10;Return True if all characters in S are whitespace&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in S are uppercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; string&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; string&#10;&#10;Return S left-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; string&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.replace" func="yes">
			<Overload retVal="" descr="S.replace(old, new[, count]) -&gt; string&#10;&#10;Return a copy of string S with all occurrences of substring&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rfind" func="yes">
			<Overload retVal="" descr="S.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rjust" func="yes">
			<Overload retVal="" descr="S.rjust(width[, fillchar]) -&gt; string&#10;&#10;Return S right-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rpartition" func="yes">
			<Overload retVal="" descr="S.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, starting at the end of S, and return&#10;the part before it, the separator itself, and the part after it.  If the&#10;separator is not found, return two empty strings and S.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string, starting at the end of the string and working&#10;to the front.  If maxsplit is given, at most maxsplit splits are&#10;done. If sep is not specified or is None, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.split" func="yes">
			<Overload retVal="" descr="S.split([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified or is None, any&#10;whitespace string is a separator and empty strings are removed&#10;from the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines([keepends]) -&gt; list of strings&#10;&#10;Return a list of the lines in S, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; string&#10;&#10;Return a copy of the string S with uppercase characters&#10;converted to lowercase and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; string&#10;&#10;Return a titlecased version of S, i.e. words start with uppercase&#10;characters, all remaining cased characters have lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.translate" func="yes">
			<Overload retVal="" descr="S.translate(table [,deletechars]) -&gt; string&#10;&#10;Return a copy of the string S, where all characters occurring&#10;in the optional argument deletechars are removed, and the&#10;remaining characters have been mapped through the given&#10;translation table, which must be a string of length 256 or None.&#10;If the table argument is None, no translation is applied and&#10;the operation simply removes the characters in deletechars.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; string&#10;&#10;Return a copy of the string S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringType.zfill" func="yes">
			<Overload retVal="" descr="S.zfill(width) -&gt; string&#10;&#10;Pad a numeric string S with zeros on the left, to fill a field&#10;of the specified width.  The string S is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringTypes" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.StringVar" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Studbutton" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TOP" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TRUE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Tcl" func="yes">
			<Overload retVal="" descr=>
				<Param name="[screenName=None" />
				<Param name="[baseName=None" />
				<Param name="[className=Tk" />
				<Param name="[useTk=0]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TclError" />
		<KeyWord name="Tkinter.TclError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TclError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TclVersion" func="yes">
			<Overload retVal="" descr="(float)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Text" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Tk" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TkVersion" func="yes">
			<Overload retVal="" descr="(float)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Toplevel" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TracebackType" />
		<KeyWord name="Tkinter.TracebackType.tb_frame" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TracebackType.tb_lasti" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TracebackType.tb_lineno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TracebackType.tb_next" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Tributton" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TupleType" func="yes">
			<Overload retVal="" descr="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items&#10;&#10;If the argument is a tuple, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TupleType.count" func="yes">
			<Overload retVal="" descr="T.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TupleType.index" func="yes">
			<Overload retVal="" descr="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TypeType" func="yes">
			<Overload retVal="" descr="type(object) -&gt; the object's type&#10;type(name, bases, dict) -&gt; a new type">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.TypeType.mro" func="yes">
			<Overload retVal="" descr="mro() -&gt; list&#10;return a type's method resolution order">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UNDERLINE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UNITS" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnboundMethodType" func="yes">
			<Overload retVal="" descr="instancemethod(function, instance, class)&#10;&#10;Create an instance method object.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnboundMethodType.im_class" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnboundMethodType.im_func" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnboundMethodType.im_self" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType" func="yes">
			<Overload retVal="" descr="unicode(string [, encoding[, errors]]) -&gt; object&#10;&#10;Create a new Unicode object from the given encoded string.&#10;encoding defaults to the current default string encoding.&#10;errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; unicode&#10;&#10;Return a capitalized version of S, i.e. make the first character&#10;have upper case and the rest lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.center" func="yes">
			<Overload retVal="" descr="S.center(width[, fillchar]) -&gt; unicode&#10;&#10;Return S centered in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.count" func="yes">
			<Overload retVal="" descr="S.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of substring sub in&#10;Unicode string S[start:end].  Optional arguments start and end are&#10;interpreted as in slice notation.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; string or unicode&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; string or unicode&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that can handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.endswith" func="yes">
			<Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.expandtabs" func="yes">
			<Overload retVal="" descr="S.expandtabs([tabsize]) -&gt; unicode&#10;&#10;Return a copy of S where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; unicode&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#10;&#10;Return True if all characters in S are alphabetic&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isdecimal" func="yes">
			<Overload retVal="" descr="S.isdecimal() -&gt; bool&#10;&#10;Return True if there are only decimal characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isnumeric" func="yes">
			<Overload retVal="" descr="S.isnumeric() -&gt; bool&#10;&#10;Return True if there are only numeric characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#10;&#10;Return True if all characters in S are whitespace&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. upper- and titlecase characters may only&#10;follow uncased characters and lowercase characters only cased ones.&#10;Return False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in S are uppercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; unicode&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; int&#10;&#10;Return S left-justified in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; unicode&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.replace" func="yes">
			<Overload retVal="" descr="S.replace(old, new[, count]) -&gt; unicode&#10;&#10;Return a copy of S with all occurrences of substring&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rfind" func="yes">
			<Overload retVal="" descr="S.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rjust" func="yes">
			<Overload retVal="" descr="S.rjust(width[, fillchar]) -&gt; unicode&#10;&#10;Return S right-justified in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rpartition" func="yes">
			<Overload retVal="" descr="S.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, starting at the end of S, and return&#10;the part before it, the separator itself, and the part after it.  If the&#10;separator is not found, return two empty strings and S.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in S, using sep as the&#10;delimiter string, starting at the end of the string and&#10;working to the front.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.split" func="yes">
			<Overload retVal="" descr="S.split([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in S, using sep as the&#10;delimiter string.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified or is None, any&#10;whitespace string is a separator and empty strings are&#10;removed from the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines([keepends]) -&gt; list of strings&#10;&#10;Return a list of the lines in S, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; unicode&#10;&#10;Return a copy of S with uppercase characters converted to lowercase&#10;and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; unicode&#10;&#10;Return a titlecased version of S, i.e. words start with title case&#10;characters, all remaining cased characters have lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.translate" func="yes">
			<Overload retVal="" descr="S.translate(table) -&gt; unicode&#10;&#10;Return a copy of the string S, where all characters have been mapped&#10;through the given translation table, which must be a mapping of&#10;Unicode ordinals to Unicode ordinals, Unicode strings or None.&#10;Unmapped characters are left untouched. Characters mapped to None&#10;are deleted.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; unicode&#10;&#10;Return a copy of S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.UnicodeType.zfill" func="yes">
			<Overload retVal="" descr="S.zfill(width) -&gt; unicode&#10;&#10;Pad a numeric string S with zeros on the left, to fill a field&#10;of the specified width. The string S is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.VERTICAL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Variable" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.W" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.WORD" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.WRITABLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Widget" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Wm" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.X" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.XRangeType" func="yes">
			<Overload retVal="" descr="xrange([start,] stop[, step]) -&gt; xrange object&#10;&#10;Like range(), but instead of returning a list, returns an object that&#10;generates the numbers in the range on demand.  For looping, this is &#10;slightly faster than range() and more memory efficient.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.XView" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.Y" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.YES" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.YView" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getboolean" func="yes">
			<Overload retVal="" descr="Convert true and false to integer values 1 and 0.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Returns a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raises OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any float.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.fromhex" func="yes">
			<Overload retVal="" descr="float.fromhex(string) -&gt; float&#10;&#10;Create a floating-point number from a hexadecimal string.&#10;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#10;2047.984375&#10;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#10;-4.9406564584124654e-324">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getdouble.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to an integer, if possible.  A floating point&#10;argument will be truncated towards zero (this does not include a string&#10;representation of a floating point number!)  When converting a string, use&#10;the optional base.  It is an error to supply a base when converting a&#10;non-string.  If base is zero, the proper base is guessed based on the&#10;string content.  If the argument is outside the integer range a&#10;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.getint.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.image_names" />
		<KeyWord name="Tkinter.image_types" />
		<KeyWord name="Tkinter.mainloop" func="yes">
			<Overload retVal="" descr="Run the main loop of Tcl.">
				<Param name="[n=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="Tkinter.wantobjects" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions" func="yes">
			<Overload retVal="" descr="Generate touch actions. Works like ActionChains; actions are stored in the&#10;TouchActions object and are fired with perform().">
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.double_tap" func="yes">
			<Overload retVal="" descr="Double taps on a given element.&#10;&#10;Args:&#10;    -element: The element to tap.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.flick" func="yes">
			<Overload retVal="" descr="Flicks, starting anywhere on the screen.&#10;&#10;Args:&#10;    -xspeed: The X speed in pixels per second.&#10;    -yspeed: The Y speed in pixels per second.">
				<Param name="self" />
				<Param name="xspeed" />
				<Param name="yspeed" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.flick_element" func="yes">
			<Overload retVal="" descr="Flick starting at on_element, and moving by the xoffset and yoffset.&#10;&#10;Args:&#10;    -on_element: Flick will start at center of element.&#10;    -xoffset: X offset to flick to.&#10;    -yoffset: Y offset to flick to.&#10;    -speed: Pixels per second to flick.">
				<Param name="self" />
				<Param name="on_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
				<Param name="speed" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.long_press" func="yes">
			<Overload retVal="" descr="Long press on an element.&#10;&#10;Args:&#10;    -on_element: The element to long press.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.move" func="yes">
			<Overload retVal="" descr="Move held tap to specified location.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.perform" func="yes">
			<Overload retVal="" descr="Performs all stored actions.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.release" func="yes">
			<Overload retVal="" descr="Release previously issued tap and hold command, at specified location.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.scroll" func="yes">
			<Overload retVal="" descr="Touch and scroll, moving by xoffset and yoffset.&#10;&#10;Args:&#10;    -xoffset: X offset to move to.&#10;    -yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.scroll_from_element" func="yes">
			<Overload retVal="" descr="Touch and scroll starting at on_element, moving by xoffset and yoffset.&#10;&#10;Args:&#10;    -on_element: Element where scroll starts.&#10;    -xoffset: X offset to move to.&#10;    -yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="on_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.tap" func="yes">
			<Overload retVal="" descr="Taps on a given element.&#10;&#10;Args:&#10;    -element: The element to tap.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="TouchActions.tap_and_hold" func="yes">
			<Overload retVal="" descr="Tap and hold a given element.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="TracebackType" />
		<KeyWord name="TracebackType.tb_frame" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TracebackType.tb_lasti" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TracebackType.tb_lineno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="TracebackType.tb_next" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="True" />
		<KeyWord name="TupleType" func="yes">
			<Overload retVal="" descr="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items&#10;&#10;If the argument is a tuple, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="TupleType.count" func="yes">
			<Overload retVal="" descr="T.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="TupleType.index" func="yes">
			<Overload retVal="" descr="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value.&#10;Raises ValueError if the value is not present.">
			</Overload>
		</KeyWord>
		<KeyWord name="TypeError" func="yes">
			<Overload retVal="" descr="Inappropriate argument type.">
			</Overload>
		</KeyWord>
		<KeyWord name="TypeType" func="yes">
			<Overload retVal="" descr="type(object) -&gt; the object's type&#10;type(name, bases, dict) -&gt; a new type">
			</Overload>
		</KeyWord>
		<KeyWord name="TypeType.mro" func="yes">
			<Overload retVal="" descr="mro() -&gt; list&#10;return a type's method resolution order">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundLocalError" func="yes">
			<Overload retVal="" descr="Local name referenced but not bound to a value.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundMethodType" func="yes">
			<Overload retVal="" descr="instancemethod(function, instance, class)&#10;&#10;Create an instance method object.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundMethodType.im_class" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundMethodType.im_func" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundMethodType.im_self" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeDecodeError" func="yes">
			<Overload retVal="" descr="Unicode decoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeEncodeError" func="yes">
			<Overload retVal="" descr="Unicode encoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeError" func="yes">
			<Overload retVal="" descr="Unicode related error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeTranslateError" func="yes">
			<Overload retVal="" descr="Unicode translation error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType" func="yes">
			<Overload retVal="" descr="unicode(string [, encoding[, errors]]) -&gt; object&#10;&#10;Create a new Unicode object from the given encoded string.&#10;encoding defaults to the current default string encoding.&#10;errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; unicode&#10;&#10;Return a capitalized version of S, i.e. make the first character&#10;have upper case and the rest lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.center" func="yes">
			<Overload retVal="" descr="S.center(width[, fillchar]) -&gt; unicode&#10;&#10;Return S centered in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.count" func="yes">
			<Overload retVal="" descr="S.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of substring sub in&#10;Unicode string S[start:end].  Optional arguments start and end are&#10;interpreted as in slice notation.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; string or unicode&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; string or unicode&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that can handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.endswith" func="yes">
			<Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.expandtabs" func="yes">
			<Overload retVal="" descr="S.expandtabs([tabsize]) -&gt; unicode&#10;&#10;Return a copy of S where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; unicode&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#10;&#10;Return True if all characters in S are alphabetic&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isdecimal" func="yes">
			<Overload retVal="" descr="S.isdecimal() -&gt; bool&#10;&#10;Return True if there are only decimal characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isnumeric" func="yes">
			<Overload retVal="" descr="S.isnumeric() -&gt; bool&#10;&#10;Return True if there are only numeric characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#10;&#10;Return True if all characters in S are whitespace&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. upper- and titlecase characters may only&#10;follow uncased characters and lowercase characters only cased ones.&#10;Return False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in S are uppercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; unicode&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; int&#10;&#10;Return S left-justified in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; unicode&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.replace" func="yes">
			<Overload retVal="" descr="S.replace(old, new[, count]) -&gt; unicode&#10;&#10;Return a copy of S with all occurrences of substring&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rfind" func="yes">
			<Overload retVal="" descr="S.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rjust" func="yes">
			<Overload retVal="" descr="S.rjust(width[, fillchar]) -&gt; unicode&#10;&#10;Return S right-justified in a Unicode string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rpartition" func="yes">
			<Overload retVal="" descr="S.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, starting at the end of S, and return&#10;the part before it, the separator itself, and the part after it.  If the&#10;separator is not found, return two empty strings and S.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in S, using sep as the&#10;delimiter string, starting at the end of the string and&#10;working to the front.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.split" func="yes">
			<Overload retVal="" descr="S.split([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in S, using sep as the&#10;delimiter string.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified or is None, any&#10;whitespace string is a separator and empty strings are&#10;removed from the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines([keepends]) -&gt; list of strings&#10;&#10;Return a list of the lines in S, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; unicode&#10;&#10;Return a copy of S with uppercase characters converted to lowercase&#10;and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; unicode&#10;&#10;Return a titlecased version of S, i.e. words start with title case&#10;characters, all remaining cased characters have lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.translate" func="yes">
			<Overload retVal="" descr="S.translate(table) -&gt; unicode&#10;&#10;Return a copy of the string S, where all characters have been mapped&#10;through the given translation table, which must be a mapping of&#10;Unicode ordinals to Unicode ordinals, Unicode strings or None.&#10;Unmapped characters are left untouched. Characters mapped to None&#10;are deleted.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; unicode&#10;&#10;Return a copy of S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeType.zfill" func="yes">
			<Overload retVal="" descr="S.zfill(width) -&gt; unicode&#10;&#10;Pad a numeric string S with zeros on the left, to fill a field&#10;of the specified width. The string S is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about Unicode related problems, mostly&#10;related to conversion problems.">
			</Overload>
		</KeyWord>
		<KeyWord name="UserWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings generated by user code.">
			</Overload>
		</KeyWord>
		<KeyWord name="ValueError" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="Verify" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyAttribute" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyIsChecked" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyIsDisabled" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyIsEnabled" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyIsUncheck" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyNotexist" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyText" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyUI" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="VerifyValue" func="yes">
			<Overload retVal="" descr="Function of Element">
			</Overload>
		</KeyWord>
		<KeyWord name="Warning" func="yes">
			<Overload retVal="" descr="Base class for warning categories.">
			</Overload>
		</KeyWord>
		<KeyWord name="WebDriverWait" />
		<KeyWord name="WebDriverWait.until" func="yes">
			<Overload retVal="" descr="Calls the method provided with the driver as an argument until the         return value is not False.">
				<Param name="self" />
				<Param name="method" />
				<Param name="[message]" />
			</Overload>
		</KeyWord>
		<KeyWord name="WebDriverWait.until_not" func="yes">
			<Overload retVal="" descr="Calls the method provided with the driver as an argument until the           return value is False.">
				<Param name="self" />
				<Param name="method" />
				<Param name="[message]" />
			</Overload>
		</KeyWord>
		<KeyWord name="When" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="WindowsError" func="yes">
			<Overload retVal="" descr="MS-Windows OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="XRangeType" func="yes">
			<Overload retVal="" descr="xrange([start,] stop[, step]) -&gt; xrange object&#10;&#10;Like range(), but instead of returning a list, returns an object that&#10;generates the numbers in the range on demand.  For looping, this is &#10;slightly faster than range() and more memory efficient.">
			</Overload>
		</KeyWord>
		<KeyWord name="ZeroDivisionError" func="yes">
			<Overload retVal="" descr="Second argument to a division or modulo operation was zero.">
			</Overload>
		</KeyWord>
		<KeyWord name="abort" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="abs" func="yes">
			<Overload retVal="" descr="abs(number) -&gt; number&#10;&#10;Return the absolute value of the argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="access" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="add" func="yes">
			<Overload retVal="" descr="Add an element to a set.&#10;&#10;This has no effect if the element is already present.">
			</Overload>
		</KeyWord>
		<KeyWord name="addCleanup" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="addCustomRequestHeader" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="addError" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="addExpectedFailure" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="addFailure" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="addSkip" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="addSuccess" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="addTest" func="yes">
			<Overload retVal="" descr="Function of unittest.BaseTestSuite">
			</Overload>
		</KeyWord>
		<KeyWord name="addTests" func="yes">
			<Overload retVal="" descr="Function of unittest.TestSuite">
			</Overload>
		</KeyWord>
		<KeyWord name="addTypeEqualityFunc" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="addUnexpectedSuccess" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="add_argument" func="yes">
			<Overload retVal="" descr="Function of ChromeOptions">
			</Overload>
		</KeyWord>
		<KeyWord name="add_cookie" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="add_custom_request_header" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="add_experimental_option" func="yes">
			<Overload retVal="" descr="Function of ChromeOptions">
			</Overload>
		</KeyWord>
		<KeyWord name="add_extension" func="yes">
			<Overload retVal="" descr="Function of FirefoxProfile">
			</Overload>
		</KeyWord>
		<KeyWord name="add_location_strategy" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="add_script" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="add_selection" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="add_to_capabilities" func="yes">
			<Overload retVal="" descr="Function of Proxy">
			</Overload>
		</KeyWord>
		<KeyWord name="all" func="yes">
			<Overload retVal="" descr="all(iterable) -&gt; bool&#10;&#10;Return True if bool(x) is True for all values x in the iterable.">
			</Overload>
		</KeyWord>
		<KeyWord name="allow_native_xpath" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="alt_key_down" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="alt_key_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="and" />
		<KeyWord name="answer_on_next_prompt" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="any" func="yes">
			<Overload retVal="" descr="any(iterable) -&gt; bool&#10;&#10;Return True if bool(x) is True for any x in the iterable.">
			</Overload>
		</KeyWord>
		<KeyWord name="append" func="yes">
			<Overload retVal="" descr="B.append(int) -&gt; None&#10;&#10;Append a single item to the end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="apply" func="yes">
			<Overload retVal="" descr="apply(object[, args[, kwargs]]) -&gt; value&#10;&#10;Call a callable object with positional arguments taken from the tuple args,&#10;and keyword arguments taken from the optional dictionary kwargs.&#10;Note that classes are callable, as are instances with a __call__() method.&#10;&#10;Deprecated since release 2.3. Instead, use the extended call syntax:&#10;    function(*args, **keywords).">
			</Overload>
		</KeyWord>
		<KeyWord name="as" />
		<KeyWord name="as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Returns a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raises OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="asctime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="askokcancel" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="askquestion" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="askretrycancel" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="askyesno" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="askyesnocancel" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="assert" />
		<KeyWord name="assertAlmostEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertAlmostEquals" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertDictContainsSubset" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertDictEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertEquals" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertFalse" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertGreater" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertGreaterEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIn" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIs" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIsInstance" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIsNone" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIsNot" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertIsNotNone" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertItemsEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertLess" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertLessEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertListEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertMultiLineEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotAlmostEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotAlmostEquals" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotEquals" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotIn" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotIsInstance" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertNotRegexpMatches" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertRaises" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertRaisesRegexp" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertRegexpMatches" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertSequenceEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertSetEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertTrue" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assertTupleEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="assign_id" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="atof" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="atoi" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="atol" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="attach_file" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="back" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="basestring" func="yes">
			<Overload retVal="" descr="Type basestring cannot be instantiated; it is the base for str and unicode.">
			</Overload>
		</KeyWord>
		<KeyWord name="behave" func="yes">
			<Overload retVal="" descr="behave is behaviour-driven development, Python style&#10;&#10;Behavior-driven development (or BDD) is an agile software development&#10;technique that encourages collaboration between developers, QA and&#10;non-technical or business participants in a software project.&#10;&#10;*behave* uses tests written in a natural language style, backed up by Python&#10;code.&#10;&#10;To get started, we recommend the `tutorial`_ and then the `test language`_ and&#10;`api`_ references.&#10;&#10;.. _`tutorial`: tutorial.html&#10;.. _`test language`: gherkin.html&#10;.. _`api`: api.html">
			</Overload>
		</KeyWord>
		<KeyWord name="behave.Given" />
		<KeyWord name="behave.Step" />
		<KeyWord name="behave.Then" />
		<KeyWord name="behave.When" />
		<KeyWord name="behave.given" />
		<KeyWord name="behave.names" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="behave.step" />
		<KeyWord name="behave.step_matcher" func="yes">
			<Overload retVal="" descr="Change the parameter matcher used in parsing step text.&#10;&#10;The change is immediate and may be performed between step definitions in&#10;your step implementation modules - allowing adjacent steps to use different&#10;matchers if necessary.&#10;&#10;There's two parsers available by default in *behave*:&#10;&#10;**parse** (the default)&#10;   This is a `simple parser`_ that uses a format very much like the Python&#10;   builtin ``format()``. You must use named fields which are then matched&#10;   to your ``step()`` function arguments.&#10;**re**&#10;   This uses full regular expressions to parse the clause text. You will&#10;   need to use named groups &quot;(?P&lt;name&gt;...)&quot; to define the variables pulled&#10;   from the text and passed to your ``step()`` function.&#10;&#10;You may `define your own matcher`_.&#10;&#10;.. _`define your own matcher`: api.html#step-parameters">
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="behave.then" />
		<KeyWord name="behave.when" />
		<KeyWord name="bin" func="yes">
			<Overload retVal="" descr="bin(number) -&gt; string&#10;&#10;Return the binary representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="bool" func="yes">
			<Overload retVal="" descr="bool(x) -&gt; bool&#10;&#10;Returns True when the argument x is true, False otherwise.&#10;The builtins True and False are the only two instances of the class bool.&#10;The class bool is a subclass of the class int, and cannot be subclassed.">
			</Overload>
		</KeyWord>
		<KeyWord name="break" />
		<KeyWord name="buffer" func="yes">
			<Overload retVal="" descr="buffer(object [, offset[, size]])&#10;&#10;Create a new buffer object which references the given object.&#10;The buffer will reference a slice of the target object from the&#10;start of the object (or at the specified offset). The slice will&#10;extend to the end of the target object (or with the specified size).">
			</Overload>
		</KeyWord>
		<KeyWord name="bytearray" func="yes">
			<Overload retVal="" descr="bytearray(iterable_of_ints) -&gt; bytearray.&#10;bytearray(string, encoding[, errors]) -&gt; bytearray.&#10;bytearray(bytes_or_bytearray) -&gt; mutable copy of bytes_or_bytearray.&#10;bytearray(memory_view) -&gt; bytearray.&#10;&#10;Construct an mutable bytearray object from:&#10;  - an iterable yielding integers in range(256)&#10;  - a text string encoded using the specified encoding&#10;  - a bytes or a bytearray object&#10;  - any object implementing the buffer API.&#10;&#10;bytearray(int) -&gt; bytearray.&#10;&#10;Construct a zero-initialized bytearray of the given length.">
			</Overload>
		</KeyWord>
		<KeyWord name="bytes" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="call" func="yes">
			<Overload retVal="" descr="Function of subprocess">
			</Overload>
		</KeyWord>
		<KeyWord name="call_tracing" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="call_win32" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="callable" func="yes">
			<Overload retVal="" descr="callable(object) -&gt; bool&#10;&#10;Return whether the object is callable (i.e., some kind of function).&#10;Note that classes are callable, as are instances with a __call__() method.">
			</Overload>
		</KeyWord>
		<KeyWord name="callstats" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; string&#10;&#10;Return a copy of the string S with only its first character&#10;capitalized.">
			</Overload>
		</KeyWord>
		<KeyWord name="captureNetworkTraffic" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capture_entire_page_screenshot" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capture_entire_page_screenshot_to_string" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capture_network_traffic" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capture_screenshot" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capture_screenshot_to_string" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="capwords" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="center" func="yes">
			<Overload retVal="" descr="S.center(width[, fillchar]) -&gt; string&#10;&#10;Return S centered in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi" func="yes">
			<Overload retVal="" descr="Support module for CGI (Common Gateway Interface) scripts.&#10;&#10;This module defines a number of utilities for use by CGI scripts&#10;written in Python.">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.FieldStorage" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.FormContent" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.FormContentDict" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.InterpFormContentDict" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.MiniFieldStorage" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.StringIO" func="yes">
			<Overload retVal="" descr="StringIO([s]) -- Return a StringIO-like stream for reading or writing">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.SvFormContentDict" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.attrgetter" func="yes">
			<Overload retVal="" descr="attrgetter(attr, ...) --&gt; attrgetter object&#10;&#10;Return a callable object that fetches the given attribute(s) from its operand.&#10;After, f=attrgetter('name'), the call f(r) returns r.name.&#10;After, g=attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).&#10;After, h=attrgetter('name.first', 'name.last'), the call h(r) returns&#10;(r.name.first, r.name.last).">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.catch_warnings" func="yes">
			<Overload retVal="" descr="A context manager that copies and restores the warnings filter upon&#10;exiting the context.&#10;&#10;The 'record' argument specifies whether warnings should be captured by a&#10;custom implementation of warnings.showwarning() and be appended to a list&#10;returned by the context manager. Otherwise None is returned by the context&#10;manager. The objects appended to the list are arguments whose attributes&#10;mirror the arguments to showwarning().&#10;&#10;The 'module' argument is to specify an alternative module to the module&#10;named 'warnings' and imported under that name. This argument is only useful&#10;when testing the warnings module itself.">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.dolog" func="yes">
			<Overload retVal="" descr="Write a log message to the log file.  See initlog() for docs.">
				<Param name="fmt" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.escape" func="yes">
			<Overload retVal="" descr='Replace special characters "&amp;", "&lt;" and "&gt;" to HTML-safe sequences.&#10;If the optional flag quote is true, the quotation mark character (")&#10;is also translated.'>
				<Param name="s" />
				<Param name="[quote=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.filterwarnings" func="yes">
			<Overload retVal="" descr="Insert an entry into the list of warnings filters (at the front).&#10;&#10;'action' -- one of &quot;error&quot;, &quot;ignore&quot;, &quot;always&quot;, &quot;default&quot;, &quot;module&quot;,&#10;            or &quot;once&quot;&#10;'message' -- a regex that the warning message must match&#10;'category' -- a class that the warning must be a subclass of&#10;'module' -- a regex that the module name must match&#10;'lineno' -- an integer line number, 0 matches all warnings&#10;'append' -- if true, append to the list of filters">
				<Param name="action" />
				<Param name="[message" />
				<Param name="[category=<type 'exceptions.Warning'>" />
				<Param name="[module" />
				<Param name="[lineno=0" />
				<Param name="[append=0]]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.initlog" func="yes">
			<Overload retVal="" descr="Write a log message, if there is a log file.&#10;&#10;Even though this function is called initlog(), you should always&#10;use log(); log is a variable that is set either to initlog&#10;(initially), to dolog (once the log file has been opened), or to&#10;nolog (when logging is disabled).&#10;&#10;The first argument is a format string; the remaining arguments (if&#10;any) are arguments to the % operator, so e.g.&#10;    log(&quot;%s: %s&quot;, &quot;a&quot;, &quot;b&quot;)&#10;will write &quot;a: b&quot; to the log file, followed by a newline.&#10;&#10;If the global logfp is not None, it should be a file object to&#10;which log data is written.&#10;&#10;If the global logfp is None, the global logfile may be a string&#10;giving a filename to open, in append mode.  This file should be&#10;world writable!!!  If the file can't be opened, logging is&#10;silently disabled (since there is no safe place where we could&#10;send an error message).">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.log" func="yes">
			<Overload retVal="" descr="Write a log message, if there is a log file.&#10;&#10;Even though this function is called initlog(), you should always&#10;use log(); log is a variable that is set either to initlog&#10;(initially), to dolog (once the log file has been opened), or to&#10;nolog (when logging is disabled).&#10;&#10;The first argument is a format string; the remaining arguments (if&#10;any) are arguments to the % operator, so e.g.&#10;    log(&quot;%s: %s&quot;, &quot;a&quot;, &quot;b&quot;)&#10;will write &quot;a: b&quot; to the log file, followed by a newline.&#10;&#10;If the global logfp is not None, it should be a file object to&#10;which log data is written.&#10;&#10;If the global logfp is None, the global logfile may be a string&#10;giving a filename to open, in append mode.  This file should be&#10;world writable!!!  If the file can't be opened, logging is&#10;silently disabled (since there is no safe place where we could&#10;send an error message).">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.nolog" func="yes">
			<Overload retVal="" descr="Dummy function, assigned to log when logging is disabled.">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.parse" func="yes">
			<Overload retVal="" descr="Parse a query in the environment or from a file (default stdin)&#10;&#10;Arguments, all optional:&#10;&#10;fp              : file pointer; default: sys.stdin&#10;&#10;environ         : environment dictionary; default: os.environ&#10;&#10;keep_blank_values: flag indicating whether blank values in&#10;    percent-encoded forms should be treated as blank strings.&#10;    A true value indicates that blanks should be retained as&#10;    blank strings.  The default false value indicates that&#10;    blank values are to be ignored and treated as if they were&#10;    not included.&#10;&#10;strict_parsing: flag indicating what to do with parsing errors.&#10;    If false (the default), errors are silently ignored.&#10;    If true, errors raise a ValueError exception.">
				<Param name="[fp=None" />
				<Param name="[environ={'TMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMPUTERNAME': 'PONGRAPEE-PC', 'USERDOMAIN': 'Pongrapee-PC', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3a09', 'HOME': 'C:\\Users\\Pongrapee', 'PATH': 'C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\python27\\Scripts\\;C:\\python27\\;C:\\Python27\\Scripts;C:\\Python27\\Lib;C:\\Python27\\Lib\\site-packages\\;c:\\openssl-win32\\bin;C:\\Program Files (x86)\\WinMerge;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\Git\\bin', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'SSH_AGENT_PID': '6636', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'ANSICON_DEF': '7', 'TEMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Pongrapee\\AppData\\Local', 'HOMEPATH': '\\Users\\Pongrapee', 'JAVA_HOME': 'C:\\Progra~2\\Java\\jre7', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Pongrapee', 'LOGONSERVER': '\\\\PONGRAPEE-PC', 'SYSTEMROOT': 'C:\\windows', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'SSH_AUTH_SOCK': '/tmp/ssh-pQFjpM5148/agent.5148', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PROMPT': '$P$G', 'PUBLIC': 'C:\\Users\\Public', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'OPENSSL_CONF': 'C:\\OpenSSL-Win32\\bin\\openssl.cfg', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Pongrapee\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'ANSICON': '80x200 (80x29)', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'TESTREFPATH': 'C:\\Users\\Pongrapee\\Dropbox\\spider_proj\\TestRefPage', 'USERPROFILE': 'C:\\Users\\Pongrapee'}" />
				<Param name="[keep_blank_values=0" />
				<Param name="[strict_parsing=0]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.parse_header" func="yes">
			<Overload retVal="" descr="Parse a Content-type like header.&#10;&#10;Return the main content-type and a dictionary of options.">
				<Param name="line" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.parse_multipart" func="yes">
			<Overload retVal="" descr="Parse multipart input.&#10;&#10;Arguments:&#10;fp   : input file&#10;pdict: dictionary containing other parameters of content-type header&#10;&#10;Returns a dictionary just like parse_qs(): keys are the field names, each&#10;value is a list of values for that field.  This is easy to use but not&#10;much good if you are expecting megabytes to be uploaded -- in that case,&#10;use the FieldStorage class instead which is much more flexible.  Note&#10;that content-type is the raw, unparsed contents of the content-type&#10;header.&#10;&#10;XXX This does not parse nested multipart parts -- use FieldStorage for&#10;that.&#10;&#10;XXX This should really be subsumed by FieldStorage altogether -- no&#10;point in having two implementations of the same parsing algorithm.&#10;Also, FieldStorage protects itself better against certain DoS attacks&#10;by limiting the size of the data read in one chunk.  The API here&#10;does not support that kind of protection.  This also affects parse()&#10;since it can call parse_multipart().">
				<Param name="fp" />
				<Param name="pdict" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.parse_qs" func="yes">
			<Overload retVal="" descr="Parse a query given as a string argument.">
				<Param name="qs" />
				<Param name="[keep_blank_values=0" />
				<Param name="[strict_parsing=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.parse_qsl" func="yes">
			<Overload retVal="" descr="Parse a query given as a string argument.">
				<Param name="qs" />
				<Param name="[keep_blank_values=0" />
				<Param name="[strict_parsing=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.print_arguments" />
		<KeyWord name="cgi.print_directory" func="yes">
			<Overload retVal="" descr="Dump the current directory as HTML.">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.print_environ" func="yes">
			<Overload retVal="" descr="Dump the shell environment as HTML.">
				<Param name="[environ={'TMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMPUTERNAME': 'PONGRAPEE-PC', 'USERDOMAIN': 'Pongrapee-PC', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3a09', 'HOME': 'C:\\Users\\Pongrapee', 'PATH': 'C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\python27\\Scripts\\;C:\\python27\\;C:\\Python27\\Scripts;C:\\Python27\\Lib;C:\\Python27\\Lib\\site-packages\\;c:\\openssl-win32\\bin;C:\\Program Files (x86)\\WinMerge;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\Git\\bin', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'SSH_AGENT_PID': '6636', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'ANSICON_DEF': '7', 'TEMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Pongrapee\\AppData\\Local', 'HOMEPATH': '\\Users\\Pongrapee', 'JAVA_HOME': 'C:\\Progra~2\\Java\\jre7', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Pongrapee', 'LOGONSERVER': '\\\\PONGRAPEE-PC', 'SYSTEMROOT': 'C:\\windows', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'SSH_AUTH_SOCK': '/tmp/ssh-pQFjpM5148/agent.5148', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PROMPT': '$P$G', 'PUBLIC': 'C:\\Users\\Public', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'OPENSSL_CONF': 'C:\\OpenSSL-Win32\\bin\\openssl.cfg', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Pongrapee\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'ANSICON': '80x200 (80x29)', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'TESTREFPATH': 'C:\\Users\\Pongrapee\\Dropbox\\spider_proj\\TestRefPage', 'USERPROFILE': 'C:\\Users\\Pongrapee'}]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.print_environ_usage" func="yes">
			<Overload retVal="" descr="Dump a list of environment variables used by CGI as HTML.">
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.print_exception" func="yes">
			<Overload retVal="" descr=>
				<Param name="[type=None" />
				<Param name="[value=None" />
				<Param name="[tb=None" />
				<Param name="[limit=None]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.print_form" func="yes">
			<Overload retVal="" descr="Dump the contents of a form as HTML.">
				<Param name="form" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.test" func="yes">
			<Overload retVal="" descr="Robust test CGI script, usable as main program.&#10;&#10;Write minimal HTTP headers and dump all information provided to&#10;the script in HTML form.">
				<Param name="[environ={'TMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMPUTERNAME': 'PONGRAPEE-PC', 'USERDOMAIN': 'Pongrapee-PC', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3a09', 'HOME': 'C:\\Users\\Pongrapee', 'PATH': 'C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\python27\\Scripts\\;C:\\python27\\;C:\\Python27\\Scripts;C:\\Python27\\Lib;C:\\Python27\\Lib\\site-packages\\;c:\\openssl-win32\\bin;C:\\Program Files (x86)\\WinMerge;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\Git\\bin', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'SSH_AGENT_PID': '6636', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'ANSICON_DEF': '7', 'TEMP': 'C:\\Users\\PONGRA~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Pongrapee\\AppData\\Local', 'HOMEPATH': '\\Users\\Pongrapee', 'JAVA_HOME': 'C:\\Progra~2\\Java\\jre7', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Pongrapee', 'LOGONSERVER': '\\\\PONGRAPEE-PC', 'SYSTEMROOT': 'C:\\windows', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'SSH_AUTH_SOCK': '/tmp/ssh-pQFjpM5148/agent.5148', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PROMPT': '$P$G', 'PUBLIC': 'C:\\Users\\Public', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'OPENSSL_CONF': 'C:\\OpenSSL-Win32\\bin\\openssl.cfg', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Pongrapee\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'ANSICON': '80x200 (80x29)', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'TESTREFPATH': 'C:\\Users\\Pongrapee\\Dropbox\\spider_proj\\TestRefPage', 'USERPROFILE': 'C:\\Users\\Pongrapee'}]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.valid_boundary" func="yes">
			<Overload retVal="" descr=>
				<Param name="s" />
				<Param name="[_vb_pattern=^[ -~]{0,200}[!-~]$]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cgi.warn" func="yes">
			<Overload retVal="" descr="Issue a warning, or maybe ignore it or raise an exception.">
			</Overload>
		</KeyWord>
		<KeyWord name="chdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="check" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="check_call" func="yes">
			<Overload retVal="" descr="Function of subprocess">
			</Overload>
		</KeyWord>
		<KeyWord name="check_output" func="yes">
			<Overload retVal="" descr="Function of subprocess">
			</Overload>
		</KeyWord>
		<KeyWord name="check_unused_args" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="chmod" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="choose_cancel_on_next_confirmation" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="choose_ok_on_next_confirmation" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="chr" func="yes">
			<Overload retVal="" descr="chr(i) -&gt; character&#10;&#10;Return a string of one character with ordinal i; 0 &lt;= i &lt; 256.">
			</Overload>
		</KeyWord>
		<KeyWord name="chrome" />
		<KeyWord name="class" />
		<KeyWord name="classmethod" func="yes">
			<Overload retVal="" descr="classmethod(function) -&gt; method&#10;&#10;Convert a function to be a class method.&#10;&#10;A class method receives the class as implicit first argument,&#10;just like an instance method receives the instance.&#10;To declare a class method, use this idiom:&#10;&#10;  class C:&#10;      def f(cls, arg1, arg2, ...): ...&#10;      f = classmethod(f)&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;If a class method is called for a derived class, the derived class&#10;object is passed as the implied first argument.&#10;&#10;Class methods are different than C++ or Java static methods.&#10;If you want those, see the staticmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="clear" func="yes">
			<Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
			</Overload>
		</KeyWord>
		<KeyWord name="click" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="click_and_hold" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="click_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="clock" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="close" func="yes">
			<Overload retVal="" descr="close() -&gt; None or (perhaps) an integer.  Close the file.&#10;&#10;Sets data attribute .closed to True.  A closed file cannot be used for&#10;further I/O operations.  close() may be called more than once without&#10;error.  Some kinds of file objects (for example, opened by popen())&#10;may return an exit status upon closing.">
			</Overload>
		</KeyWord>
		<KeyWord name="closerange" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="cmp" func="yes">
			<Overload retVal="" descr="cmp(x, y) -&gt; integer&#10;&#10;Return negative if x&lt;y, zero if x==y, positive if x&gt;y.">
			</Overload>
		</KeyWord>
		<KeyWord name="coerce" func="yes">
			<Overload retVal="" descr="coerce(x, y) -&gt; (x1, y1)&#10;&#10;Return a tuple consisting of the two numeric arguments converted to&#10;a common type, using the same rules as used by arithmetic operations.&#10;If coercion is not possible, raise TypeError.">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama" />
		<KeyWord name="colorama.AnsiToWin32" func="yes">
			<Overload retVal="" descr="Implements a 'write()' method which, on Windows, will strip ANSI character&#10;sequences from the text, and if outputting to a tty, will convert them into&#10;win32 function calls.">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.AnsiToWin32.ANSI_RE" func="yes">
			<Overload retVal="" descr="(SRE_Pattern)">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.AnsiToWin32.call_win32" />
		<KeyWord name="colorama.AnsiToWin32.convert_ansi" />
		<KeyWord name="colorama.AnsiToWin32.extract_params" />
		<KeyWord name="colorama.AnsiToWin32.get_win32_calls" />
		<KeyWord name="colorama.AnsiToWin32.reset_all" />
		<KeyWord name="colorama.AnsiToWin32.should_wrap" func="yes">
			<Overload retVal="" descr="True if this class is actually needed. If false, then the output&#10;stream will not be affected, nor will win32 calls be issued, so&#10;wrapping stdout is not actually required. This will generally be&#10;False on non-Windows platforms, unless optional functionality like&#10;autoreset has been requested using kwargs to init()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.AnsiToWin32.write" />
		<KeyWord name="colorama.AnsiToWin32.write_and_convert" func="yes">
			<Overload retVal="" descr="Write the given text to our wrapped stream, stripping any ANSI&#10;sequences from the text, and optionally converting them into win32&#10;calls.">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.AnsiToWin32.write_plain_text" />
		<KeyWord name="colorama.Back" func="yes">
			<Overload retVal="" descr="(AnsiCodes)">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.Fore" func="yes">
			<Overload retVal="" descr="(AnsiCodes)">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.Style" func="yes">
			<Overload retVal="" descr="(AnsiCodes)">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.VERSION" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.deinit" />
		<KeyWord name="colorama.init" func="yes">
			<Overload retVal="" descr=>
				<Param name="[autoreset=False" />
				<Param name="[convert=None" />
				<Param name="[strip=None" />
				<Param name="[wrap=True]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="colorama.reinit" />
		<KeyWord name="common" />
		<KeyWord name="communicate" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="compile" func="yes">
			<Overload retVal="" descr="compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object&#10;&#10;Compile the source string (a Python module, statement or expression)&#10;into a code object that can be executed by the exec statement or eval().&#10;The filename will be used for run-time error messages.&#10;The mode must be 'exec' to compile a module, 'single' to compile a&#10;single (interactive) statement, or 'eval' to compile an expression.&#10;The flags argument, if present, controls which future statements influence&#10;the compilation of the code.&#10;The dont_inherit argument, if non-zero, stops the compilation inheriting&#10;the effects of any future statements in effect in the code calling&#10;compile; if absent or zero these statements do influence the compilation,&#10;in addition to any features explicitly specified.">
			</Overload>
		</KeyWord>
		<KeyWord name="complex" func="yes">
			<Overload retVal="" descr="complex(real[, imag]) -&gt; complex number&#10;&#10;Create a complex number from a real part and an optional imaginary part.&#10;This is equivalent to (real + imag*1j) where imag defaults to 0.">
			</Overload>
		</KeyWord>
		<KeyWord name="conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any float.">
			</Overload>
		</KeyWord>
		<KeyWord name="context_click" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="context_menu" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="context_menu_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="continue" />
		<KeyWord name="control_key_down" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="control_key_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="convert_ansi" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="convert_field" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="convert_path" func="yes">
			<Overload retVal="" descr="Function of FixTk">
			</Overload>
		</KeyWord>
		<KeyWord name="copy" func="yes">
			<Overload retVal="" descr="Return a shallow copy of a set.">
			</Overload>
		</KeyWord>
		<KeyWord name="count" func="yes">
			<Overload retVal="" descr="L.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="countTestCases" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="create" func="yes">
			<Overload retVal="" descr="Function of tkinter">
			</Overload>
		</KeyWord>
		<KeyWord name="createTests" func="yes">
			<Overload retVal="" descr="Function of unittest.main">
			</Overload>
		</KeyWord>
		<KeyWord name="create_cookie" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="create_web_element" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="createtimerhandler" func="yes">
			<Overload retVal="" descr="Function of tkinter">
			</Overload>
		</KeyWord>
		<KeyWord name="ctime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="debug" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; object&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="def" />
		<KeyWord name="defaultTestResult" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="deinit" func="yes">
			<Overload retVal="" descr="Function of colorama">
			</Overload>
		</KeyWord>
		<KeyWord name="del" />
		<KeyWord name="delattr" func="yes">
			<Overload retVal="" descr="delattr(object, name)&#10;&#10;Delete a named attribute on an object; delattr(x, 'y') is equivalent to&#10;``del x.y''.">
			</Overload>
		</KeyWord>
		<KeyWord name="delete_all_cookies" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="delete_all_visible_cookies" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="delete_cookie" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="deleter" func="yes">
			<Overload retVal="" descr="Descriptor to change the deleter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="deselect_pop_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="dict" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference" func="yes">
			<Overload retVal="" descr="Return the difference of two or more sets as a new set.&#10;&#10;(i.e. all elements that are in this set but not the others.)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference_update" func="yes">
			<Overload retVal="" descr="Remove all elements of another set from this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="dir" func="yes">
			<Overload retVal="" descr="dir([object]) -&gt; list of strings&#10;&#10;If called without an argument, return the names in the current scope.&#10;Else, return an alphabetized list of names comprising (some of) the attributes&#10;of the given object, and of attributes reachable from it.&#10;If the object supplies a method named __dir__, it will be used; otherwise&#10;the default dir() logic is used and returns:&#10;  for a module object: the module's attributes.&#10;  for a class object:  its attributes, and recursively the attributes&#10;    of its bases.&#10;  for any other object: its attributes, its class's attributes, and&#10;    recursively the attributes of its class's base classes.">
			</Overload>
		</KeyWord>
		<KeyWord name="discard" func="yes">
			<Overload retVal="" descr="Remove an element from a set if it is a member.&#10;&#10;If the element is not a member, do nothing.">
			</Overload>
		</KeyWord>
		<KeyWord name="discover" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="displayhook" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="divmod" func="yes">
			<Overload retVal="" descr="divmod(x, y) -&gt; (quotient, remainder)&#10;&#10;Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.">
			</Overload>
		</KeyWord>
		<KeyWord name="doCleanups" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="do_command" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="dolog" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="dooneevent" func="yes">
			<Overload retVal="" descr="Function of tkinter">
			</Overload>
		</KeyWord>
		<KeyWord name="double_click" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="double_click_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="double_tap" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="drag_and_drop" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="drag_and_drop_by_offset" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="drag_and_drop_to_object" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="dragdrop" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="dup" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="dup2" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="elif" />
		<KeyWord name="else" />
		<KeyWord name="encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; object&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that is able to handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="endswith" func="yes">
			<Overload retVal="" descr="B.endswith(suffix [,start [,end]]) -&gt; bool&#10;&#10;Return True if B ends with the specified suffix, False otherwise.&#10;With optional start, test B beginning at that position.&#10;With optional end, stop comparing B at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="enumerate" func="yes">
			<Overload retVal="" descr="enumerate(iterable[, start]) -&gt; iterator for index, value of iterable&#10;&#10;Return an enumerate object.  iterable must be another object that supports&#10;iteration.  The enumerate object yields pairs containing a count (from&#10;start, which defaults to zero) and a value yielded by the iterable argument.&#10;enumerate is useful for obtaining an indexed list:&#10;    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...">
			</Overload>
		</KeyWord>
		<KeyWord name="escape" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="eval" func="yes">
			<Overload retVal="" descr="eval(source[, globals[, locals]]) -&gt; value&#10;&#10;Evaluate the source in the context of globals and locals.&#10;The source may be a string representing a Python expression&#10;or a code object as returned by compile().&#10;The globals must be a dictionary and locals can be any mapping,&#10;defaulting to the current globals and locals.&#10;If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="exc_clear" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exc_info" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="except" />
		<KeyWord name="excepthook" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exec" />
		<KeyWord name="execfile" func="yes">
			<Overload retVal="" descr="execfile(filename[, globals[, locals]])&#10;&#10;Read and execute a Python script from a file.&#10;The globals and locals are dictionaries, defaulting to the current&#10;globals and locals.  If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="execl" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execle" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execlp" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execlpe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execute" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="execute_async_script" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="execute_script" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="execv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execve" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execvp" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execvpe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="exit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exitfunc" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="expandtabs" func="yes">
			<Overload retVal="" descr="S.expandtabs([tabsize]) -&gt; unicode&#10;&#10;Return a copy of S where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="expectedFailure" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="extend" func="yes">
			<Overload retVal="" descr="B.extend(iterable int) -&gt; None&#10;&#10;Append all the elements from the iterator or sequence to the&#10;end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="extract_params" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="fail" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failIf" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failIfAlmostEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failIfEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failUnless" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failUnlessAlmostEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failUnlessEqual" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="failUnlessRaises" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="fdopen" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="file" func="yes">
			<Overload retVal="" descr="file(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),&#10;writing or appending.  The file will be created if it doesn't exist&#10;when opened for writing or appending; it will be truncated when&#10;opened for writing.  Add a 'b' to the mode for binary files.&#10;Add a '+' to the mode to allow simultaneous reading and writing.&#10;If the buffering argument is given, 0 means unbuffered, 1 means line&#10;buffered, and larger numbers specify the buffer size.  The preferred way&#10;to open a file is with the builtin open() function.&#10;Add a 'U' to mode to open the file for input with universal newline&#10;support.  Any line ending in the input file will be seen as a '\n'&#10;in Python.  Also, a file so opened gains the attribute 'newlines';&#10;the value for this attribute is one of None (no newline read yet),&#10;'\r', '\n', '\r\n' or a tuple containing all the newline types seen.&#10;&#10;'U' cannot be combined with 'w' or '+' mode.">
			</Overload>
		</KeyWord>
		<KeyWord name="fileno" func="yes">
			<Overload retVal="" descr='fileno() -&gt; integer "file descriptor".&#10;&#10;This is needed for lower-level file interfaces, such os.read().'>
			</Overload>
		</KeyWord>
		<KeyWord name="filter" func="yes">
			<Overload retVal="" descr="filter(function or None, sequence) -&gt; list, tuple, or string&#10;&#10;Return those items of sequence for which function(item) is true.  If&#10;function is None, return the items that are true.  If sequence is a tuple&#10;or string, return the same type, else return a list.">
			</Overload>
		</KeyWord>
		<KeyWord name="filterwarnings" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="finally" />
		<KeyWord name="find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="findTestCases" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_id" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_name" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_id" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_name" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="findall" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="finditer" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="fire_event" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="firefox" />
		<KeyWord name="flick" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="flick_element" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="float" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="flush" func="yes">
			<Overload retVal="" descr="flush() -&gt; None.  Flush the internal I/O buffer.">
			</Overload>
		</KeyWord>
		<KeyWord name="focus" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="for" />
		<KeyWord name="format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; string&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="format_field" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="forward" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="framework" />
		<KeyWord name="from" />
		<KeyWord name="fromhex" func="yes">
			<Overload retVal="" descr="bytearray.fromhex(string) -&gt; bytearray&#10;&#10;Create a bytearray object from a string of hexadecimal numbers.&#10;Spaces between two numbers are accepted.&#10;Example: bytearray.fromhex('B9 01EF') -&gt; bytearray(b'\xb9\x01\xef').">
			</Overload>
		</KeyWord>
		<KeyWord name="fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="frozenset" func="yes">
			<Overload retVal="" descr="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object&#10;&#10;Build an immutable unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="fstat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="fsync" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="getDescription" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="getTestCaseNames" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="get_alert" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_buttons" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_fields" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_links" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_window_ids" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_window_names" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_all_window_titles" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_attribute" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_attribute_from_all_windows" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_body_text" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_boolean" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_boolean_array" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_confirmation" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_cookie" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="get_cookie_by_name" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_cookies" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="get_css_count" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_cursor_position" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_element_height" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_element_index" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_element_position_left" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_element_position_top" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_element_width" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_eval" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_expression" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_field" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="get_html_source" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_location" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_log" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_mouse_speed" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_number" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_number_array" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_prompt" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="get_select_options" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_id" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_ids" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_index" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_indexes" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_label" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_labels" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_value" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_selected_values" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_speed" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_string" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_string_array" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_table" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_text" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_title" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_value" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="get_whether_this_frame_match_frame_expression" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_whether_this_window_match_window_expression" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="get_win32_calls" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="get_window_position" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="get_window_size" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="get_xpath_count" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="getattr" func="yes">
			<Overload retVal="" descr="getattr(object, name[, default]) -&gt; value&#10;&#10;Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.&#10;When a default argument is given, it is returned when the attribute doesn't&#10;exist; without it, an exception is raised in that case.">
			</Overload>
		</KeyWord>
		<KeyWord name="getboolean" func="yes">
			<Overload retVal="" descr="Convert true and false to integer values 1 and 0.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="getbusywaitinterval" func="yes">
			<Overload retVal="" descr="Function of tkinter">
			</Overload>
		</KeyWord>
		<KeyWord name="getcheckinterval" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getcwd" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getcwdu" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getdefaultencoding" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Returns a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raises OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any float.">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.fromhex" func="yes">
			<Overload retVal="" descr="float.fromhex(string) -&gt; float&#10;&#10;Create a floating-point number from a hexadecimal string.&#10;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#10;2047.984375&#10;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#10;-4.9406564584124654e-324">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="getdouble.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getfilesystemencoding" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getint" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to an integer, if possible.  A floating point&#10;argument will be truncated towards zero (this does not include a string&#10;representation of a floating point number!)  When converting a string, use&#10;the optional base.  It is an error to supply a base when converting a&#10;non-string.  If base is zero, the proper base is guessed based on the&#10;string content.  If the argument is outside the integer range a&#10;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.bit_length" func="yes">
			<Overload retVal="" descr="int.bit_length() -&gt; int&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.denominator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.imag" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.numerator" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getint.real" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="getpid" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getprofile" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getrecursionlimit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getrefcount" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getsizeof" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getter" func="yes">
			<Overload retVal="" descr="Descriptor to change the getter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="gettrace" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getwindowsversion" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="given" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="global" />
		<KeyWord name="globals" func="yes">
			<Overload retVal="" descr="globals() -&gt; dictionary&#10;&#10;Return the dictionary containing the current scope's global variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="gmtime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="go_back" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="hasattr" func="yes">
			<Overload retVal="" descr="hasattr(object, name) -&gt; bool&#10;&#10;Return whether the object has an attribute with the given name.&#10;(This is done by calling getattr(object, name) and catching exceptions.)">
			</Overload>
		</KeyWord>
		<KeyWord name="hash" func="yes">
			<Overload retVal="" descr="hash(object) -&gt; integer&#10;&#10;Return a hash value for the object.  Two objects with the same value have&#10;the same hash value.  The reverse is not necessarily true, but likely.">
			</Overload>
		</KeyWord>
		<KeyWord name="hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="highlight" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="id" func="yes">
			<Overload retVal="" descr="id(object) -&gt; integer&#10;&#10;Return the identity of an object.  This is guaranteed to be unique among&#10;simultaneously existing objects.  (Hint: it's the object's memory address.)">
			</Overload>
		</KeyWord>
		<KeyWord name="ie" />
		<KeyWord name="if" />
		<KeyWord name="ignore_attributes_without_value" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="image_names" />
		<KeyWord name="image_types" />
		<KeyWord name="implicitly_wait" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="import" />
		<KeyWord name="in" />
		<KeyWord name="index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="indices" func="yes">
			<Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#10;&#10;Assuming a sequence of length len, calculate the start and stop&#10;indices, and the stride length of the extended slice described by&#10;S. Out of bounds indices are clipped in a manner consistent with the&#10;handling of normal slices.">
			</Overload>
		</KeyWord>
		<KeyWord name="init" func="yes">
			<Overload retVal="" descr="Function of colorama">
			</Overload>
		</KeyWord>
		<KeyWord name="initlog" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="input" func="yes">
			<Overload retVal="" descr="input([prompt]) -&gt; value&#10;&#10;Equivalent to eval(raw_input(prompt)).">
			</Overload>
		</KeyWord>
		<KeyWord name="insert" func="yes">
			<Overload retVal="" descr="B.insert(index, int) -&gt; None&#10;&#10;Insert a single item into the bytearray before the given index.">
			</Overload>
		</KeyWord>
		<KeyWord name="installHandler" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="int" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to an integer, if possible.  A floating point&#10;argument will be truncated towards zero (this does not include a string&#10;representation of a floating point number!)  When converting a string, use&#10;the optional base.  It is an error to supply a base when converting a&#10;non-string.  If base is zero, the proper base is guessed based on the&#10;string content.  If the argument is outside the integer range a&#10;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="intern" func="yes">
			<Overload retVal="" descr="intern(string) -&gt; string&#10;&#10;``Intern'' the given string.  This enters the string in the (global)&#10;table of interned strings whose purpose is to speed up dictionary lookups.&#10;Return the string itself or the previously interned string object with the&#10;same value.">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection" func="yes">
			<Overload retVal="" descr="Return the intersection of two or more sets as a new set.&#10;&#10;(i.e. elements that are common to all of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection_update" func="yes">
			<Overload retVal="" descr="Update a set with the intersection of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="is" />
		<KeyWord name="is_alert_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_checked" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_confirmation_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_cookie_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_editable" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_element_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="is_online" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="is_ordered" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_prompt_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_something_selected" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_text_present" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="is_visible" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isalpha" func="yes">
			<Overload retVal="" descr="B.isalpha() -&gt; bool&#10;&#10;Return True if all characters in B are alphabetic&#10;and there is at least one character in B, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isatty" func="yes">
			<Overload retVal="" descr="isatty() -&gt; true or false.  True if the file is connected to a tty device.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdecimal" func="yes">
			<Overload retVal="" descr="S.isdecimal() -&gt; bool&#10;&#10;Return True if there are only decimal characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdisjoint" func="yes">
			<Overload retVal="" descr="Return True if two sets have a null intersection.">
			</Overload>
		</KeyWord>
		<KeyWord name="isinstance" func="yes">
			<Overload retVal="" descr="isinstance(object, class-or-type-or-tuple) -&gt; bool&#10;&#10;Return whether an object is an instance of a class or of a subclass thereof.&#10;With a type as second argument, return whether that is the object's type.&#10;The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for&#10;isinstance(x, A) or isinstance(x, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isnumeric" func="yes">
			<Overload retVal="" descr="S.isnumeric() -&gt; bool&#10;&#10;Return True if there are only numeric characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isspace" func="yes">
			<Overload retVal="" descr="B.isspace() -&gt; bool&#10;&#10;Return True if all characters in B are whitespace&#10;and there is at least one character in B, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="issubclass" func="yes">
			<Overload retVal="" descr="issubclass(C, B) -&gt; bool&#10;&#10;Return whether class C is a subclass (i.e., a derived class) of class B.&#10;When using a tuple as the second argument issubclass(X, (A, B, ...)),&#10;is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="issubset" func="yes">
			<Overload retVal="" descr="Report whether another set contains this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="issuperset" func="yes">
			<Overload retVal="" descr="Report whether this set contains another set.">
			</Overload>
		</KeyWord>
		<KeyWord name="istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isupper" func="yes">
			<Overload retVal="" descr="B.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in B are uppercase and there is&#10;at least one cased character in B, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="iter" func="yes">
			<Overload retVal="" descr="iter(collection) -&gt; iterator&#10;iter(callable, sentinel) -&gt; iterator&#10;&#10;Get an iterator from an object.  In the first form, the argument must&#10;supply its own iterator, or be a sequence.&#10;In the second form, the callable is called until it returns the sentinel.">
			</Overload>
		</KeyWord>
		<KeyWord name="iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; unicode&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="joinfields" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="key_down" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="key_down_native" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="key_press" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="key_press_native" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="key_up" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="key_up_native" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="kill" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lambda" />
		<KeyWord name="len" func="yes">
			<Overload retVal="" descr="len(object) -&gt; integer&#10;&#10;Return the number of items of a sequence or mapping.">
			</Overload>
		</KeyWord>
		<KeyWord name="list" func="yes">
			<Overload retVal="" descr="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items">
			</Overload>
		</KeyWord>
		<KeyWord name="list2cmdline" func="yes">
			<Overload retVal="" descr="Function of subprocess">
			</Overload>
		</KeyWord>
		<KeyWord name="listdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; string&#10;&#10;Return S left-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="loadTestsFromModule" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="loadTestsFromName" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="loadTestsFromNames" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="loadTestsFromTestCase" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="locals" func="yes">
			<Overload retVal="" descr="locals() -&gt; dictionary&#10;&#10;Update and return a dictionary containing the current scope's local variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="localtime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="log" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="long" func="yes">
			<Overload retVal="" descr="long(x[, base]) -&gt; integer&#10;&#10;Convert a string or number to a long integer, if possible.  A floating&#10;point argument will be truncated towards zero (this does not include a&#10;string representation of a floating point number!)  When converting a&#10;string, use the optional base.  It is an error to supply a base when&#10;converting a non-string.">
			</Overload>
		</KeyWord>
		<KeyWord name="long_press" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; string&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="lseek" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lstat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="main" func="yes">
			<Overload retVal="" descr="Function of unittest.main">
			</Overload>
		</KeyWord>
		<KeyWord name="mainloop" func="yes">
			<Overload retVal="" descr="Run the main loop of Tcl.">
				<Param name="[n=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="makeSuite" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="makedirs" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="maketrans" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="map" func="yes">
			<Overload retVal="" descr="map(function, sequence[, sequence, ...]) -&gt; list&#10;&#10;Return a list of the results of applying the function to the items of&#10;the argument sequence(s).  If more than one sequence is given, the&#10;function is called with an argument list consisting of the corresponding&#10;item of each sequence, substituting None for missing values when not all&#10;sequences have the same length.  If the function is None, return a list of&#10;the items of the sequence (or a list of tuples if more than one sequence).">
			</Overload>
		</KeyWord>
		<KeyWord name="match" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="max" func="yes">
			<Overload retVal="" descr="max(iterable[, key=func]) -&gt; value&#10;max(a, b, c, ...[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its largest item.&#10;With two or more arguments, return the largest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="maximize_window" func="yes">
			<Overload retVal="" descr="Function of Chrome">
			</Overload>
		</KeyWord>
		<KeyWord name="memoryview" func="yes">
			<Overload retVal="" descr="memoryview(object)&#10;&#10;Create a new memoryview object which references the given object.">
			</Overload>
		</KeyWord>
		<KeyWord name="meta_key_down" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="meta_key_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="min" func="yes">
			<Overload retVal="" descr="min(iterable[, key=func]) -&gt; value&#10;min(a, b, c, ...[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its smallest item.&#10;With two or more arguments, return the smallest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="mkdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="mktime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_down" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_down_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_down_right" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_down_right_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_move" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_move_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_out" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_over" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_up_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_up_right" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="mouse_up_right_at" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="move" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="move_by_offset" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="move_to_element" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="move_to_element_with_offset" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="mro" func="yes">
			<Overload retVal="" descr="mro() -&gt; list&#10;return a type's method resolution order">
			</Overload>
		</KeyWord>
		<KeyWord name="next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="nolog" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="not" />
		<KeyWord name="object" func="yes">
			<Overload retVal="" descr="The most base type">
			</Overload>
		</KeyWord>
		<KeyWord name="oct" func="yes">
			<Overload retVal="" descr="oct(number) -&gt; string&#10;&#10;Return the octal representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="open" func="yes">
			<Overload retVal="" descr="open(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file using the file() type, returns a file object.  This is the&#10;preferred way to open a file.  See file.__doc__ for further information.">
			</Overload>
		</KeyWord>
		<KeyWord name="open_window" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="opera" />
		<KeyWord name="or" />
		<KeyWord name="ord" func="yes">
			<Overload retVal="" descr="ord(c) -&gt; integer&#10;&#10;Return the integer ordinal of a one-character string.">
			</Overload>
		</KeyWord>
		<KeyWord name="os" func="yes">
			<Overload retVal="" descr="OS routines for Mac, NT, or Posix depending on what system we're on.&#10;&#10;This exports:&#10;  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.&#10;  - os.path is one of the modules posixpath, or ntpath&#10;  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'&#10;  - os.curdir is a string representing the current directory ('.' or ':')&#10;  - os.pardir is a string representing the parent directory ('..' or '::')&#10;  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')&#10;  - os.extsep is the extension separator ('.' or '/')&#10;  - os.altsep is the alternate pathname separator (None or '/')&#10;  - os.pathsep is the component separator used in $PATH etc&#10;  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')&#10;  - os.defpath is the default search path for executables&#10;  - os.devnull is the file path of the null device ('/dev/null', etc.)&#10;&#10;Programs that import and use 'os' stand a better chance of being&#10;portable between different platforms.  Of course, they must then&#10;only use functions that are defined by all platforms (e.g., unlink&#10;and opendir), and leave all pathname manipulation to os.path&#10;(e.g., split and join).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_APPEND" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_BINARY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_CREAT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_EXCL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_NOINHERIT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_RANDOM" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_RDWR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_SEQUENTIAL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_SHORT_LIVED" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TEMPORARY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TEXT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TRUNC" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_WRONLY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_DETACH" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_NOWAIT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_NOWAITO" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_OVERLAY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.R_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.SEEK_CUR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.SEEK_END" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.TMP_MAX" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.W_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.X_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.abort" func="yes">
			<Overload retVal="" descr="abort() -&gt; does not return!&#10;&#10;Abort the interpreter immediately.  This 'dumps core' or otherwise fails&#10;in the hardest way possible on the hosting operating system.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.access" func="yes">
			<Overload retVal="" descr="access(path, mode) -&gt; True if granted, False otherwise&#10;&#10;Use the real uid/gid to test for access to a path.  Note that most&#10;operations will use the effective uid/gid, therefore this routine can&#10;be used in a suid/sgid environment to test if the invoking user has the&#10;specified access to the path.  The mode argument can be F_OK to test&#10;existence, or the inclusive-OR of R_OK, W_OK, and X_OK.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.altsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.chdir" func="yes">
			<Overload retVal="" descr="chdir(path)&#10;&#10;Change the current working directory to the specified path.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.chmod" func="yes">
			<Overload retVal="" descr="chmod(path, mode)&#10;&#10;Change the access permissions of a file.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.close" func="yes">
			<Overload retVal="" descr="close(fd)&#10;&#10;Close a file descriptor (for low level IO).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.closerange" func="yes">
			<Overload retVal="" descr="closerange(fd_low, fd_high)&#10;&#10;Closes all file descriptors in [fd_low, fd_high), ignoring errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.curdir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.defpath" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.devnull" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.dup" func="yes">
			<Overload retVal="" descr="dup(fd) -&gt; fd2&#10;&#10;Return a duplicate of a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.dup2" func="yes">
			<Overload retVal="" descr="dup2(old_fd, new_fd)&#10;&#10;Duplicate file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.environ" func="yes">
			<Overload retVal="" descr="(instance)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error" func="yes">
			<Overload retVal="" descr="OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.errno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.filename" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.strerror" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execl" func="yes">
			<Overload retVal="" descr="execl(file, *args)&#10;&#10;Execute the executable file with argument list args, replacing the&#10;current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execle" func="yes">
			<Overload retVal="" descr="execle(file, *args, env)&#10;&#10;Execute the executable file with argument list args and&#10;environment env, replacing the current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execlp" func="yes">
			<Overload retVal="" descr="execlp(file, *args)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args, replacing the current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execlpe" func="yes">
			<Overload retVal="" descr="execlpe(file, *args, env)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args and environment env, replacing the current&#10;process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execv" func="yes">
			<Overload retVal="" descr="execv(path, args)&#10;&#10;Execute an executable path with arguments, replacing current process.&#10;&#10;    path: path of executable file&#10;    args: tuple or list of strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execve" func="yes">
			<Overload retVal="" descr="execve(path, args, env)&#10;&#10;Execute a path with arguments and environment, replacing current process.&#10;&#10;    path: path of executable file&#10;    args: tuple or list of arguments&#10;    env: dictionary of strings mapping to strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execvp" func="yes">
			<Overload retVal="" descr="execvp(file, args)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args, replacing the current process.&#10;args may be a list or tuple of strings.">
				<Param name="file" />
				<Param name="args" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execvpe" func="yes">
			<Overload retVal="" descr="execvpe(file, args, env)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args and environment env , replacing the&#10;current process.&#10;args may be a list or tuple of strings.">
				<Param name="file" />
				<Param name="args" />
				<Param name="env" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.extsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fdopen" func="yes">
			<Overload retVal="" descr="fdopen(fd [, mode='r' [, bufsize]]) -&gt; file_object&#10;&#10;Return an open file object connected to a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fstat" func="yes">
			<Overload retVal="" descr="fstat(fd) -&gt; stat result&#10;&#10;Like stat(), but for an open file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fsync" func="yes">
			<Overload retVal="" descr="fsync(fildes)&#10;&#10;force write of file with filedescriptor to disk.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getcwd" func="yes">
			<Overload retVal="" descr="getcwd() -&gt; path&#10;&#10;Return a string representing the current working directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getcwdu" func="yes">
			<Overload retVal="" descr="getcwdu() -&gt; path&#10;&#10;Return a unicode string representing the current working directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getenv" func="yes">
			<Overload retVal="" descr="Get an environment variable, return None if it doesn't exist.&#10;The optional second argument can specify an alternate default.">
				<Param name="key" />
				<Param name="[default=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.getpid" func="yes">
			<Overload retVal="" descr="getpid() -&gt; pid&#10;&#10;Return the current process id">
			</Overload>
		</KeyWord>
		<KeyWord name="os.isatty" func="yes">
			<Overload retVal="" descr="isatty(fd) -&gt; bool&#10;&#10;Return True if the file descriptor 'fd' is an open file descriptor&#10;connected to the slave end of a terminal.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.kill" func="yes">
			<Overload retVal="" descr="kill(pid, sig)&#10;&#10;Kill a process with a signal.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.linesep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.listdir" func="yes">
			<Overload retVal="" descr="listdir(path) -&gt; list_of_strings&#10;&#10;Return a list containing the names of the entries in the directory.&#10;&#10;    path: path of directory to list&#10;&#10;The list is in arbitrary order.  It does not include the special&#10;entries '.' and '..' even if they are present in the directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.lseek" func="yes">
			<Overload retVal="" descr="lseek(fd, pos, how) -&gt; newpos&#10;&#10;Set the current position of a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.lstat" func="yes">
			<Overload retVal="" descr="lstat(path) -&gt; stat result&#10;&#10;Like stat(path), but do not follow symbolic links.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.makedirs" func="yes">
			<Overload retVal="" descr="makedirs(path [, mode=0777])&#10;&#10;Super-mkdir; create a leaf directory and all intermediate ones.&#10;Works like mkdir, except that any intermediate path segment (not&#10;just the rightmost) will be created if it does not exist.  This is&#10;recursive.">
				<Param name="name" />
				<Param name="[mode=511]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.mkdir" func="yes">
			<Overload retVal="" descr="mkdir(path [, mode=0777])&#10;&#10;Create a directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.name" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.open" func="yes">
			<Overload retVal="" descr="open(filename, flag [, mode=0777]) -&gt; fd&#10;&#10;Open a file (for low level IO).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pardir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pathsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pipe" func="yes">
			<Overload retVal="" descr="pipe() -&gt; (read_end, write_end)&#10;&#10;Create a pipe.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.popen" func="yes">
			<Overload retVal="" descr="popen(command [, mode='r' [, bufsize]]) -&gt; pipe&#10;&#10;Open a pipe to/from a command returning a file object.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.popen2" />
		<KeyWord name="os.popen3" />
		<KeyWord name="os.popen4" />
		<KeyWord name="os.putenv" func="yes">
			<Overload retVal="" descr="putenv(key, value)&#10;&#10;Change or add an environment variable.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.read" func="yes">
			<Overload retVal="" descr="read(fd, buffersize) -&gt; string&#10;&#10;Read a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.remove" func="yes">
			<Overload retVal="" descr="remove(path)&#10;&#10;Remove a file (same as unlink(path)).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.removedirs" func="yes">
			<Overload retVal="" descr="removedirs(path)&#10;&#10;Super-rmdir; remove a leaf directory and all empty intermediate&#10;ones.  Works like rmdir except that, if the leaf directory is&#10;successfully removed, directories corresponding to rightmost path&#10;segments will be pruned away until either the whole path is&#10;consumed or an error occurs.  Errors during this latter phase are&#10;ignored -- they generally mean that a directory was not empty.">
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.rename" func="yes">
			<Overload retVal="" descr="rename(old, new)&#10;&#10;Rename a file or directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.renames" func="yes">
			<Overload retVal="" descr="renames(old, new)&#10;&#10;Super-rename; create directories as necessary and delete any left&#10;empty.  Works like rename, except creation of any intermediate&#10;directories needed to make the new pathname good is attempted&#10;first.  After the rename, directories corresponding to rightmost&#10;path segments of the old name will be pruned way until either the&#10;whole path is consumed or a nonempty directory is found.&#10;&#10;Note: this function can fail with the new directory structure made&#10;if you lack permissions needed to unlink the leaf directory or&#10;file.">
				<Param name="old" />
				<Param name="new" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.rmdir" func="yes">
			<Overload retVal="" descr="rmdir(path)&#10;&#10;Remove a directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.sep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnl" func="yes">
			<Overload retVal="" descr="spawnl(mode, file, *args) -&gt; integer&#10;&#10;Execute file with arguments from args in a subprocess.&#10;If mode == P_NOWAIT return the pid of the process.&#10;If mode == P_WAIT return the process's exit code if it exits normally;&#10;otherwise return -SIG, where SIG is the signal that killed it.">
				<Param name="mode" />
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnle" func="yes">
			<Overload retVal="" descr="spawnle(mode, file, *args, env) -&gt; integer&#10;&#10;Execute file with arguments from args in a subprocess with the&#10;supplied environment.&#10;If mode == P_NOWAIT return the pid of the process.&#10;If mode == P_WAIT return the process's exit code if it exits normally;&#10;otherwise return -SIG, where SIG is the signal that killed it.">
				<Param name="mode" />
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnv" func="yes">
			<Overload retVal="" descr="spawnv(mode, path, args)&#10;&#10;Execute the program 'path' in a new process.&#10;&#10;    mode: mode of process creation&#10;    path: path of executable file&#10;    args: tuple or list of strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnve" func="yes">
			<Overload retVal="" descr="spawnve(mode, path, args, env)&#10;&#10;Execute the program 'path' in a new process.&#10;&#10;    mode: mode of process creation&#10;    path: path of executable file&#10;    args: tuple or list of arguments&#10;    env: dictionary of strings mapping to strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.startfile" func="yes">
			<Overload retVal="" descr="startfile(filepath [, operation]) - Start a file with its associated&#10;application.&#10;&#10;When &quot;operation&quot; is not specified or &quot;open&quot;, this acts like&#10;double-clicking the file in Explorer, or giving the file name as an&#10;argument to the DOS &quot;start&quot; command: the file is opened with whatever&#10;application (if any) its extension is associated.&#10;When another &quot;operation&quot; is given, it specifies what should be done with&#10;the file.  A typical operation is &quot;print&quot;.&#10;&#10;startfile returns as soon as the associated application is launched.&#10;There is no option to wait for the application to close, and no way&#10;to retrieve the application's exit status.&#10;&#10;The filepath is relative to the current directory.  If you want to use&#10;an absolute path, make sure the first character is not a slash (&quot;/&quot;);&#10;the underlying Win32 ShellExecute function doesn't work if it is.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat" func="yes">
			<Overload retVal="" descr="stat(path) -&gt; stat result&#10;&#10;Perform a stat system call on the given path.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_float_times" func="yes">
			<Overload retVal="" descr="stat_float_times([newval]) -&gt; oldval&#10;&#10;Determine whether os.[lf]stat represents time stamps as float objects.&#10;If newval is True, future calls to stat() return floats, if it is False,&#10;future calls return ints. &#10;If newval is omitted, return the current setting.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result" func="yes">
			<Overload retVal="" descr="stat_result: Result from stat or lstat.&#10;&#10;This object may be accessed either as a tuple of&#10;  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)&#10;or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.&#10;&#10;Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,&#10;or st_flags, they are available as attributes only.&#10;&#10;See os.stat for more information.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_unnamed_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_atime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_ctime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_dev" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_gid" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_ino" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_mode" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_mtime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_nlink" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_size" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_uid" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result" func="yes">
			<Overload retVal="" descr="statvfs_result: Result from statvfs or fstatvfs.&#10;&#10;This object may be accessed either as a tuple of&#10;  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),&#10;or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.&#10;&#10;See os.statvfs for more information.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bavail" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bfree" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_blocks" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bsize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_favail" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_ffree" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_files" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_flag" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_frsize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_namemax" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.strerror" func="yes">
			<Overload retVal="" descr="strerror(code) -&gt; string&#10;&#10;Translate an error code to a message string.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.system" func="yes">
			<Overload retVal="" descr="system(command) -&gt; exit_status&#10;&#10;Execute the command (a string) in a subshell.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tempnam" func="yes">
			<Overload retVal="" descr="tempnam([dir[, prefix]]) -&gt; string&#10;&#10;Return a unique name for a temporary file.&#10;The directory and a prefix may be specified as strings; they may be omitted&#10;or None if not needed.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.times" func="yes">
			<Overload retVal="" descr="times() -&gt; (utime, stime, cutime, cstime, elapsed_time)&#10;&#10;Return a tuple of floating point numbers indicating process times.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tmpfile" func="yes">
			<Overload retVal="" descr="tmpfile() -&gt; file object&#10;&#10;Create a temporary file with no directory entries.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tmpnam" func="yes">
			<Overload retVal="" descr="tmpnam() -&gt; string&#10;&#10;Return a unique name for a temporary file.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.umask" func="yes">
			<Overload retVal="" descr="umask(new_mask) -&gt; old_mask&#10;&#10;Set the current numeric umask and return the previous umask.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.unlink" func="yes">
			<Overload retVal="" descr="unlink(path)&#10;&#10;Remove a file (same as remove(path)).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.unsetenv" />
		<KeyWord name="os.urandom" func="yes">
			<Overload retVal="" descr="urandom(n) -&gt; str&#10;&#10;Return n random bytes suitable for cryptographic use.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.utime" func="yes">
			<Overload retVal="" descr="utime(path, (atime, mtime))&#10;utime(path, None)&#10;&#10;Set the access and modified time of the file to the given values.  If the&#10;second form is used, set the access and modified times to the current time.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.waitpid" func="yes">
			<Overload retVal="" descr="waitpid(pid, options) -&gt; (pid, status &lt;&lt; 8)&#10;&#10;Wait for completion of a given process.  options is ignored on Windows.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.walk" func="yes">
			<Overload retVal="" descr="Directory tree generator.&#10;&#10;For each directory in the directory tree rooted at top (including top&#10;itself, but excluding '.' and '..'), yields a 3-tuple&#10;&#10;    dirpath, dirnames, filenames&#10;&#10;dirpath is a string, the path to the directory.  dirnames is a list of&#10;the names of the subdirectories in dirpath (excluding '.' and '..').&#10;filenames is a list of the names of the non-directory files in dirpath.&#10;Note that the names in the lists are just names, with no path components.&#10;To get a full path (which begins with top) to a file or directory in&#10;dirpath, do os.path.join(dirpath, name).&#10;&#10;If optional arg 'topdown' is true or not specified, the triple for a&#10;directory is generated before the triples for any of its subdirectories&#10;(directories are generated top down).  If topdown is false, the triple&#10;for a directory is generated after the triples for all of its&#10;subdirectories (directories are generated bottom up).&#10;&#10;When topdown is true, the caller can modify the dirnames list in-place&#10;(e.g., via del or slice assignment), and walk will only recurse into the&#10;subdirectories whose names remain in dirnames; this can be used to prune&#10;the search, or to impose a specific order of visiting.  Modifying&#10;dirnames when topdown is false is ineffective, since the directories in&#10;dirnames have already been generated by the time dirnames itself is&#10;generated.&#10;&#10;By default errors from the os.listdir() call are ignored.  If&#10;optional arg 'onerror' is specified, it should be a function; it&#10;will be called with one argument, an os.error instance.  It can&#10;report the error to continue with the walk, or raise the exception&#10;to abort the walk.  Note that the filename is available as the&#10;filename attribute of the exception object.&#10;&#10;By default, os.walk does not follow symbolic links to subdirectories on&#10;systems that support them.  In order to get this functionality, set the&#10;optional argument 'followlinks' to true.&#10;&#10;Caution:  if you pass a relative pathname for top, don't change the&#10;current working directory between resumptions of walk.  walk never&#10;changes the current directory, and assumes that the client doesn't&#10;either.&#10;&#10;Example:&#10;&#10;import os&#10;from os.path import join, getsize&#10;for root, dirs, files in os.walk('python/Lib/email'):&#10;    print root, &quot;consumes&quot;,&#10;    print sum([getsize(join(root, name)) for name in files]),&#10;    print &quot;bytes in&quot;, len(files), &quot;non-directory files&quot;&#10;    if 'CVS' in dirs:&#10;        dirs.remove('CVS')  # don't visit CVS directories">
				<Param name="top" />
				<Param name="[topdown=True" />
				<Param name="[onerror=None" />
				<Param name="[followlinks=False]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.write" func="yes">
			<Overload retVal="" descr="write(fd, string) -&gt; byteswritten&#10;&#10;Write a string to a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="parse" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="parseArgs" func="yes">
			<Overload retVal="" descr="Function of unittest.TestProgram">
			</Overload>
		</KeyWord>
		<KeyWord name="parse_header" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="parse_multipart" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="parse_qs" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="parse_qsl" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="pass" />
		<KeyWord name="perform" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="phantomjs" />
		<KeyWord name="pipe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="poll" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="pop" func="yes">
			<Overload retVal="" descr="Remove and return an arbitrary set element.&#10;Raises KeyError if the set is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="popen" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen2" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen3" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen4" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="pow" func="yes">
			<Overload retVal="" descr="pow(x, y[, z]) -&gt; number&#10;&#10;With two arguments, equivalent to x**y.  With three arguments,&#10;equivalent to (x**y) % z, but may be more efficient (e.g. for longs).">
			</Overload>
		</KeyWord>
		<KeyWord name="print" />
		<KeyWord name="printErrorList" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="printErrors" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="print_arguments" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="print_directory" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="print_environ" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="print_environ_usage" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="print_exception" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="print_form" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="printc" func="yes">
			<Overload retVal="" descr="Print in color.">
				<Param name="text" />
				<Param name="color" />
			</Overload>
		</KeyWord>
		<KeyWord name="property" func="yes">
			<Overload retVal="" descr="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute&#10;&#10;fget is a function to be used for getting an attribute value, and likewise&#10;fset is a function for setting, and fdel a function for del'ing, an&#10;attribute.  Typical use is to define a managed attribute x:&#10;class C(object):&#10;    def getx(self): return self._x&#10;    def setx(self, value): self._x = value&#10;    def delx(self): del self._x&#10;    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)&#10;&#10;Decorators make defining new properties or modifying existing ones easy:&#10;class C(object):&#10;    @property&#10;    def x(self): return self._x&#10;    @x.setter&#10;    def x(self, value): self._x = value&#10;    @x.deleter&#10;    def x(self): del self._x">
			</Overload>
		</KeyWord>
		<KeyWord name="purge" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="putenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="quit" func="yes">
			<Overload retVal="" descr="Function of Opera">
			</Overload>
		</KeyWord>
		<KeyWord name="raise" />
		<KeyWord name="range" func="yes">
			<Overload retVal="" descr="range([start,] stop[, step]) -&gt; list of integers&#10;&#10;Return a list containing an arithmetic progression of integers.&#10;range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.&#10;When step is given, it specifies the increment (or decrement).&#10;For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!&#10;These are exactly the valid indices for a list of 4 elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="raw_input" func="yes">
			<Overload retVal="" descr="raw_input([prompt]) -&gt; string&#10;&#10;Read a string from standard input.  The trailing newline is stripped.&#10;If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.&#10;On Unix, GNU readline is used if enabled.  The prompt string, if given,&#10;is printed without a trailing newline before reading.">
			</Overload>
		</KeyWord>
		<KeyWord name="re" func="yes">
			<Overload retVal="" descr="Support for regular expressions (RE).&#10;&#10;This module provides regular expression matching operations similar to&#10;those found in Perl.  It supports both 8-bit and Unicode strings; both&#10;the pattern and the strings being processed can contain null bytes and&#10;characters outside the US ASCII range.&#10;&#10;Regular expressions can contain both special and ordinary characters.&#10;Most ordinary characters, like &quot;A&quot;, &quot;a&quot;, or &quot;0&quot;, are the simplest&#10;regular expressions; they simply match themselves.  You can&#10;concatenate ordinary characters, so last matches the string 'last'.&#10;&#10;The special characters are:&#10;    &quot;.&quot;      Matches any character except a newline.&#10;    &quot;^&quot;      Matches the start of the string.&#10;    &quot;$&quot;      Matches the end of the string or just before the newline at&#10;             the end of the string.&#10;    &quot;*&quot;      Matches 0 or more (greedy) repetitions of the preceding RE.&#10;             Greedy means that it will match as many repetitions as possible.&#10;    &quot;+&quot;      Matches 1 or more (greedy) repetitions of the preceding RE.&#10;    &quot;?&quot;      Matches 0 or 1 (greedy) of the preceding RE.&#10;    *?,+?,?? Non-greedy versions of the previous three special characters.&#10;    {m,n}    Matches from m to n repetitions of the preceding RE.&#10;    {m,n}?   Non-greedy version of the above.&#10;    &quot;\\&quot;     Either escapes special characters or signals a special sequence.&#10;    []       Indicates a set of characters.&#10;             A &quot;^&quot; as the first character indicates a complementing set.&#10;    &quot;|&quot;      A|B, creates an RE that will match either A or B.&#10;    (...)    Matches the RE inside the parentheses.&#10;             The contents can be retrieved or matched later in the string.&#10;    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).&#10;    (?:...)  Non-grouping version of regular parentheses.&#10;    (?P&lt;name&gt;...) The substring matched by the group is accessible by name.&#10;    (?P=name)     Matches the text matched earlier by the group named name.&#10;    (?#...)  A comment; ignored.&#10;    (?=...)  Matches if ... matches next, but doesn't consume the string.&#10;    (?!...)  Matches if ... doesn't match next.&#10;    (?&lt;=...) Matches if preceded by ... (must be fixed length).&#10;    (?&lt;!...) Matches if not preceded by ... (must be fixed length).&#10;    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,&#10;                       the (optional) no pattern otherwise.&#10;&#10;The special sequences consist of &quot;\\&quot; and a character from the list&#10;below.  If the ordinary character is not on the list, then the&#10;resulting RE will match the second character.&#10;    \number  Matches the contents of the group of the same number.&#10;    \A       Matches only at the start of the string.&#10;    \Z       Matches only at the end of the string.&#10;    \b       Matches the empty string, but only at the start or end of a word.&#10;    \B       Matches the empty string, but not at the start or end of a word.&#10;    \d       Matches any decimal digit; equivalent to the set [0-9].&#10;    \D       Matches any non-digit character; equivalent to the set [^0-9].&#10;    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v].&#10;    \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\f\v].&#10;    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].&#10;             With LOCALE, it will match the set [0-9_] plus characters defined&#10;             as letters for the current locale.&#10;    \W       Matches the complement of \w.&#10;    \\       Matches a literal backslash.&#10;&#10;This module exports the following functions:&#10;    match    Match a regular expression pattern to the beginning of a string.&#10;    search   Search a string for the presence of a pattern.&#10;    sub      Substitute occurrences of a pattern found in a string.&#10;    subn     Same as sub, but also return the number of substitutions made.&#10;    split    Split a string by the occurrences of a pattern.&#10;    findall  Find all occurrences of a pattern in a string.&#10;    finditer Return an iterator yielding a match object for each match.&#10;    compile  Compile a pattern into a RegexObject.&#10;    purge    Clear the regular expression cache.&#10;    escape   Backslash all non-alphanumerics in a string.&#10;&#10;Some of the functions in this module takes flags as optional parameters:&#10;    I  IGNORECASE  Perform case-insensitive matching.&#10;    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.&#10;    M  MULTILINE   &quot;^&quot; matches the beginning of lines (after a newline)&#10;                   as well as the string.&#10;                   &quot;$&quot; matches the end of lines (before a newline) as well&#10;                   as the end of the string.&#10;    S  DOTALL      &quot;.&quot; matches any character at all, including the newline.&#10;    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.&#10;    U  UNICODE     Make \w, \W, \b, \B, dependent on the Unicode locale.&#10;&#10;This module also defines an exception 'error'.">
			</Overload>
		</KeyWord>
		<KeyWord name="re.DEBUG" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.DOTALL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.I" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.IGNORECASE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.L" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.LOCALE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.M" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.MULTILINE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.S" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.Scanner" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.T" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.TEMPLATE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.U" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.UNICODE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.VERBOSE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.X" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.compile" func="yes">
			<Overload retVal="" descr="Compile a regular expression pattern, returning a pattern object.">
				<Param name="pattern" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.error" />
		<KeyWord name="re.error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="re.escape" func="yes">
			<Overload retVal="" descr="Escape all non-alphanumeric characters in pattern.">
				<Param name="pattern" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.findall" func="yes">
			<Overload retVal="" descr="Return a list of all non-overlapping matches in the string.&#10;&#10;If one or more groups are present in the pattern, return a&#10;list of groups; this will be a list of tuples if the pattern&#10;has more than one group.&#10;&#10;Empty matches are included in the result.">
				<Param name="pattern" />
				<Param name="string" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.finditer" func="yes">
			<Overload retVal="" descr="Return an iterator over all non-overlapping matches in the&#10;string.  For each match, the iterator returns a match object.&#10;&#10;Empty matches are included in the result.">
				<Param name="pattern" />
				<Param name="string" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.match" func="yes">
			<Overload retVal="" descr="Try to apply the pattern at the start of the string, returning&#10;a match object, or None if no match was found.">
				<Param name="pattern" />
				<Param name="string" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.purge" func="yes">
			<Overload retVal="" descr="Clear the regular expression cache">
			</Overload>
		</KeyWord>
		<KeyWord name="re.search" func="yes">
			<Overload retVal="" descr="Scan through string looking for a match to the pattern, returning&#10;a match object, or None if no match was found.">
				<Param name="pattern" />
				<Param name="string" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.split" func="yes">
			<Overload retVal="" descr="Split the source string by the occurrences of the pattern,&#10;returning a list containing the resulting substrings.">
				<Param name="pattern" />
				<Param name="string" />
				<Param name="[maxsplit=0" />
				<Param name="[flags=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.sub" func="yes">
			<Overload retVal="" descr="Return the string obtained by replacing the leftmost&#10;non-overlapping occurrences of the pattern in string by the&#10;replacement repl.  repl can be either a string or a callable;&#10;if a string, backslash escapes in it are processed.  If it is&#10;a callable, it's passed the match object and must return&#10;a replacement string to be used.">
				<Param name="pattern" />
				<Param name="repl" />
				<Param name="string" />
				<Param name="[count=0" />
				<Param name="[flags=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.subn" func="yes">
			<Overload retVal="" descr="Return a 2-tuple containing (new_string, number).&#10;new_string is the string obtained by replacing the leftmost&#10;non-overlapping occurrences of the pattern in the source&#10;string by the replacement repl.  number is the number of&#10;substitutions that were made. repl can be either a string or a&#10;callable; if a string, backslash escapes in it are processed.&#10;If it is a callable, it's passed the match object and must&#10;return a replacement string to be used.">
				<Param name="pattern" />
				<Param name="repl" />
				<Param name="string" />
				<Param name="[count=0" />
				<Param name="[flags=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="re.template" func="yes">
			<Overload retVal="" descr="Compile a template pattern, returning a pattern object">
				<Param name="pattern" />
				<Param name="[flags=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="read" func="yes">
			<Overload retVal="" descr="read([size]) -&gt; read at most size bytes, returned as a string.&#10;&#10;If the size argument is negative or omitted, read until EOF is reached.&#10;Notice that when in non-blocking mode, less data than what was requested&#10;may be returned, even if no size parameter was given.">
			</Overload>
		</KeyWord>
		<KeyWord name="readinto" func="yes">
			<Overload retVal="" descr="readinto() -&gt; Undocumented.  Don't use this; it may go away.">
			</Overload>
		</KeyWord>
		<KeyWord name="readline" func="yes">
			<Overload retVal="" descr="readline([size]) -&gt; next line from the file, as a string.&#10;&#10;Retain newline.  A non-negative size argument limits the maximum&#10;number of bytes to return (an incomplete line may be returned then).&#10;Return an empty string at EOF.">
			</Overload>
		</KeyWord>
		<KeyWord name="readlines" func="yes">
			<Overload retVal="" descr="readlines([size]) -&gt; list of strings, each a line from the file.&#10;&#10;Call readline() repeatedly and return a list of the lines so read.&#10;The optional size argument, if given, is an approximate bound on the&#10;total number of bytes in the lines returned.">
			</Overload>
		</KeyWord>
		<KeyWord name="reduce" func="yes">
			<Overload retVal="" descr="reduce(function, sequence[, initial]) -&gt; value&#10;&#10;Apply a function of two arguments cumulatively to the items of a sequence,&#10;from left to right, so as to reduce the sequence to a single value.&#10;For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates&#10;((((1+2)+3)+4)+5).  If initial is present, it is placed before the items&#10;of the sequence in the calculation, and serves as a default when the&#10;sequence is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="refresh" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="registerResult" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="reinit" func="yes">
			<Overload retVal="" descr="Function of colorama">
			</Overload>
		</KeyWord>
		<KeyWord name="release" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="reload" func="yes">
			<Overload retVal="" descr="reload(module) -&gt; module&#10;&#10;Reload the module.  The module must have been successfully imported before.">
			</Overload>
		</KeyWord>
		<KeyWord name="remote" />
		<KeyWord name="remove" func="yes">
			<Overload retVal="" descr="B.remove(int) -&gt; None&#10;&#10;Remove the first occurance of a value in B.">
			</Overload>
		</KeyWord>
		<KeyWord name="removeHandler" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="removeResult" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="remove_all_selections" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="remove_script" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="remove_selection" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="removedirs" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="rename" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="renames" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="replace" func="yes">
			<Overload retVal="" descr="S.replace(old, new[, count]) -&gt; string&#10;&#10;Return a copy of string S with all occurrences of substring&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="repr" func="yes">
			<Overload retVal="" descr="repr(object) -&gt; string&#10;&#10;Return the canonical string representation of the object.&#10;For most object types, eval(repr(object)) == object.">
			</Overload>
		</KeyWord>
		<KeyWord name="reset_all" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="retrieve_last_remote_control_logs" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="return" />
		<KeyWord name="reverse" func="yes">
			<Overload retVal="" descr="L.reverse() -- reverse *IN PLACE*">
			</Overload>
		</KeyWord>
		<KeyWord name="reversed" func="yes">
			<Overload retVal="" descr="reversed(sequence) -&gt; reverse iterator over values of the sequence&#10;&#10;Return a reverse iterator">
			</Overload>
		</KeyWord>
		<KeyWord name="rfind" func="yes">
			<Overload retVal="" descr="S.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="rjust" func="yes">
			<Overload retVal="" descr="B.rjust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B right justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="rmdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="rollup" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="round" func="yes">
			<Overload retVal="" descr="round(number[, ndigits]) -&gt; floating point number&#10;&#10;Round a number to a given precision in decimal digits (default 0 digits).&#10;This always returns a floating point number.  Precision may be negative.">
			</Overload>
		</KeyWord>
		<KeyWord name="rpartition" func="yes">
			<Overload retVal="" descr="B.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Searches for the separator sep in B, starting at the end of B,&#10;and returns the part before it, the separator itself, and the&#10;part after it.  If the separator is not found, returns two empty&#10;bytearray objects and B.">
			</Overload>
		</KeyWord>
		<KeyWord name="rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string, starting at the end of the string and working&#10;to the front.  If maxsplit is given, at most maxsplit splits are&#10;done. If sep is not specified or is None, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="run" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestRunner">
			</Overload>
		</KeyWord>
		<KeyWord name="runTest" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="runTests" func="yes">
			<Overload retVal="" descr="Function of unittest.main">
			</Overload>
		</KeyWord>
		<KeyWord name="run_script" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="save_screenshot" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="scroll" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="scroll_from_element" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="search" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="seek" func="yes">
			<Overload retVal="" descr="seek(offset[, whence]) -&gt; None.  Move to new file position.&#10;&#10;Argument offset is a byte count.  Optional argument whence defaults to&#10;0 (offset from start of file, offset should be &gt;= 0); other values are 1&#10;(move relative to current position, positive or negative), and 2 (move&#10;relative to end of file, usually negative, although many platforms allow&#10;seeking beyond the end of a file).  If the file is opened in text mode,&#10;only offsets returned by tell() are legal.  Use of other offsets causes&#10;undefined behavior.&#10;Note that not all file objects are seekable.">
			</Overload>
		</KeyWord>
		<KeyWord name="select" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="select_frame" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="select_pop_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="select_window" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="selenium" />
		<KeyWord name="selenium.selenium" func="yes">
			<Overload retVal="" descr="Defines an object that runs Selenium commands.&#10;&#10;**Element Locators**&#10;&#10;Element Locators tell Selenium which HTML element a command refers to.&#10;The format of a locator is:&#10;&#10;\ *locatorType*\ **=**\ \ *argument*&#10;&#10;&#10;We support the following strategies for locating elements:&#10;&#10;&#10;*   \ **identifier**\ =\ *id*: &#10;    Select the element with the specified @id attribute. If no match is&#10;    found, select the first element whose @name attribute is \ *id*.&#10;    (This is normally the default; see below.)&#10;*   \ **id**\ =\ *id*:&#10;    Select the element with the specified @id attribute.&#10;*   \ **name**\ =\ *name*:&#10;    Select the first element with the specified @name attribute.&#10;    &#10;    *   username&#10;    *   name=username&#10;    &#10;    &#10;    The name may optionally be followed by one or more \ *element-filters*, separated from the name by whitespace.  If the \ *filterType* is not specified, \ **value**\  is assumed.&#10;    &#10;    *   name=flavour value=chocolate&#10;    &#10;    &#10;*   \ **dom**\ =\ *javascriptExpression*: &#10;    &#10;    Find an element by evaluating the specified string.  This allows you to traverse the HTML Document Object&#10;    Model using JavaScript.  Note that you must not return a value in this string; simply make it the last expression in the block.&#10;    &#10;    *   dom=document.forms['myForm'].myDropdown&#10;    *   dom=document.images[56]&#10;    *   dom=function foo() { return document.links[1]; }; foo();&#10;    &#10;    &#10;*   \ **xpath**\ =\ *xpathExpression*: &#10;    Locate an element using an XPath expression.&#10;    &#10;    *   xpath=//img[@alt='The image alt text']&#10;    *   xpath=//table[@id='table1']//tr[4]/td[2]&#10;    *   xpath=//a[contains(@href,'#id1')]&#10;    *   xpath=//a[contains(@href,'#id1')]/@class&#10;    *   xpath=(//table[@class='stylee'])//th[text()='theHeaderText']/../td&#10;    *   xpath=//input[@name='name2' and @value='yes']&#10;    *   xpath=//\*[text()=&quot;right&quot;]&#10;    &#10;    &#10;*   \ **link**\ =\ *textPattern*:&#10;    Select the link (anchor) element which contains text matching the&#10;    specified \ *pattern*.&#10;    &#10;    *   link=The link text&#10;    &#10;    &#10;*   \ **css**\ =\ *cssSelectorSyntax*:&#10;    Select the element using css selectors. Please refer to CSS2 selectors, CSS3 selectors for more information. You can also check the TestCssLocators test in the selenium test suite for an example of usage, which is included in the downloaded selenium core package.&#10;    &#10;    *   css=a[href=&quot;#id3&quot;]&#10;    *   css=span#firstChild + span&#10;    &#10;    &#10;    Currently the css selector locator supports all css1, css2 and css3 selectors except namespace in css3, some pseudo classes(:nth-of-type, :nth-last-of-type, :first-of-type, :last-of-type, :only-of-type, :visited, :hover, :active, :focus, :indeterminate) and pseudo elements(::first-line, ::first-letter, ::selection, ::before, ::after). &#10;    &#10;*   \ **ui**\ =\ *uiSpecifierString*:&#10;    Locate an element by resolving the UI specifier string to another locator, and evaluating it. See the Selenium UI-Element Reference for more details.&#10;    &#10;    *   ui=loginPages::loginButton()&#10;    *   ui=settingsPages::toggle(label=Hide Email)&#10;    *   ui=forumPages::postBody(index=2)//a[2]&#10;    &#10;    &#10;&#10;&#10;&#10;Without an explicit locator prefix, Selenium uses the following default&#10;strategies:&#10;&#10;&#10;*   \ **dom**\ , for locators starting with &quot;document.&quot;&#10;*   \ **xpath**\ , for locators starting with &quot;//&quot;&#10;*   \ **identifier**\ , otherwise&#10;&#10;**Element Filters**&#10;&#10;Element filters can be used with a locator to refine a list of candidate elements.  They are currently used only in the 'name' element-locator.&#10;&#10;Filters look much like locators, ie.&#10;&#10;\ *filterType*\ **=**\ \ *argument*&#10;&#10;Supported element-filters are:&#10;&#10;\ **value=**\ \ *valuePattern*&#10;&#10;&#10;Matches elements based on their values.  This is particularly useful for refining a list of similarly-named toggle-buttons.&#10;&#10;\ **index=**\ \ *index*&#10;&#10;&#10;Selects a single element based on its position in the list (offset from zero).&#10;&#10;**String-match Patterns**&#10;&#10;Various Pattern syntaxes are available for matching string values:&#10;&#10;&#10;*   \ **glob:**\ \ *pattern*:&#10;    Match a string against a &quot;glob&quot; (aka &quot;wildmat&quot;) pattern. &quot;Glob&quot; is a&#10;    kind of limited regular-expression syntax typically used in command-line&#10;    shells. In a glob pattern, &quot;\*&quot; represents any sequence of characters, and &quot;?&quot;&#10;    represents any single character. Glob patterns match against the entire&#10;    string.&#10;*   \ **regexp:**\ \ *regexp*:&#10;    Match a string using a regular-expression. The full power of JavaScript&#10;    regular-expressions is available.&#10;*   \ **regexpi:**\ \ *regexpi*:&#10;    Match a string using a case-insensitive regular-expression.&#10;*   \ **exact:**\ \ *string*:&#10;    &#10;    Match a string exactly, verbatim, without any of that fancy wildcard&#10;    stuff.&#10;&#10;&#10;&#10;If no pattern prefix is specified, Selenium assumes that it's a &quot;glob&quot;&#10;pattern.&#10;&#10;&#10;&#10;For commands that return multiple values (such as verifySelectOptions),&#10;the string being matched is a comma-separated list of the return values,&#10;where both commas and backslashes in the values are backslash-escaped.&#10;When providing a pattern, the optional matching syntax (i.e. glob,&#10;regexp, etc.) is specified once, as usual, at the beginning of the&#10;pattern.">
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.addCustomRequestHeader" func="yes">
			<Overload retVal="" descr="Tells the Selenium server to add the specificed key and value as a custom outgoing request header. This only works if the browser is configured to use the built in Selenium proxy.&#10;&#10;'key' the header name.&#10;'value' the header value.">
				<Param name="self" />
				<Param name="key" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.add_custom_request_header" />
		<KeyWord name="selenium.selenium.add_location_strategy" func="yes">
			<Overload retVal="" descr="Defines a new function for Selenium to locate elements on the page.&#10;For example,&#10;if you define the strategy &quot;foo&quot;, and someone runs click(&quot;foo=blah&quot;), we'll&#10;run your function, passing you the string &quot;blah&quot;, and click on the element &#10;that your function&#10;returns, or throw an &quot;Element not found&quot; error if your function returns null.&#10;&#10;We'll pass three arguments to your function:&#10;&#10;*   locator: the string the user passed in&#10;*   inWindow: the currently selected window&#10;*   inDocument: the currently selected document&#10;&#10;&#10;The function must return null if the element can't be found.&#10;&#10;'strategyName' is the name of the strategy to define; this should use only   letters [a-zA-Z] with no spaces or other punctuation.&#10;'functionDefinition' is a string defining the body of a function in JavaScript.   For example: ``return inDocument.getElementById(locator);``">
				<Param name="self" />
				<Param name="strategyName" />
				<Param name="functionDefinition" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.add_script" func="yes">
			<Overload retVal="" descr="Loads script content into a new script tag in the Selenium document. This&#10;differs from the runScript command in that runScript adds the script tag&#10;to the document of the AUT, not the Selenium document. The following&#10;entities in the script content are replaced by the characters they&#10;represent:&#10;&#10;    &amp;lt;&#10;    &amp;gt;&#10;    &amp;amp;&#10;&#10;The corresponding remove command is removeScript.&#10;&#10;'scriptContent' is the Javascript content of the script to add&#10;'scriptTagId' is (optional) the id of the new script tag. If                       specified, and an element with this id already                       exists, this operation will fail.">
				<Param name="self" />
				<Param name="scriptContent" />
				<Param name="scriptTagId" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.add_selection" func="yes">
			<Overload retVal="" descr="Add a selection to the set of selected options in a multi-select element using an option locator.&#10;&#10;@see #doSelect for details of option locators&#10;&#10;'locator' is an element locator identifying a multi-select box&#10;'optionLocator' is an option locator (a label by default)">
				<Param name="self" />
				<Param name="locator" />
				<Param name="optionLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.allow_native_xpath" func="yes">
			<Overload retVal="" descr="Specifies whether Selenium should use the native in-browser implementation&#10;of XPath (if any native version is available); if you pass &quot;false&quot; to&#10;this function, we will always use our pure-JavaScript xpath library.&#10;Using the pure-JS xpath library can improve the consistency of xpath&#10;element locators between different browser vendors, but the pure-JS&#10;version is much slower than the native implementations.&#10;&#10;'allow' is boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath">
				<Param name="self" />
				<Param name="allow" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.alt_key_down" func="yes">
			<Overload retVal="" descr="Press the alt key and hold it down until doAltUp() is called or a new page is loaded.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.alt_key_up" func="yes">
			<Overload retVal="" descr="Release the alt key.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.answer_on_next_prompt" func="yes">
			<Overload retVal="" descr="Instructs Selenium to return the specified answer string in response to&#10;the next JavaScript prompt [window.prompt()].&#10;&#10;'answer' is the answer to give in response to the prompt pop-up">
				<Param name="self" />
				<Param name="answer" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.assign_id" func="yes">
			<Overload retVal="" descr="Temporarily sets the &quot;id&quot; attribute of the specified element, so you can locate it in the future&#10;using its ID rather than a slow/complicated XPath.  This ID will disappear once the page is&#10;reloaded.&#10;&#10;'locator' is an element locator pointing to an element&#10;'identifier' is a string to be used as the ID of the specified element">
				<Param name="self" />
				<Param name="locator" />
				<Param name="identifier" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.attach_file" func="yes">
			<Overload retVal="" descr="Sets a file input (upload) field to the file listed in fileLocator&#10;&#10;'fieldLocator' is an element locator&#10;'fileLocator' is a URL pointing to the specified file. Before the file  can be set in the input field (fieldLocator), Selenium RC may need to transfer the file    to the local machine before attaching the file in a web page form. This is common in selenium  grid configurations where the RC server driving the browser is not the same  machine that started the test.   Supported Browsers: Firefox (&quot;\*chrome&quot;) only.">
				<Param name="self" />
				<Param name="fieldLocator" />
				<Param name="fileLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.captureNetworkTraffic" func="yes">
			<Overload retVal="" descr="Returns the network traffic seen by the browser, including headers, AJAX requests, status codes, and timings. When this function is called, the traffic log is cleared, so the returned content is only the traffic seen since the last call.&#10;&#10;'type' is The type of data to return the network traffic as. Valid values are: json, xml, or plain.">
				<Param name="self" />
				<Param name="type" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.capture_entire_page_screenshot" func="yes">
			<Overload retVal="" descr="Saves the entire contents of the current window canvas to a PNG file.&#10;Contrast this with the captureScreenshot command, which captures the&#10;contents of the OS viewport (i.e. whatever is currently being displayed&#10;on the monitor), and is implemented in the RC only. Currently this only&#10;works in Firefox when running in chrome mode, and in IE non-HTA using&#10;the EXPERIMENTAL &quot;Snapsie&quot; utility. The Firefox implementation is mostly&#10;borrowed from the Screengrab! Firefox extension. Please see&#10;http://www.screengrab.org and http://snapsie.sourceforge.net/ for&#10;details.&#10;&#10;'filename' is the path to the file to persist the screenshot as. No&#10;filename extension will be appended by default. Directories will not be &#10;created if they do not exist, and an exception will be thrown, possibly &#10;by native code. &#10;&#10;'kwargs' is a kwargs string that modifies the way the &#10;screenshot is captured. &#10;&#10;    Example: &quot;background=#CCFFDD&quot;&#10;&#10;Currently valid options:                  &#10;&#10;* background&#10;&#10;the background CSS for the HTML document. &#10;This may be useful to set for capturing screenshots of &#10;less-than-ideal layouts, for example where absolute positioning &#10;causes the calculation of the canvas dimension to fail and a black &#10;background is exposed (possibly obscuring black text).">
				<Param name="self" />
				<Param name="filename" />
				<Param name="kwargs" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.capture_entire_page_screenshot_to_string" func="yes">
			<Overload retVal="" descr="Downloads a screenshot of the browser current window canvas to a &#10;based 64 encoded PNG file. The \ *entire* windows canvas is captured,&#10;including parts rendered outside of the current view port.&#10;&#10;Currently this only works in Mozilla and when running in chrome mode.&#10;&#10;'kwargs' is A kwargs string that modifies the way the screenshot is captured. Example: &quot;background=#CCFFDD&quot;. This may be useful to set for capturing screenshots of less-than-ideal layouts, for example where absolute positioning causes the calculation of the canvas dimension to fail and a black background is exposed  (possibly obscuring black text).">
				<Param name="self" />
				<Param name="kwargs" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.capture_network_traffic" />
		<KeyWord name="selenium.selenium.capture_screenshot" func="yes">
			<Overload retVal="" descr="Captures a PNG screenshot to the specified file.&#10;&#10;'filename' is the absolute path to the file to be written, e.g. &quot;c:lah\screenshot.png&quot;">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.capture_screenshot_to_string" func="yes">
			<Overload retVal="" descr="Capture a PNG screenshot.  It then returns the file as a base 64 encoded string.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.check" func="yes">
			<Overload retVal="" descr="Check a toggle-button (checkbox/radio)&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.choose_cancel_on_next_confirmation" func="yes">
			<Overload retVal="" descr="By default, Selenium's overridden window.confirm() function will&#10;return true, as if the user had manually clicked OK; after running&#10;this command, the next call to confirm() will return false, as if&#10;the user had clicked Cancel.  Selenium will then resume using the&#10;default behavior for future confirmations, automatically returning &#10;true (OK) unless/until you explicitly call this command for each&#10;confirmation.&#10;&#10;&#10;&#10;Take note - every time a confirmation comes up, you must&#10;consume it with a corresponding getConfirmation, or else&#10;the next selenium operation will fail.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.choose_ok_on_next_confirmation" func="yes">
			<Overload retVal="" descr="Undo the effect of calling chooseCancelOnNextConfirmation.  Note&#10;that Selenium's overridden window.confirm() function will normally automatically&#10;return true, as if the user had manually clicked OK, so you shouldn't&#10;need to use this command unless for some reason you need to change&#10;your mind prior to the next confirmation.  After any confirmation, Selenium will resume using the&#10;default behavior for future confirmations, automatically returning &#10;true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each&#10;confirmation.&#10;&#10;&#10;&#10;Take note - every time a confirmation comes up, you must&#10;consume it with a corresponding getConfirmation, or else&#10;the next selenium operation will fail.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.click" func="yes">
			<Overload retVal="" descr="Clicks on a link, button, checkbox or radio button. If the click action&#10;causes a new page to load (like a link usually does), call&#10;waitForPageToLoad.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.click_at" func="yes">
			<Overload retVal="" descr="Clicks on a link, button, checkbox or radio button. If the click action&#10;causes a new page to load (like a link usually does), call&#10;waitForPageToLoad.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.close" func="yes">
			<Overload retVal="" descr='Simulates the user clicking the "close" button in the titlebar of a popup&#10;window or tab.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.context_menu" func="yes">
			<Overload retVal="" descr="Simulates opening the context menu for the specified element (as might happen if the user &quot;right-clicked&quot; on the element).&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.context_menu_at" func="yes">
			<Overload retVal="" descr="Simulates opening the context menu for the specified element (as might happen if the user &quot;right-clicked&quot; on the element).&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.control_key_down" func="yes">
			<Overload retVal="" descr="Press the control key and hold it down until doControlUp() is called or a new page is loaded.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.control_key_up" func="yes">
			<Overload retVal="" descr="Release the control key.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.create_cookie" func="yes">
			<Overload retVal="" descr="Create a new cookie whose path and domain are same with those of current page&#10;under test, unless you specified a path for this cookie explicitly.&#10;&#10;'nameValuePair' is name and value of the cookie in a format &quot;name=value&quot;&#10;'optionsString' is options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'.      the optionsString's format is &quot;path=/path/, max_age=60, domain=.foo.com&quot;. The order of options are irrelevant, the unit      of the value of 'max_age' is second.  Note that specifying a domain that isn't a subset of the current domain will      usually fail.">
				<Param name="self" />
				<Param name="nameValuePair" />
				<Param name="optionsString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.delete_all_visible_cookies" func="yes">
			<Overload retVal="" descr="Calls deleteCookie with recurse=true on all cookies visible to the current page.&#10;As noted on the documentation for deleteCookie, recurse=true can be much slower&#10;than simply deleting the cookies using a known domain/path.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.delete_cookie" func="yes">
			<Overload retVal="" descr="Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you&#10;need to delete it using the exact same path and domain that were used to create the cookie.&#10;If the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also&#10;note that specifying a domain that isn't a subset of the current domain will usually fail.&#10;&#10;Since there's no way to discover at runtime the original path and domain of a given cookie,&#10;we've added an option called 'recurse' to try all sub-domains of the current domain with&#10;all paths that are a subset of the current path.  Beware; this option can be slow.  In&#10;big-O notation, it operates in O(n\*m) time, where n is the number of dots in the domain&#10;name and m is the number of slashes in the path.&#10;&#10;'name' is the name of the cookie to be deleted&#10;'optionsString' is options for the cookie. Currently supported options include 'path', 'domain'      and 'recurse.' The optionsString's format is &quot;path=/path/, domain=.foo.com, recurse=true&quot;.      The order of options are irrelevant. Note that specifying a domain that isn't a subset of      the current domain will usually fail.">
				<Param name="self" />
				<Param name="name" />
				<Param name="optionsString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.deselect_pop_up" func="yes">
			<Overload retVal="" descr="Selects the main window. Functionally equivalent to using&#10;``selectWindow()`` and specifying no value for&#10;``windowID``.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.do_command" />
		<KeyWord name="selenium.selenium.double_click" func="yes">
			<Overload retVal="" descr="Double clicks on a link, button, checkbox or radio button. If the double click action&#10;causes a new page to load (like a link usually does), call&#10;waitForPageToLoad.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.double_click_at" func="yes">
			<Overload retVal="" descr="Doubleclicks on a link, button, checkbox or radio button. If the action&#10;causes a new page to load (like a link usually does), call&#10;waitForPageToLoad.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.drag_and_drop" func="yes">
			<Overload retVal="" descr="Drags an element a certain distance and then drops it&#10;&#10;'locator' is an element locator&#10;'movementsString' is offset in pixels from the current location to which the element should be moved, e.g., &quot;+70,-300&quot;">
				<Param name="self" />
				<Param name="locator" />
				<Param name="movementsString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.drag_and_drop_to_object" func="yes">
			<Overload retVal="" descr="Drags an element and drops it on another element&#10;&#10;'locatorOfObjectToBeDragged' is an element to be dragged&#10;'locatorOfDragDestinationObject' is an element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged  is dropped">
				<Param name="self" />
				<Param name="locatorOfObjectToBeDragged" />
				<Param name="locatorOfDragDestinationObject" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.dragdrop" func="yes">
			<Overload retVal="" descr="deprecated - use dragAndDrop instead&#10;&#10;'locator' is an element locator&#10;'movementsString' is offset in pixels from the current location to which the element should be moved, e.g., &quot;+70,-300&quot;">
				<Param name="self" />
				<Param name="locator" />
				<Param name="movementsString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.fire_event" func="yes">
			<Overload retVal="" descr="Explicitly simulate an event, to trigger the corresponding &quot;on\ *event*&quot;&#10;handler.&#10;&#10;'locator' is an element locator&#10;'eventName' is the event name, e.g. &quot;focus&quot; or &quot;blur&quot;">
				<Param name="self" />
				<Param name="locator" />
				<Param name="eventName" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.focus" func="yes">
			<Overload retVal="" descr="Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_alert" func="yes">
			<Overload retVal="" descr="Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.&#10;&#10;&#10;Getting an alert has the same effect as manually clicking OK. If an&#10;alert is generated but you do not consume it with getAlert, the next Selenium action&#10;will fail.&#10;&#10;Under Selenium, JavaScript alerts will NOT pop up a visible alert&#10;dialog.&#10;&#10;Selenium does NOT support JavaScript alerts that are generated in a&#10;page's onload() event handler. In this case a visible dialog WILL be&#10;generated and Selenium will hang until someone manually clicks OK.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_buttons" func="yes">
			<Overload retVal="" descr='Returns the IDs of all buttons on the page.&#10;&#10;&#10;If a given button has no ID, it will appear as "" in this array.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_fields" func="yes">
			<Overload retVal="" descr='Returns the IDs of all input fields on the page.&#10;&#10;&#10;If a given field has no ID, it will appear as "" in this array.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_links" func="yes">
			<Overload retVal="" descr='Returns the IDs of all links on the page.&#10;&#10;&#10;If a given link has no ID, it will appear as "" in this array.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_window_ids" func="yes">
			<Overload retVal="" descr="Returns the IDs of all windows that the browser knows about.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_window_names" func="yes">
			<Overload retVal="" descr="Returns the names of all windows that the browser knows about.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_all_window_titles" func="yes">
			<Overload retVal="" descr="Returns the titles of all windows that the browser knows about.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_attribute" func="yes">
			<Overload retVal="" descr="Gets the value of an element attribute. The value of the attribute may&#10;differ across browsers (this is the case for the &quot;style&quot; attribute, for&#10;example).&#10;&#10;'attributeLocator' is an element locator followed by an @ sign and then the name of the attribute, e.g. &quot;foo@bar&quot;">
				<Param name="self" />
				<Param name="attributeLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_attribute_from_all_windows" func="yes">
			<Overload retVal="" descr="Returns every instance of some attribute from all known windows.&#10;&#10;'attributeName' is name of an attribute on the windows">
				<Param name="self" />
				<Param name="attributeName" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_body_text" func="yes">
			<Overload retVal="" descr="Gets the entire text of the page.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_boolean" />
		<KeyWord name="selenium.selenium.get_boolean_array" />
		<KeyWord name="selenium.selenium.get_confirmation" func="yes">
			<Overload retVal="" descr="Retrieves the message of a JavaScript confirmation dialog generated during&#10;the previous action.&#10;&#10;&#10;&#10;By default, the confirm function will return true, having the same effect&#10;as manually clicking OK. This can be changed by prior execution of the&#10;chooseCancelOnNextConfirmation command. &#10;&#10;&#10;&#10;If an confirmation is generated but you do not consume it with getConfirmation,&#10;the next Selenium action will fail.&#10;&#10;&#10;&#10;NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible&#10;dialog.&#10;&#10;&#10;&#10;NOTE: Selenium does NOT support JavaScript confirmations that are&#10;generated in a page's onload() event handler. In this case a visible&#10;dialog WILL be generated and Selenium will hang until you manually click&#10;OK.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_cookie" func="yes">
			<Overload retVal="" descr="Return all cookies of the current page under test.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_cookie_by_name" func="yes">
			<Overload retVal="" descr="Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.&#10;&#10;'name' is the name of the cookie">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_css_count" func="yes">
			<Overload retVal="" descr="Returns the number of nodes that match the specified css selector, eg. &quot;css=table&quot; would give&#10;the number of tables.&#10;&#10;'css' is the css selector to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.">
				<Param name="self" />
				<Param name="css" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_cursor_position" func="yes">
			<Overload retVal="" descr="Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.&#10;&#10;&#10;Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to&#10;return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.&#10;&#10;This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.&#10;&#10;'locator' is an element locator pointing to an input element or textarea">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_element_height" func="yes">
			<Overload retVal="" descr="Retrieves the height of an element&#10;&#10;'locator' is an element locator pointing to an element">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_element_index" func="yes">
			<Overload retVal="" descr="Get the relative index of an element to its parent (starting from 0). The comment node and empty text node&#10;will be ignored.&#10;&#10;'locator' is an element locator pointing to an element">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_element_position_left" func="yes">
			<Overload retVal="" descr="Retrieves the horizontal position of an element&#10;&#10;'locator' is an element locator pointing to an element OR an element itself">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_element_position_top" func="yes">
			<Overload retVal="" descr="Retrieves the vertical position of an element&#10;&#10;'locator' is an element locator pointing to an element OR an element itself">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_element_width" func="yes">
			<Overload retVal="" descr="Retrieves the width of an element&#10;&#10;'locator' is an element locator pointing to an element">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_eval" func="yes">
			<Overload retVal="" descr="Gets the result of evaluating the specified JavaScript snippet.  The snippet may&#10;have multiple lines, but only the result of the last line will be returned.&#10;&#10;&#10;Note that, by default, the snippet will run in the context of the &quot;selenium&quot;&#10;object itself, so ``this`` will refer to the Selenium object.  Use ``window`` to&#10;refer to the window of your application, e.g. ``window.document.getElementById('foo')``&#10;&#10;If you need to use&#10;a locator to refer to a single element in your application page, you can&#10;use ``this.browserbot.findElement(&quot;id=foo&quot;)`` where &quot;id=foo&quot; is your locator.&#10;&#10;&#10;'script' is the JavaScript snippet to run">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_expression" func="yes">
			<Overload retVal="" descr="Returns the specified expression.&#10;&#10;&#10;This is useful because of JavaScript preprocessing.&#10;It is used to generate commands like assertExpression and waitForExpression.&#10;&#10;&#10;'expression' is the value to return">
				<Param name="self" />
				<Param name="expression" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_html_source" func="yes">
			<Overload retVal="" descr='Returns the entire HTML source between the opening and&#10;closing "html" tags.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_location" func="yes">
			<Overload retVal="" descr="Gets the absolute URL of the current page.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_log" func="yes">
			<Overload retVal="" descr="Get RC logs associated with current session.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_mouse_speed" func="yes">
			<Overload retVal="" descr='Returns the number of pixels between "mousemove" events during dragAndDrop commands (default=10).'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_number" />
		<KeyWord name="selenium.selenium.get_number_array" />
		<KeyWord name="selenium.selenium.get_prompt" func="yes">
			<Overload retVal="" descr="Retrieves the message of a JavaScript question prompt dialog generated during&#10;the previous action.&#10;&#10;&#10;Successful handling of the prompt requires prior execution of the&#10;answerOnNextPrompt command. If a prompt is generated but you&#10;do not get/verify it, the next Selenium action will fail.&#10;&#10;NOTE: under Selenium, JavaScript prompts will NOT pop up a visible&#10;dialog.&#10;&#10;NOTE: Selenium does NOT support JavaScript prompts that are generated in a&#10;page's onload() event handler. In this case a visible dialog WILL be&#10;generated and Selenium will hang until someone manually clicks OK.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_select_options" func="yes">
			<Overload retVal="" descr="Gets all option labels in the specified select drop-down.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_id" func="yes">
			<Overload retVal="" descr="Gets option element ID for selected option in the specified select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_ids" func="yes">
			<Overload retVal="" descr="Gets all option element IDs for selected options in the specified select or multi-select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_index" func="yes">
			<Overload retVal="" descr="Gets option index (option number, starting at 0) for selected option in the specified select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_indexes" func="yes">
			<Overload retVal="" descr="Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_label" func="yes">
			<Overload retVal="" descr="Gets option label (visible text) for selected option in the specified select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_labels" func="yes">
			<Overload retVal="" descr="Gets all option labels (visible text) for selected options in the specified select or multi-select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_value" func="yes">
			<Overload retVal="" descr="Gets option value (value attribute) for selected option in the specified select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_selected_values" func="yes">
			<Overload retVal="" descr="Gets all option values (value attributes) for selected options in the specified select or multi-select element.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_speed" func="yes">
			<Overload retVal="" descr="Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,&#10;the delay is 0 milliseconds.&#10;&#10;See also setSpeed.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_string" />
		<KeyWord name="selenium.selenium.get_string_array" />
		<KeyWord name="selenium.selenium.get_table" func="yes">
			<Overload retVal="" descr="Gets the text from a cell of a table. The cellAddress syntax&#10;tableLocator.row.column, where row and column start at 0.&#10;&#10;'tableCellAddress' is a cell address, e.g. &quot;foo.1.4&quot;">
				<Param name="self" />
				<Param name="tableCellAddress" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_text" func="yes">
			<Overload retVal="" descr="Gets the text of an element. This works for any element that contains&#10;text. This command uses either the textContent (Mozilla-like browsers) or&#10;the innerText (IE-like browsers) of the element, which is the rendered&#10;text shown to the user.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_title" func="yes">
			<Overload retVal="" descr="Gets the title of the current page.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_value" func="yes">
			<Overload retVal="" descr="Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).&#10;For checkbox/radio elements, the value will be &quot;on&quot; or &quot;off&quot; depending on&#10;whether the element is checked or not.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_whether_this_frame_match_frame_expression" func="yes">
			<Overload retVal="" descr="Determine whether current/locator identify the frame containing this running code.&#10;&#10;&#10;This is useful in proxy injection mode, where this code runs in every&#10;browser frame and window, and sometimes the selenium server needs to identify&#10;the &quot;current&quot; frame.  In this case, when the test calls selectFrame, this&#10;routine is called for each frame to figure out which one has been selected.&#10;The selected frame will return true, while all others will return false.&#10;&#10;&#10;'currentFrameString' is starting frame&#10;'target' is new frame (which might be relative to the current one)">
				<Param name="self" />
				<Param name="currentFrameString" />
				<Param name="target" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_whether_this_window_match_window_expression" func="yes">
			<Overload retVal="" descr="Determine whether currentWindowString plus target identify the window containing this running code.&#10;&#10;&#10;This is useful in proxy injection mode, where this code runs in every&#10;browser frame and window, and sometimes the selenium server needs to identify&#10;the &quot;current&quot; window.  In this case, when the test calls selectWindow, this&#10;routine is called for each window to figure out which one has been selected.&#10;The selected window will return true, while all others will return false.&#10;&#10;&#10;'currentWindowString' is starting window&#10;'target' is new window (which might be relative to the current one, e.g., &quot;_parent&quot;)">
				<Param name="self" />
				<Param name="currentWindowString" />
				<Param name="target" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.get_xpath_count" func="yes">
			<Overload retVal="" descr="Returns the number of nodes that match the specified xpath, eg. &quot;//table&quot; would give&#10;the number of tables.&#10;&#10;'xpath' is the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.go_back" func="yes">
			<Overload retVal="" descr='Simulates the user clicking the "back" button on their browser.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.highlight" func="yes">
			<Overload retVal="" descr="Briefly changes the backgroundColor of the specified element yellow.  Useful for debugging.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.ignore_attributes_without_value" func="yes">
			<Overload retVal="" descr="Specifies whether Selenium will ignore xpath attributes that have no&#10;value, i.e. are the empty string, when using the non-native xpath&#10;evaluation engine. You'd want to do this for performance reasons in IE.&#10;However, this could break certain xpaths, for example an xpath that looks&#10;for an attribute whose value is NOT the empty string.&#10;&#10;The hope is that such xpaths are relatively rare, but the user should&#10;have the option of using them. Note that this only influences xpath&#10;evaluation when using the ajaxslt engine (i.e. not &quot;javascript-xpath&quot;).&#10;&#10;'ignore' is boolean, true means we'll ignore attributes without value                        at the expense of xpath &quot;correctness&quot;; false means                        we'll sacrifice speed for correctness.">
				<Param name="self" />
				<Param name="ignore" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_alert_present" func="yes">
			<Overload retVal="" descr="Has an alert occurred?&#10;&#10;&#10;&#10;This function never throws an exception">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_checked" func="yes">
			<Overload retVal="" descr="Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.&#10;&#10;'locator' is an element locator pointing to a checkbox or radio button">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_confirmation_present" func="yes">
			<Overload retVal="" descr="Has confirm() been called?&#10;&#10;&#10;&#10;This function never throws an exception">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_cookie_present" func="yes">
			<Overload retVal="" descr="Returns true if a cookie with the specified name is present, or false otherwise.&#10;&#10;'name' is the name of the cookie">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_editable" func="yes">
			<Overload retVal="" descr="Determines whether the specified input element is editable, ie hasn't been disabled.&#10;This method will fail if the specified element isn't an input element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_element_present" func="yes">
			<Overload retVal="" descr="Verifies that the specified element is somewhere on the page.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_ordered" func="yes">
			<Overload retVal="" descr="Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will&#10;not be considered ordered.&#10;&#10;'locator1' is an element locator pointing to the first element&#10;'locator2' is an element locator pointing to the second element">
				<Param name="self" />
				<Param name="locator1" />
				<Param name="locator2" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_prompt_present" func="yes">
			<Overload retVal="" descr="Has a prompt occurred?&#10;&#10;&#10;&#10;This function never throws an exception">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_something_selected" func="yes">
			<Overload retVal="" descr="Determines whether some option in a drop-down menu is selected.&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu">
				<Param name="self" />
				<Param name="selectLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_text_present" func="yes">
			<Overload retVal="" descr="Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.&#10;&#10;'pattern' is a pattern to match with the text of the page">
				<Param name="self" />
				<Param name="pattern" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.is_visible" func="yes">
			<Overload retVal="" descr="Determines if the specified element is visible. An&#10;element can be rendered invisible by setting the CSS &quot;visibility&quot;&#10;property to &quot;hidden&quot;, or the &quot;display&quot; property to &quot;none&quot;, either for the&#10;element itself or one if its ancestors.  This method will fail if&#10;the element is not present.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_down" func="yes">
			<Overload retVal="" descr="Simulates a user pressing a key (without releasing it yet).&#10;&#10;'locator' is an element locator&#10;'keySequence' is Either be a string(&quot;&quot; followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: &quot;w&quot;, &quot;    9&quot;.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="keySequence" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_down_native" func="yes">
			<Overload retVal="" descr="Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke.&#10;This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing&#10;a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and&#10;metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular&#10;element, focus on the element first before running this command.&#10;&#10;'keycode' is an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!">
				<Param name="self" />
				<Param name="keycode" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_press" func="yes">
			<Overload retVal="" descr="Simulates a user pressing and releasing a key.&#10;&#10;'locator' is an element locator&#10;'keySequence' is Either be a string(&quot;&quot; followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: &quot;w&quot;, &quot;    9&quot;.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="keySequence" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_press_native" func="yes">
			<Overload retVal="" descr="Simulates a user pressing and releasing a key by sending a native operating system keystroke.&#10;This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing&#10;a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and&#10;metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular&#10;element, focus on the element first before running this command.&#10;&#10;'keycode' is an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!">
				<Param name="self" />
				<Param name="keycode" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_up" func="yes">
			<Overload retVal="" descr="Simulates a user releasing a key.&#10;&#10;'locator' is an element locator&#10;'keySequence' is Either be a string(&quot;&quot; followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: &quot;w&quot;, &quot;    9&quot;.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="keySequence" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.key_up_native" func="yes">
			<Overload retVal="" descr="Simulates a user releasing a key by sending a native operating system keystroke.&#10;This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing&#10;a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and&#10;metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular&#10;element, focus on the element first before running this command.&#10;&#10;'keycode' is an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!">
				<Param name="self" />
				<Param name="keycode" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.meta_key_down" func="yes">
			<Overload retVal="" descr="Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.meta_key_up" func="yes">
			<Overload retVal="" descr="Release the meta key.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_down" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the left mouse button (without releasing it yet) on&#10;the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_down_at" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the left mouse button (without releasing it yet) at&#10;the specified location.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_down_right" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the right mouse button (without releasing it yet) on&#10;the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_down_right_at" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the right mouse button (without releasing it yet) at&#10;the specified location.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_move" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the mouse button (without releasing it yet) on&#10;the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_move_at" func="yes">
			<Overload retVal="" descr="Simulates a user pressing the mouse button (without releasing it yet) on&#10;the specified element.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_out" func="yes">
			<Overload retVal="" descr="Simulates a user moving the mouse pointer away from the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_over" func="yes">
			<Overload retVal="" descr="Simulates a user hovering a mouse over the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_up" func="yes">
			<Overload retVal="" descr="Simulates the event that occurs when the user releases the mouse button (i.e., stops&#10;holding the button down) on the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_up_at" func="yes">
			<Overload retVal="" descr="Simulates the event that occurs when the user releases the mouse button (i.e., stops&#10;holding the button down) at the specified location.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_up_right" func="yes">
			<Overload retVal="" descr="Simulates the event that occurs when the user releases the right mouse button (i.e., stops&#10;holding the button down) on the specified element.&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.mouse_up_right_at" func="yes">
			<Overload retVal="" descr="Simulates the event that occurs when the user releases the right mouse button (i.e., stops&#10;holding the button down) at the specified location.&#10;&#10;'locator' is an element locator&#10;'coordString' is specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="coordString" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.open" func="yes">
			<Overload retVal="" descr="Opens an URL in the test frame. This accepts both relative and absolute&#10;URLs.&#10;&#10;The &quot;open&quot; command waits for the page to load before proceeding,&#10;ie. the &quot;AndWait&quot; suffix is implicit.&#10;&#10;\ *Note*: The URL must be on the same domain as the runner HTML&#10;due to security restrictions in the browser (Same Origin Policy). If you&#10;need to open an URL on another domain, use the Selenium Server to start a&#10;new browser session on that domain.&#10;&#10;'url' is the URL to open; may be relative or absolute&#10;'ignoreResponseCode' if set to true: doesnt send ajax HEAD/GET request; if set to false: sends ajax HEAD/GET request to the url and reports error code if any as response to open.">
				<Param name="self" />
				<Param name="url" />
				<Param name="[ignoreResponseCode=True]" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.open_window" func="yes">
			<Overload retVal="" descr="Opens a popup window (if a window with that ID isn't already open).&#10;After opening the window, you'll need to select it using the selectWindow&#10;command.&#10;&#10;&#10;This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the &quot;onLoad&quot; event, for example).&#10;In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using&#10;an empty (blank) url, like this: openWindow(&quot;&quot;, &quot;myFunnyWindow&quot;).&#10;&#10;&#10;'url' is the URL to open, which can be blank&#10;'windowID' is the JavaScript window ID of the window to select">
				<Param name="self" />
				<Param name="url" />
				<Param name="windowID" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.refresh" func="yes">
			<Overload retVal="" descr='Simulates the user clicking the "Refresh" button on their browser.'>
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.remove_all_selections" func="yes">
			<Overload retVal="" descr="Unselects all of the selected options in a multi-select element.&#10;&#10;'locator' is an element locator identifying a multi-select box">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.remove_script" func="yes">
			<Overload retVal="" descr="Removes a script tag from the Selenium document identified by the given&#10;id. Does nothing if the referenced tag doesn't exist.&#10;&#10;'scriptTagId' is the id of the script element to remove.">
				<Param name="self" />
				<Param name="scriptTagId" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.remove_selection" func="yes">
			<Overload retVal="" descr="Remove a selection from the set of selected options in a multi-select element using an option locator.&#10;&#10;@see #doSelect for details of option locators&#10;&#10;'locator' is an element locator identifying a multi-select box&#10;'optionLocator' is an option locator (a label by default)">
				<Param name="self" />
				<Param name="locator" />
				<Param name="optionLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.retrieve_last_remote_control_logs" func="yes">
			<Overload retVal="" descr="Retrieve the last messages logged on a specific remote control. Useful for error reports, especially&#10;when running multiple remote controls in a distributed environment. The maximum number of log messages&#10;that can be retrieve is configured on remote control startup.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.rollup" func="yes">
			<Overload retVal="" descr="Executes a command rollup, which is a series of commands with a unique&#10;name, and optionally arguments that control the generation of the set of&#10;commands. If any one of the rolled-up commands fails, the rollup is&#10;considered to have failed. Rollups may also contain nested rollups.&#10;&#10;'rollupName' is the name of the rollup command&#10;'kwargs' is keyword arguments string that influences how the                    rollup expands into commands">
				<Param name="self" />
				<Param name="rollupName" />
				<Param name="kwargs" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.run_script" func="yes">
			<Overload retVal="" descr="Creates a new &quot;script&quot; tag in the body of the current test window, and &#10;adds the specified text into the body of the command.  Scripts run in&#10;this way can often be debugged more easily than scripts executed using&#10;Selenium's &quot;getEval&quot; command.  Beware that JS exceptions thrown in these script&#10;tags aren't managed by Selenium, so you should probably wrap your script&#10;in try/catch blocks if there is any chance that the script will throw&#10;an exception.&#10;&#10;'script' is the JavaScript snippet to run">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.select" func="yes">
			<Overload retVal="" descr="Select an option from a drop-down using an option locator.&#10;&#10;&#10;&#10;Option locators provide different ways of specifying options of an HTML&#10;Select element (e.g. for selecting a specific option, or for asserting&#10;that the selected option satisfies a specification). There are several&#10;forms of Select Option Locator.&#10;&#10;&#10;*   \ **label**\ =\ *labelPattern*:&#10;    matches options based on their labels, i.e. the visible text. (This&#10;    is the default.)&#10;    &#10;    *   label=regexp:^[Oo]ther&#10;    &#10;    &#10;*   \ **value**\ =\ *valuePattern*:&#10;    matches options based on their values.&#10;    &#10;    *   value=other&#10;    &#10;    &#10;*   \ **id**\ =\ *id*:&#10;    &#10;    matches options based on their ids.&#10;    &#10;    *   id=option1&#10;    &#10;    &#10;*   \ **index**\ =\ *index*:&#10;    matches an option based on its index (offset from zero).&#10;    &#10;    *   index=2&#10;    &#10;    &#10;&#10;&#10;&#10;If no option locator prefix is provided, the default behaviour is to match on \ **label**\ .&#10;&#10;&#10;&#10;'selectLocator' is an element locator identifying a drop-down menu&#10;'optionLocator' is an option locator (a label by default)">
				<Param name="self" />
				<Param name="selectLocator" />
				<Param name="optionLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.select_frame" func="yes">
			<Overload retVal="" descr="Selects a frame within the current window.  (You may invoke this command&#10;multiple times to select nested frames.)  To select the parent frame, use&#10;&quot;relative=parent&quot; as a locator; to select the top frame, use &quot;relative=top&quot;.&#10;You can also select a frame by its 0-based index number; select the first frame with&#10;&quot;index=0&quot;, or the third frame with &quot;index=2&quot;.&#10;&#10;&#10;You may also use a DOM expression to identify the frame you want directly,&#10;like this: ``dom=frames[&quot;main&quot;].frames[&quot;subframe&quot;]``&#10;&#10;&#10;'locator' is an element locator identifying a frame or iframe">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.select_pop_up" func="yes">
			<Overload retVal="" descr="Simplifies the process of selecting a popup window (and does not offer&#10;functionality beyond what ``selectWindow()`` already provides).&#10;&#10;*   If ``windowID`` is either not specified, or specified as&#10;    &quot;null&quot;, the first non-top window is selected. The top window is the one&#10;    that would be selected by ``selectWindow()`` without providing a&#10;    ``windowID`` . This should not be used when more than one popup&#10;    window is in play.&#10;*   Otherwise, the window will be looked up considering&#10;    ``windowID`` as the following in order: 1) the &quot;name&quot; of the&#10;    window, as specified to ``window.open()``; 2) a javascript&#10;    variable which is a reference to a window; and 3) the title of the&#10;    window. This is the same ordered lookup performed by&#10;    ``selectWindow`` .&#10;&#10;&#10;&#10;'windowID' is an identifier for the popup window, which can take on a                  number of different meanings">
				<Param name="self" />
				<Param name="windowID" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.select_window" func="yes">
			<Overload retVal="" descr="Selects a popup window using a window locator; once a popup window has been selected, all&#10;commands go to that window. To select the main window again, use null&#10;as the target.&#10;&#10;&#10;&#10;&#10;Window locators provide different ways of specifying the window object:&#10;by title, by internal JavaScript &quot;name,&quot; or by JavaScript variable.&#10;&#10;&#10;*   \ **title**\ =\ *My Special Window*:&#10;    Finds the window using the text that appears in the title bar.  Be careful;&#10;    two windows can share the same title.  If that happens, this locator will&#10;    just pick one.&#10;    &#10;*   \ **name**\ =\ *myWindow*:&#10;    Finds the window using its internal JavaScript &quot;name&quot; property.  This is the second &#10;    parameter &quot;windowName&quot; passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)&#10;    (which Selenium intercepts).&#10;    &#10;*   \ **var**\ =\ *variableName*:&#10;    Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current&#10;    application window, e.g. &quot;window.foo = window.open(url);&quot;.  In those cases, you can open the window using&#10;    &quot;var=foo&quot;.&#10;    &#10;&#10;&#10;&#10;If no window locator prefix is provided, we'll try to guess what you mean like this:&#10;&#10;1.) if windowID is null, (or the string &quot;null&quot;) then it is assumed the user is referring to the original window instantiated by the browser).&#10;&#10;2.) if the value of the &quot;windowID&quot; parameter is a JavaScript variable name in the current application window, then it is assumed&#10;that this variable contains the return value from a call to the JavaScript window.open() method.&#10;&#10;3.) Otherwise, selenium looks in a hash it maintains that maps string names to window &quot;names&quot;.&#10;&#10;4.) If \ *that* fails, we'll try looping over all of the known windows to try to find the appropriate &quot;title&quot;.&#10;Since &quot;title&quot; is not necessarily unique, this may have unexpected behavior.&#10;&#10;If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages&#10;which identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages&#10;like the following for each window as it is opened:&#10;&#10;``debug: window.open call intercepted; window ID (which you can use with selectWindow()) is &quot;myNewWindow&quot;``&#10;&#10;In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the &quot;onLoad&quot; event, for example).&#10;(This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using&#10;an empty (blank) url, like this: openWindow(&quot;&quot;, &quot;myFunnyWindow&quot;).&#10;&#10;&#10;'windowID' is the JavaScript window ID of the window to select">
				<Param name="self" />
				<Param name="windowID" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.setExtensionJs" />
		<KeyWord name="selenium.selenium.set_browser_log_level" func="yes">
			<Overload retVal="" descr="Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.&#10;Valid logLevel strings are: &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot; or &quot;off&quot;.&#10;To see the browser logs, you need to&#10;either show the log window in GUI mode, or enable browser-side logging in Selenium RC.&#10;&#10;'logLevel' is one of the following: &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot; or &quot;off&quot;">
				<Param name="self" />
				<Param name="logLevel" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.set_context" func="yes">
			<Overload retVal="" descr="Writes a message to the status bar and adds a note to the browser-side&#10;log.&#10;&#10;'context' is the message to be sent to the browser">
				<Param name="self" />
				<Param name="context" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.set_cursor_position" func="yes">
			<Overload retVal="" descr="Moves the text cursor to the specified position in the given input element or textarea.&#10;This method will fail if the specified element isn't an input element or textarea.&#10;&#10;'locator' is an element locator pointing to an input element or textarea&#10;'position' is the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field.  You can also set the cursor to -1 to move it to the end of the field.">
				<Param name="self" />
				<Param name="locator" />
				<Param name="position" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.set_mouse_speed" func="yes">
			<Overload retVal="" descr="Configure the number of pixels between &quot;mousemove&quot; events during dragAndDrop commands (default=10).&#10;&#10;Setting this value to 0 means that we'll send a &quot;mousemove&quot; event to every single pixel&#10;in between the start location and the end location; that can be very slow, and may&#10;cause some browsers to force the JavaScript to timeout.&#10;&#10;If the mouse speed is greater than the distance between the two dragged objects, we'll&#10;just send one &quot;mousemove&quot; at the start location and then one final one at the end location.&#10;&#10;&#10;'pixels' is the number of pixels between &quot;mousemove&quot; events">
				<Param name="self" />
				<Param name="pixels" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.set_speed" func="yes">
			<Overload retVal="" descr="Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,&#10;the delay is 0 milliseconds.&#10;&#10;'value' is the number of milliseconds to pause after operation">
				<Param name="self" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.set_timeout" func="yes">
			<Overload retVal="" descr="Specifies the amount of time that Selenium will wait for actions to complete.&#10;&#10;&#10;Actions that require waiting include &quot;open&quot; and the &quot;waitFor\*&quot; actions.&#10;&#10;The default timeout is 30 seconds.&#10;&#10;'timeout' is a timeout in milliseconds, after which the action will return with an error">
				<Param name="self" />
				<Param name="timeout" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.shift_key_down" func="yes">
			<Overload retVal="" descr="Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.shift_key_up" func="yes">
			<Overload retVal="" descr="Release the shift key.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.shut_down_selenium_server" func="yes">
			<Overload retVal="" descr="Kills the running Selenium Server and all browser sessions.  After you run this command, you will no longer be able to send&#10;commands to the server; you can't remotely start the server once it has been stopped.  Normally&#10;you should prefer to run the &quot;stop&quot; command, which terminates the current browser session, rather than &#10;shutting down the entire server.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.start" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[browserConfigurationOptions=None" />
				<Param name="[driver=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.stop" />
		<KeyWord name="selenium.selenium.submit" func="yes">
			<Overload retVal="" descr="Submit the specified form. This is particularly useful for forms without&#10;submit buttons, e.g. single-input &quot;Search&quot; forms.&#10;&#10;'formLocator' is an element locator for the form you want to submit">
				<Param name="self" />
				<Param name="formLocator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.type" func="yes">
			<Overload retVal="" descr="Sets the value of an input field, as though you typed it in.&#10;&#10;&#10;Can also be used to set the value of combo boxes, check boxes, etc. In these cases,&#10;value should be the value of the option selected, not the visible text.&#10;&#10;&#10;'locator' is an element locator&#10;'value' is the value to type">
				<Param name="self" />
				<Param name="locator" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.type_keys" func="yes">
			<Overload retVal="" descr="Simulates keystroke events on the specified element, as though you typed the value key-by-key.&#10;&#10;&#10;This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string;&#10;this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.&#10;&#10;Unlike the simple &quot;type&quot; command, which forces the specified value into the page directly, this command&#10;may or may not have any visible effect, even in cases where typing keys would normally have a visible effect.&#10;For example, if you use &quot;typeKeys&quot; on a form element, you may or may not see the results of what you typed in&#10;the field.&#10;&#10;In some cases, you may need to use the simple &quot;type&quot; command to set the value of the field and then the &quot;typeKeys&quot; command to&#10;send the keystroke events corresponding to what you just typed.&#10;&#10;&#10;'locator' is an element locator&#10;'value' is the value to type">
				<Param name="self" />
				<Param name="locator" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.uncheck" func="yes">
			<Overload retVal="" descr="Uncheck a toggle-button (checkbox/radio)&#10;&#10;'locator' is an element locator">
				<Param name="self" />
				<Param name="locator" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.use_xpath_library" func="yes">
			<Overload retVal="" descr="Allows choice of one of the available libraries.&#10;&#10;'libraryName' is name of the desired library Only the following three can be chosen: &#10;*   &quot;ajaxslt&quot; - Google's library&#10;*   &quot;javascript-xpath&quot; - Cybozu Labs' faster library&#10;*   &quot;default&quot; - The default library.  Currently the default library is &quot;ajaxslt&quot; .&#10;&#10; If libraryName isn't one of these three, then  no change will be made.">
				<Param name="self" />
				<Param name="libraryName" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.wait_for_condition" func="yes">
			<Overload retVal="" descr="Runs the specified JavaScript snippet repeatedly until it evaluates to &quot;true&quot;.&#10;The snippet may have multiple lines, but only the result of the last line&#10;will be considered.&#10;&#10;&#10;Note that, by default, the snippet will be run in the runner's test window, not in the window&#10;of your application.  To get the window of your application, you can use&#10;the JavaScript snippet ``selenium.browserbot.getCurrentWindow()``, and then&#10;run your JavaScript in there&#10;&#10;&#10;'script' is the JavaScript snippet to run&#10;'timeout' is a timeout in milliseconds, after which this command will return with an error">
				<Param name="self" />
				<Param name="script" />
				<Param name="timeout" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.wait_for_frame_to_load" func="yes">
			<Overload retVal="" descr="Waits for a new frame to load.&#10;&#10;&#10;Selenium constantly keeps track of new pages and frames loading, &#10;and sets a &quot;newPageLoaded&quot; flag when it first notices a page load.&#10;&#10;&#10;See waitForPageToLoad for more information.&#10;&#10;'frameAddress' is FrameAddress from the server side&#10;'timeout' is a timeout in milliseconds, after which this command will return with an error">
				<Param name="self" />
				<Param name="frameAddress" />
				<Param name="timeout" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.wait_for_page_to_load" func="yes">
			<Overload retVal="" descr="Waits for a new page to load.&#10;&#10;&#10;You can use this command instead of the &quot;AndWait&quot; suffixes, &quot;clickAndWait&quot;, &quot;selectAndWait&quot;, &quot;typeAndWait&quot; etc.&#10;(which are only available in the JS API).&#10;&#10;Selenium constantly keeps track of new pages loading, and sets a &quot;newPageLoaded&quot;&#10;flag when it first notices a page load.  Running any other Selenium command after&#10;turns the flag to false.  Hence, if you want to wait for a page to load, you must&#10;wait immediately after a Selenium command that caused a page-load.&#10;&#10;&#10;'timeout' is a timeout in milliseconds, after which this command will return with an error">
				<Param name="self" />
				<Param name="timeout" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.wait_for_pop_up" func="yes">
			<Overload retVal="" descr="Waits for a popup window to appear and load up.&#10;&#10;'windowID' is the JavaScript window &quot;name&quot; of the window that will appear (not the text of the title bar)                 If unspecified, or specified as &quot;null&quot;, this command will                 wait for the first non-top window to appear (don't rely                 on this if you are working with multiple popups                 simultaneously).&#10;'timeout' is a timeout in milliseconds, after which the action will return with an error.                If this value is not specified, the default Selenium                timeout will be used. See the setTimeout() command.">
				<Param name="self" />
				<Param name="windowID" />
				<Param name="timeout" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.window_focus" func="yes">
			<Overload retVal="" descr="Gives focus to the currently selected window">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="selenium.selenium.window_maximize" func="yes">
			<Overload retVal="" descr="Resize currently selected window to take up the entire screen">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="send" func="yes">
			<Overload retVal="" descr="Function of GeneratorType">
			</Overload>
		</KeyWord>
		<KeyWord name="send_keys" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="send_keys_to_element" func="yes">
			<Overload retVal="" descr="Function of ActionChains">
			</Overload>
		</KeyWord>
		<KeyWord name="send_signal" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="set" func="yes">
			<Overload retVal="" descr="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object&#10;&#10;Build an unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="setExtensionJs" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="setUp" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="setUpClass" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="set_browser_log_level" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_context" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_cursor_position" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_mouse_speed" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="set_preference" func="yes">
			<Overload retVal="" descr="Function of FirefoxProfile">
			</Overload>
		</KeyWord>
		<KeyWord name="set_proxy" func="yes">
			<Overload retVal="" descr="Function of FirefoxProfile">
			</Overload>
		</KeyWord>
		<KeyWord name="set_script_timeout" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="set_speed" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_timeout" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="set_window_position" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="set_window_size" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="setattr" func="yes">
			<Overload retVal="" descr="setattr(object, name, value)&#10;&#10;Set a named attribute on an object; setattr(x, 'y', v) is equivalent to&#10;``x.y = v''.">
			</Overload>
		</KeyWord>
		<KeyWord name="setbusywaitinterval" func="yes">
			<Overload retVal="" descr="Function of tkinter">
			</Overload>
		</KeyWord>
		<KeyWord name="setcheckinterval" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="setdefaultencoding" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setprofile" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setrecursionlimit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setter" func="yes">
			<Overload retVal="" descr="Descriptor to change the setter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="settrace" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="shift_key_down" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="shift_key_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="shortDescription" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="should_wrap" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="showerror" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="showinfo" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="showwarning" func="yes">
			<Overload retVal="" descr="Function of tkMessageBox">
			</Overload>
		</KeyWord>
		<KeyWord name="shut_down_selenium_server" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="skip" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="skipIf" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="skipTest" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="skipUnless" func="yes">
			<Overload retVal="" descr="Function of unittest">
			</Overload>
		</KeyWord>
		<KeyWord name="sleep" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="slice" func="yes">
			<Overload retVal="" descr="slice([start,] stop[, step])&#10;&#10;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
			</Overload>
		</KeyWord>
		<KeyWord name="sort" func="yes">
			<Overload retVal="" descr="L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;&#10;cmp(x, y) -&gt; -1, 0, 1">
			</Overload>
		</KeyWord>
		<KeyWord name="sortTestMethodsUsing" func="yes">
			<Overload retVal="" descr="Function of unittest.TestLoader">
			</Overload>
		</KeyWord>
		<KeyWord name="sorted" func="yes">
			<Overload retVal="" descr="sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnl" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnle" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnve" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="split" func="yes">
			<Overload retVal="" descr="S.split([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string.  If maxsplit is given, at most maxsplit&#10;splits are done. If sep is not specified or is None, any&#10;whitespace string is a separator and empty strings are removed&#10;from the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="splitfields" func="yes">
			<Overload retVal="" descr="Function of string">
			</Overload>
		</KeyWord>
		<KeyWord name="splitlines" func="yes">
			<Overload retVal="" descr="B.splitlines([keepends]) -&gt; list of lines&#10;&#10;Return a list of the lines in B, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="start" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="startTest" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="startTestRun" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="start_client" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="start_session" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="startfile" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="stat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="stat_float_times" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="staticmethod" func="yes">
			<Overload retVal="" descr="staticmethod(function) -&gt; method&#10;&#10;Convert a function to be a static method.&#10;&#10;A static method does not receive an implicit first argument.&#10;To declare a static method, use this idiom:&#10;&#10;     class C:&#10;     def f(arg1, arg2, ...): ...&#10;     f = staticmethod(f)&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;&#10;Static methods in Python are similar to those found in Java or C++.&#10;For a more advanced concept, see the classmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="step" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="step_matcher" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="stop" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="stopTest" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="stopTestRun" func="yes">
			<Overload retVal="" descr="Function of unittest.TestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="stop_client" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="str" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="strerror" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="strftime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="string" func="yes">
			<Overload retVal="" descr="A collection of string operations (most are no longer used).&#10;&#10;Warning: most of the code you see here isn't normally used nowadays.&#10;Beginning with Python 1.6, many of these functions are implemented as&#10;methods on the standard string object. They used to be implemented by&#10;a built-in module called strop, but strop is now obsolete itself.&#10;&#10;Public module variables:&#10;&#10;whitespace -- a string containing all characters considered whitespace&#10;lowercase -- a string containing all characters considered lowercase letters&#10;uppercase -- a string containing all characters considered uppercase letters&#10;letters -- a string containing all characters considered letters&#10;digits -- a string containing all characters considered decimal digits&#10;hexdigits -- a string containing all characters considered hexadecimal digits&#10;octdigits -- a string containing all characters considered octal digits&#10;punctuation -- a string containing all characters considered punctuation&#10;printable -- a string containing all characters considered printable">
			</Overload>
		</KeyWord>
		<KeyWord name="string.Formatter" />
		<KeyWord name="string.Formatter.check_unused_args" />
		<KeyWord name="string.Formatter.convert_field" />
		<KeyWord name="string.Formatter.format" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="format_string" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.Formatter.format_field" />
		<KeyWord name="string.Formatter.get_field" />
		<KeyWord name="string.Formatter.get_value" />
		<KeyWord name="string.Formatter.parse" />
		<KeyWord name="string.Formatter.vformat" />
		<KeyWord name="string.Template" func="yes">
			<Overload retVal="" descr="(_TemplateMetaclass)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.ascii_letters" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.ascii_lowercase" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.ascii_uppercase" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atof" func="yes">
			<Overload retVal="" descr="atof(s) -&gt; float&#10;&#10;Return the floating point number represented by the string s.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.atof_error" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atof_error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atof_error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atoi" func="yes">
			<Overload retVal="" descr="atoi(s [,base]) -&gt; int&#10;&#10;Return the integer represented by the string s in the given&#10;base, which defaults to 10.  The string s must consist of one&#10;or more digits, possibly preceded by a sign.  If base is 0, it&#10;is chosen from the leading characters of s, 0 for octal, 0x or&#10;0X for hexadecimal.  If base is 16, a preceding 0x or 0X is&#10;accepted.">
				<Param name="s" />
				<Param name="[base=10]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.atoi_error" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atoi_error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atoi_error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atol" func="yes">
			<Overload retVal="" descr="atol(s [,base]) -&gt; long&#10;&#10;Return the long integer represented by the string s in the&#10;given base, which defaults to 10.  The string s must consist&#10;of one or more digits, possibly preceded by a sign.  If base&#10;is 0, it is chosen from the leading characters of s, 0 for&#10;octal, 0x or 0X for hexadecimal.  If base is 16, a preceding&#10;0x or 0X is accepted.  A trailing L or l is not accepted,&#10;unless base is 0.">
				<Param name="s" />
				<Param name="[base=10]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.atol_error" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atol_error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.atol_error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.capitalize" func="yes">
			<Overload retVal="" descr="capitalize(s) -&gt; string&#10;&#10;Return a copy of the string s with only its first character&#10;capitalized.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.capwords" func="yes">
			<Overload retVal="" descr="capwords(s [,sep]) -&gt; string&#10;&#10;Split the argument into words using split, capitalize each&#10;word using capitalize, and join the capitalized words using&#10;join.  If the optional second argument sep is absent or None,&#10;runs of whitespace characters are replaced by a single space&#10;and leading and trailing whitespace are removed, otherwise&#10;sep is used to split and join the words.">
				<Param name="s" />
				<Param name="[sep=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.center" func="yes">
			<Overload retVal="" descr="center(s, width[, fillchar]) -&gt; string&#10;&#10;Return a center version of s, in a field of the specified&#10;width. padded with spaces as needed.  The string is never&#10;truncated.  If specified the fillchar is used instead of spaces.">
				<Param name="s" />
				<Param name="width" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.count" func="yes">
			<Overload retVal="" descr="count(s, sub[, start[,end]]) -&gt; int&#10;&#10;Return the number of occurrences of substring sub in string&#10;s[start:end].  Optional arguments start and end are&#10;interpreted as in slice notation.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.digits" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.expandtabs" func="yes">
			<Overload retVal="" descr="expandtabs(s [,tabsize]) -&gt; string&#10;&#10;Return a copy of the string s with all tab characters replaced&#10;by the appropriate number of spaces, depending on the current&#10;column, and the tabsize (default 8).">
				<Param name="s" />
				<Param name="[tabsize=8]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.find" func="yes">
			<Overload retVal="" descr="find(s, sub [,start [,end]]) -&gt; in&#10;&#10;Return the lowest index in s where substring sub is found,&#10;such that sub is contained within s[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.hexdigits" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.index" func="yes">
			<Overload retVal="" descr="index(s, sub [,start [,end]]) -&gt; int&#10;&#10;Like find but raises ValueError when the substring is not found.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.index_error" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="string.index_error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.index_error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.join" func="yes">
			<Overload retVal="" descr="join(list [,sep]) -&gt; string&#10;&#10;Return a string composed of the words in list, with&#10;intervening occurrences of sep.  The default separator is a&#10;single space.&#10;&#10;(joinfields and join are synonymous)">
				<Param name="words" />
				<Param name="[sep= ]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.joinfields" func="yes">
			<Overload retVal="" descr="join(list [,sep]) -&gt; string&#10;&#10;Return a string composed of the words in list, with&#10;intervening occurrences of sep.  The default separator is a&#10;single space.&#10;&#10;(joinfields and join are synonymous)">
				<Param name="words" />
				<Param name="[sep= ]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.letters" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.ljust" func="yes">
			<Overload retVal="" descr="ljust(s, width[, fillchar]) -&gt; string&#10;&#10;Return a left-justified version of s, in a field of the&#10;specified width, padded with spaces as needed.  The string is&#10;never truncated.  If specified the fillchar is used instead of spaces.">
				<Param name="s" />
				<Param name="width" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.lower" func="yes">
			<Overload retVal="" descr="lower(s) -&gt; string&#10;&#10;Return a copy of the string s converted to lowercase.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.lowercase" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.lstrip" func="yes">
			<Overload retVal="" descr="lstrip(s [,chars]) -&gt; string&#10;&#10;Return a copy of the string s with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.">
				<Param name="s" />
				<Param name="[chars=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.maketrans" func="yes">
			<Overload retVal="" descr="maketrans(frm, to) -&gt; string&#10;&#10;Return a translation table (a string of 256 bytes long)&#10;suitable for use in string.translate.  The strings frm and to&#10;must be of the same length.">
			</Overload>
		</KeyWord>
		<KeyWord name="string.octdigits" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.printable" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.punctuation" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.replace" func="yes">
			<Overload retVal="" descr="replace (str, old, new[, maxreplace]) -&gt; string&#10;&#10;Return a copy of string str with all occurrences of substring&#10;old replaced by new. If the optional argument maxreplace is&#10;given, only the first maxreplace occurrences are replaced.">
				<Param name="s" />
				<Param name="old" />
				<Param name="new" />
				<Param name="[maxreplace=-1]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.rfind" func="yes">
			<Overload retVal="" descr="rfind(s, sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in s where substring sub is found,&#10;such that sub is contained within s[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.rindex" func="yes">
			<Overload retVal="" descr="rindex(s, sub [,start [,end]]) -&gt; int&#10;&#10;Like rfind but raises ValueError when the substring is not found.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.rjust" func="yes">
			<Overload retVal="" descr="rjust(s, width[, fillchar]) -&gt; string&#10;&#10;Return a right-justified version of s, in a field of the&#10;specified width, padded with spaces as needed.  The string is&#10;never truncated.  If specified the fillchar is used instead of spaces.">
				<Param name="s" />
				<Param name="width" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.rsplit" func="yes">
			<Overload retVal="" descr="rsplit(s [,sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string s, using sep as the&#10;delimiter string, starting at the end of the string and working&#10;to the front.  If maxsplit is given, at most maxsplit splits are&#10;done. If sep is not specified or is None, any whitespace string&#10;is a separator.">
				<Param name="s" />
				<Param name="[sep=None" />
				<Param name="[maxsplit=-1]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.rstrip" func="yes">
			<Overload retVal="" descr="rstrip(s [,chars]) -&gt; string&#10;&#10;Return a copy of the string s with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.">
				<Param name="s" />
				<Param name="[chars=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.split" func="yes">
			<Overload retVal="" descr="split(s [,sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string s, using sep as the&#10;delimiter string.  If maxsplit is given, splits at no more than&#10;maxsplit places (resulting in at most maxsplit+1 words).  If sep&#10;is not specified or is None, any whitespace string is a separator.&#10;&#10;(split and splitfields are synonymous)">
				<Param name="s" />
				<Param name="[sep=None" />
				<Param name="[maxsplit=-1]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.splitfields" func="yes">
			<Overload retVal="" descr="split(s [,sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string s, using sep as the&#10;delimiter string.  If maxsplit is given, splits at no more than&#10;maxsplit places (resulting in at most maxsplit+1 words).  If sep&#10;is not specified or is None, any whitespace string is a separator.&#10;&#10;(split and splitfields are synonymous)">
				<Param name="s" />
				<Param name="[sep=None" />
				<Param name="[maxsplit=-1]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.strip" func="yes">
			<Overload retVal="" descr="strip(s [,chars]) -&gt; string&#10;&#10;Return a copy of the string s with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping.">
				<Param name="s" />
				<Param name="[chars=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.swapcase" func="yes">
			<Overload retVal="" descr="swapcase(s) -&gt; string&#10;&#10;Return a copy of the string s with upper case characters&#10;converted to lowercase and vice versa.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.translate" func="yes">
			<Overload retVal="" descr="translate(s,table [,deletions]) -&gt; string&#10;&#10;Return a copy of the string s, where all characters occurring&#10;in the optional argument deletions are removed, and the&#10;remaining characters have been mapped through the given&#10;translation table, which must be a string of length 256.  The&#10;deletions argument is not allowed for Unicode strings.">
				<Param name="s" />
				<Param name="table" />
				<Param name="[deletions]" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.upper" func="yes">
			<Overload retVal="" descr="upper(s) -&gt; string&#10;&#10;Return a copy of the string s converted to uppercase.">
				<Param name="s" />
			</Overload>
		</KeyWord>
		<KeyWord name="string.uppercase" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.whitespace" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="string.zfill" func="yes">
			<Overload retVal="" descr="zfill(x, width) -&gt; string&#10;&#10;Pad a numeric string x with zeros on the left, to fill a field&#10;of the specified width.  The string x is never truncated.">
				<Param name="x" />
				<Param name="width" />
			</Overload>
		</KeyWord>
		<KeyWord name="strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is a str, it will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="strptime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="sub" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="submit" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="subn" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess" func="yes">
			<Overload retVal="" descr="subprocess - Subprocesses with accessible I/O streams&#10;&#10;This module allows you to spawn processes, connect to their&#10;input/output/error pipes, and obtain their return codes.  This module&#10;intends to replace several other, older modules and functions, like:&#10;&#10;os.system&#10;os.spawn*&#10;os.popen*&#10;popen2.*&#10;commands.*&#10;&#10;Information about how the subprocess module can be used to replace these&#10;modules and functions can be found below.&#10;&#10;&#10;&#10;Using the subprocess module&#10;===========================&#10;This module defines one class called Popen:&#10;&#10;class Popen(args, bufsize=0, executable=None,&#10;            stdin=None, stdout=None, stderr=None,&#10;            preexec_fn=None, close_fds=False, shell=False,&#10;            cwd=None, env=None, universal_newlines=False,&#10;            startupinfo=None, creationflags=0):&#10;&#10;&#10;Arguments are:&#10;&#10;args should be a string, or a sequence of program arguments.  The&#10;program to execute is normally the first item in the args sequence or&#10;string, but can be explicitly set by using the executable argument.&#10;&#10;On UNIX, with shell=False (default): In this case, the Popen class&#10;uses os.execvp() to execute the child program.  args should normally&#10;be a sequence.  A string will be treated as a sequence with the string&#10;as the only item (the program to execute).&#10;&#10;On UNIX, with shell=True: If args is a string, it specifies the&#10;command string to execute through the shell.  If args is a sequence,&#10;the first item specifies the command string, and any additional items&#10;will be treated as additional shell arguments.&#10;&#10;On Windows: the Popen class uses CreateProcess() to execute the child&#10;program, which operates on strings.  If args is a sequence, it will be&#10;converted to a string using the list2cmdline method.  Please note that&#10;not all MS Windows applications interpret the command line the same&#10;way: The list2cmdline is designed for applications using the same&#10;rules as the MS C runtime.&#10;&#10;bufsize, if given, has the same meaning as the corresponding argument&#10;to the built-in open() function: 0 means unbuffered, 1 means line&#10;buffered, any other positive value means use a buffer of&#10;(approximately) that size.  A negative bufsize means to use the system&#10;default, which usually means fully buffered.  The default value for&#10;bufsize is 0 (unbuffered).&#10;&#10;stdin, stdout and stderr specify the executed programs' standard&#10;input, standard output and standard error file handles, respectively.&#10;Valid values are PIPE, an existing file descriptor (a positive&#10;integer), an existing file object, and None.  PIPE indicates that a&#10;new pipe to the child should be created.  With None, no redirection&#10;will occur; the child's file handles will be inherited from the&#10;parent.  Additionally, stderr can be STDOUT, which indicates that the&#10;stderr data from the applications should be captured into the same&#10;file handle as for stdout.&#10;&#10;If preexec_fn is set to a callable object, this object will be called&#10;in the child process just before the child is executed.&#10;&#10;If close_fds is true, all file descriptors except 0, 1 and 2 will be&#10;closed before the child process is executed.&#10;&#10;if shell is true, the specified command will be executed through the&#10;shell.&#10;&#10;If cwd is not None, the current directory will be changed to cwd&#10;before the child is executed.&#10;&#10;If env is not None, it defines the environment variables for the new&#10;process.&#10;&#10;If universal_newlines is true, the file objects stdout and stderr are&#10;opened as a text files, but lines may be terminated by any of '\n',&#10;the Unix end-of-line convention, '\r', the Macintosh convention or&#10;'\r\n', the Windows convention.  All of these external representations&#10;are seen as '\n' by the Python program.  Note: This feature is only&#10;available if Python is built with universal newline support (the&#10;default).  Also, the newlines attribute of the file objects stdout,&#10;stdin and stderr are not updated by the communicate() method.&#10;&#10;The startupinfo and creationflags, if given, will be passed to the&#10;underlying CreateProcess() function.  They can specify things such as&#10;appearance of the main window and priority for the new process.&#10;(Windows only)&#10;&#10;&#10;This module also defines some shortcut functions:&#10;&#10;call(*popenargs, **kwargs):&#10;    Run command with arguments.  Wait for command to complete, then&#10;    return the returncode attribute.&#10;&#10;    The arguments are the same as for the Popen constructor.  Example:&#10;&#10;    retcode = call([&quot;ls&quot;, &quot;-l&quot;])&#10;&#10;check_call(*popenargs, **kwargs):&#10;    Run command with arguments.  Wait for command to complete.  If the&#10;    exit code was zero then return, otherwise raise&#10;    CalledProcessError.  The CalledProcessError object will have the&#10;    return code in the returncode attribute.&#10;&#10;    The arguments are the same as for the Popen constructor.  Example:&#10;&#10;    check_call([&quot;ls&quot;, &quot;-l&quot;])&#10;&#10;check_output(*popenargs, **kwargs):&#10;    Run command with arguments and return its output as a byte string.&#10;&#10;    If the exit code was non-zero it raises a CalledProcessError.  The&#10;    CalledProcessError object will have the return code in the returncode&#10;    attribute and output in the output attribute.&#10;&#10;    The arguments are the same as for the Popen constructor.  Example:&#10;&#10;    output = check_output([&quot;ls&quot;, &quot;-l&quot;, &quot;/dev/null&quot;])&#10;&#10;&#10;Exceptions&#10;----------&#10;Exceptions raised in the child process, before the new program has&#10;started to execute, will be re-raised in the parent.  Additionally,&#10;the exception object will have one extra attribute called&#10;'child_traceback', which is a string containing traceback information&#10;from the childs point of view.&#10;&#10;The most common exception raised is OSError.  This occurs, for&#10;example, when trying to execute a non-existent file.  Applications&#10;should prepare for OSErrors.&#10;&#10;A ValueError will be raised if Popen is called with invalid arguments.&#10;&#10;check_call() and check_output() will raise CalledProcessError, if the&#10;called process returns a non-zero return code.&#10;&#10;&#10;Security&#10;--------&#10;Unlike some other popen functions, this implementation will never call&#10;/bin/sh implicitly.  This means that all characters, including shell&#10;metacharacters, can safely be passed to child processes.&#10;&#10;&#10;Popen objects&#10;=============&#10;Instances of the Popen class have the following methods:&#10;&#10;poll()&#10;    Check if child process has terminated.  Returns returncode&#10;    attribute.&#10;&#10;wait()&#10;    Wait for child process to terminate.  Returns returncode attribute.&#10;&#10;communicate(input=None)&#10;    Interact with process: Send data to stdin.  Read data from stdout&#10;    and stderr, until end-of-file is reached.  Wait for process to&#10;    terminate.  The optional input argument should be a string to be&#10;    sent to the child process, or None, if no data should be sent to&#10;    the child.&#10;&#10;    communicate() returns a tuple (stdout, stderr).&#10;&#10;    Note: The data read is buffered in memory, so do not use this&#10;    method if the data size is large or unlimited.&#10;&#10;The following attributes are also available:&#10;&#10;stdin&#10;    If the stdin argument is PIPE, this attribute is a file object&#10;    that provides input to the child process.  Otherwise, it is None.&#10;&#10;stdout&#10;    If the stdout argument is PIPE, this attribute is a file object&#10;    that provides output from the child process.  Otherwise, it is&#10;    None.&#10;&#10;stderr&#10;    If the stderr argument is PIPE, this attribute is file object that&#10;    provides error output from the child process.  Otherwise, it is&#10;    None.&#10;&#10;pid&#10;    The process ID of the child process.&#10;&#10;returncode&#10;    The child return code.  A None value indicates that the process&#10;    hasn't terminated yet.  A negative value -N indicates that the&#10;    child was terminated by signal N (UNIX only).&#10;&#10;&#10;Replacing older functions with the subprocess module&#10;====================================================&#10;In this section, &quot;a ==&gt; b&quot; means that b can be used as a replacement&#10;for a.&#10;&#10;Note: All functions in this section fail (more or less) silently if&#10;the executed program cannot be found; this module raises an OSError&#10;exception.&#10;&#10;In the following examples, we assume that the subprocess module is&#10;imported with &quot;from subprocess import *&quot;.&#10;&#10;&#10;Replacing /bin/sh shell backquote&#10;---------------------------------&#10;output=`mycmd myarg`&#10;==&gt;&#10;output = Popen([&quot;mycmd&quot;, &quot;myarg&quot;], stdout=PIPE).communicate()[0]&#10;&#10;&#10;Replacing shell pipe line&#10;-------------------------&#10;output=`dmesg | grep hda`&#10;==&gt;&#10;p1 = Popen([&quot;dmesg&quot;], stdout=PIPE)&#10;p2 = Popen([&quot;grep&quot;, &quot;hda&quot;], stdin=p1.stdout, stdout=PIPE)&#10;output = p2.communicate()[0]&#10;&#10;&#10;Replacing os.system()&#10;---------------------&#10;sts = os.system(&quot;mycmd&quot; + &quot; myarg&quot;)&#10;==&gt;&#10;p = Popen(&quot;mycmd&quot; + &quot; myarg&quot;, shell=True)&#10;pid, sts = os.waitpid(p.pid, 0)&#10;&#10;Note:&#10;&#10;* Calling the program through the shell is usually not required.&#10;&#10;* It's easier to look at the returncode attribute than the&#10;  exitstatus.&#10;&#10;A more real-world example would look like this:&#10;&#10;try:&#10;    retcode = call(&quot;mycmd&quot; + &quot; myarg&quot;, shell=True)&#10;    if retcode &lt; 0:&#10;        print &gt;&gt;sys.stderr, &quot;Child was terminated by signal&quot;, -retcode&#10;    else:&#10;        print &gt;&gt;sys.stderr, &quot;Child returned&quot;, retcode&#10;except OSError, e:&#10;    print &gt;&gt;sys.stderr, &quot;Execution failed:&quot;, e&#10;&#10;&#10;Replacing os.spawn*&#10;-------------------&#10;P_NOWAIT example:&#10;&#10;pid = os.spawnlp(os.P_NOWAIT, &quot;/bin/mycmd&quot;, &quot;mycmd&quot;, &quot;myarg&quot;)&#10;==&gt;&#10;pid = Popen([&quot;/bin/mycmd&quot;, &quot;myarg&quot;]).pid&#10;&#10;&#10;P_WAIT example:&#10;&#10;retcode = os.spawnlp(os.P_WAIT, &quot;/bin/mycmd&quot;, &quot;mycmd&quot;, &quot;myarg&quot;)&#10;==&gt;&#10;retcode = call([&quot;/bin/mycmd&quot;, &quot;myarg&quot;])&#10;&#10;&#10;Vector example:&#10;&#10;os.spawnvp(os.P_NOWAIT, path, args)&#10;==&gt;&#10;Popen([path] + args[1:])&#10;&#10;&#10;Environment example:&#10;&#10;os.spawnlpe(os.P_NOWAIT, &quot;/bin/mycmd&quot;, &quot;mycmd&quot;, &quot;myarg&quot;, env)&#10;==&gt;&#10;Popen([&quot;/bin/mycmd&quot;, &quot;myarg&quot;], env={&quot;PATH&quot;: &quot;/usr/bin&quot;})&#10;&#10;&#10;Replacing os.popen*&#10;-------------------&#10;pipe = os.popen(&quot;cmd&quot;, mode='r', bufsize)&#10;==&gt;&#10;pipe = Popen(&quot;cmd&quot;, shell=True, bufsize=bufsize, stdout=PIPE).stdout&#10;&#10;pipe = os.popen(&quot;cmd&quot;, mode='w', bufsize)&#10;==&gt;&#10;pipe = Popen(&quot;cmd&quot;, shell=True, bufsize=bufsize, stdin=PIPE).stdin&#10;&#10;&#10;(child_stdin, child_stdout) = os.popen2(&quot;cmd&quot;, mode, bufsize)&#10;==&gt;&#10;p = Popen(&quot;cmd&quot;, shell=True, bufsize=bufsize,&#10;          stdin=PIPE, stdout=PIPE, close_fds=True)&#10;(child_stdin, child_stdout) = (p.stdin, p.stdout)&#10;&#10;&#10;(child_stdin,&#10; child_stdout,&#10; child_stderr) = os.popen3(&quot;cmd&quot;, mode, bufsize)&#10;==&gt;&#10;p = Popen(&quot;cmd&quot;, shell=True, bufsize=bufsize,&#10;          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)&#10;(child_stdin,&#10; child_stdout,&#10; child_stderr) = (p.stdin, p.stdout, p.stderr)&#10;&#10;&#10;(child_stdin, child_stdout_and_stderr) = os.popen4(&quot;cmd&quot;, mode,&#10;                                                   bufsize)&#10;==&gt;&#10;p = Popen(&quot;cmd&quot;, shell=True, bufsize=bufsize,&#10;          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)&#10;(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)&#10;&#10;On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as&#10;the command to execute, in which case arguments will be passed&#10;directly to the program without shell intervention.  This usage can be&#10;replaced as follows:&#10;&#10;(child_stdin, child_stdout) = os.popen2([&quot;/bin/ls&quot;, &quot;-l&quot;], mode,&#10;                                        bufsize)&#10;==&gt;&#10;p = Popen([&quot;/bin/ls&quot;, &quot;-l&quot;], bufsize=bufsize, stdin=PIPE, stdout=PIPE)&#10;(child_stdin, child_stdout) = (p.stdin, p.stdout)&#10;&#10;Return code handling translates as follows:&#10;&#10;pipe = os.popen(&quot;cmd&quot;, 'w')&#10;...&#10;rc = pipe.close()&#10;if rc is not None and rc % 256:&#10;    print &quot;There were some errors&quot;&#10;==&gt;&#10;process = Popen(&quot;cmd&quot;, 'w', shell=True, stdin=PIPE)&#10;...&#10;process.stdin.close()&#10;if process.wait() != 0:&#10;    print &quot;There were some errors&quot;&#10;&#10;&#10;Replacing popen2.*&#10;------------------&#10;(child_stdout, child_stdin) = popen2.popen2(&quot;somestring&quot;, bufsize, mode)&#10;==&gt;&#10;p = Popen([&quot;somestring&quot;], shell=True, bufsize=bufsize&#10;          stdin=PIPE, stdout=PIPE, close_fds=True)&#10;(child_stdout, child_stdin) = (p.stdout, p.stdin)&#10;&#10;On Unix, popen2 also accepts a sequence as the command to execute, in&#10;which case arguments will be passed directly to the program without&#10;shell intervention.  This usage can be replaced as follows:&#10;&#10;(child_stdout, child_stdin) = popen2.popen2([&quot;mycmd&quot;, &quot;myarg&quot;], bufsize,&#10;                                            mode)&#10;==&gt;&#10;p = Popen([&quot;mycmd&quot;, &quot;myarg&quot;], bufsize=bufsize,&#10;          stdin=PIPE, stdout=PIPE, close_fds=True)&#10;(child_stdout, child_stdin) = (p.stdout, p.stdin)&#10;&#10;The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,&#10;except that:&#10;&#10;* subprocess.Popen raises an exception if the execution fails&#10;* the capturestderr argument is replaced with the stderr argument.&#10;* stdin=PIPE and stdout=PIPE must be specified.&#10;* popen2 closes all filedescriptors by default, but you have to specify&#10;  close_fds=True with subprocess.Popen.">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.CREATE_NEW_CONSOLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.CREATE_NEW_PROCESS_GROUP" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.CalledProcessError" func="yes">
			<Overload retVal="" descr="This exception is raised when a process run by check_call() or&#10;check_output() returns a non-zero exit status.&#10;The exit status will be stored in the returncode attribute;&#10;check_output() will also store the output in the output attribute.">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.CalledProcessError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.CalledProcessError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.MAXFD" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.PIPE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.Popen" />
		<KeyWord name="subprocess.Popen.communicate" func="yes">
			<Overload retVal="" descr="Interact with process: Send data to stdin.  Read data from&#10;stdout and stderr, until end-of-file is reached.  Wait for&#10;process to terminate.  The optional input argument should be a&#10;string to be sent to the child process, or None, if no data&#10;should be sent to the child.&#10;&#10;communicate() returns a tuple (stdout, stderr).">
				<Param name="self" />
				<Param name="[input=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.Popen.kill" func="yes">
			<Overload retVal="" descr="Terminates the process">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.Popen.poll" />
		<KeyWord name="subprocess.Popen.send_signal" func="yes">
			<Overload retVal="" descr="Send a signal to the process">
				<Param name="self" />
				<Param name="sig" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.Popen.terminate" func="yes">
			<Overload retVal="" descr="Terminates the process">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.Popen.wait" func="yes">
			<Overload retVal="" descr="Wait for child process to terminate.  Returns returncode&#10;attribute.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STARTF_USESHOWWINDOW" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STARTF_USESTDHANDLES" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STARTUPINFO" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STDOUT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STD_ERROR_HANDLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STD_INPUT_HANDLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.STD_OUTPUT_HANDLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.call" func="yes">
			<Overload retVal="" descr='Run command with arguments.  Wait for command to complete, then&#10;return the returncode attribute.&#10;&#10;The arguments are the same as for the Popen constructor.  Example:&#10;&#10;retcode = call(["ls", "-l"])'>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.check_call" func="yes">
			<Overload retVal="" descr='Run command with arguments.  Wait for command to complete.  If&#10;the exit code was zero then return, otherwise raise&#10;CalledProcessError.  The CalledProcessError object will have the&#10;return code in the returncode attribute.&#10;&#10;The arguments are the same as for the Popen constructor.  Example:&#10;&#10;check_call(["ls", "-l"])'>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.check_output" func="yes">
			<Overload retVal="" descr="Run command with arguments and return its output as a byte string.&#10;&#10;If the exit code was non-zero it raises a CalledProcessError.  The&#10;CalledProcessError object will have the return code in the returncode&#10;attribute and output in the output attribute.&#10;&#10;The arguments are the same as for the Popen constructor.  Example:&#10;&#10;&gt;&gt;&gt; check_output([&quot;ls&quot;, &quot;-l&quot;, &quot;/dev/null&quot;])&#10;'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'&#10;&#10;The stdout argument is not allowed as it is used internally.&#10;To capture standard error in the result, use stderr=STDOUT.&#10;&#10;&gt;&gt;&gt; check_output([&quot;/bin/sh&quot;, &quot;-c&quot;,&#10;...               &quot;ls -l non_existent_file ; exit 0&quot;],&#10;...              stderr=STDOUT)&#10;'ls: non_existent_file: No such file or directory\n'">
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.list2cmdline" func="yes">
			<Overload retVal="" descr="Translate a sequence of arguments into a command line&#10;string, using the same rules as the MS C runtime:&#10;&#10;1) Arguments are delimited by white space, which is either a&#10;   space or a tab.&#10;&#10;2) A string surrounded by double quotation marks is&#10;   interpreted as a single argument, regardless of white space&#10;   contained within.  A quoted string can be embedded in an&#10;   argument.&#10;&#10;3) A double quotation mark preceded by a backslash is&#10;   interpreted as a literal double quotation mark.&#10;&#10;4) Backslashes are interpreted literally, unless they&#10;   immediately precede a double quotation mark.&#10;&#10;5) If backslashes immediately precede a double quotation mark,&#10;   every pair of backslashes is interpreted as a literal&#10;   backslash.  If the number of backslashes is odd, the last&#10;   backslash escapes the next double quotation mark as&#10;   described in rule 3.">
				<Param name="seq" />
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.mswindows" func="yes">
			<Overload retVal="" descr="(bool)">
			</Overload>
		</KeyWord>
		<KeyWord name="subprocess.pywintypes" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="sum" func="yes">
			<Overload retVal="" descr="sum(sequence[, start]) -&gt; value&#10;&#10;Returns the sum of a sequence of numbers (NOT strings) plus the value&#10;of parameter 'start' (which defaults to 0).  When the sequence is&#10;empty, returns start.">
			</Overload>
		</KeyWord>
		<KeyWord name="super" func="yes">
			<Overload retVal="" descr="super(type) -&gt; unbound super object&#10;super(type, obj) -&gt; bound super object; requires isinstance(obj, type)&#10;super(type, type2) -&gt; bound super object; requires issubclass(type2, type)&#10;Typical use to call a cooperative superclass method:&#10;class C(B):&#10;    def meth(self, arg):&#10;        super(C, self).meth(arg)">
			</Overload>
		</KeyWord>
		<KeyWord name="support" />
		<KeyWord name="swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; string&#10;&#10;Return a copy of the string S with uppercase characters&#10;converted to lowercase and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="switchColor" func="yes">
			<Overload retVal="" descr="Switch console color.">
				<Param name="color" />
			</Overload>
		</KeyWord>
		<KeyWord name="switch_to_active_element" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="switch_to_alert" func="yes">
			<Overload retVal="" descr="Function of PhantomJS">
			</Overload>
		</KeyWord>
		<KeyWord name="switch_to_default_content" func="yes">
			<Overload retVal="" descr="Function of Firefox">
			</Overload>
		</KeyWord>
		<KeyWord name="switch_to_frame" func="yes">
			<Overload retVal="" descr="Function of Ie">
			</Overload>
		</KeyWord>
		<KeyWord name="switch_to_window" func="yes">
			<Overload retVal="" descr="Function of Remote">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference" func="yes">
			<Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#10;&#10;(i.e. all elements that are in exactly one of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference_update" func="yes">
			<Overload retVal="" descr="Update a set with the symmetric difference of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys" func="yes">
			<Overload retVal="" descr="This module provides access to some objects used or maintained by the&#10;interpreter and to functions that interact strongly with the interpreter.&#10;&#10;Dynamic objects:&#10;&#10;argv -- command line arguments; argv[0] is the script pathname if known&#10;path -- module search path; path[0] is the script directory, else ''&#10;modules -- dictionary of loaded modules&#10;&#10;displayhook -- called to show results in an interactive session&#10;excepthook -- called to handle any uncaught exception other than SystemExit&#10;  To customize printing in an interactive session or to install a custom&#10;  top-level exception handler, assign other functions to replace these.&#10;&#10;exitfunc -- if sys.exitfunc exists, this routine is called when Python exits&#10;  Assigning to sys.exitfunc is deprecated; use the atexit module instead.&#10;&#10;stdin -- standard input file object; used by raw_input() and input()&#10;stdout -- standard output file object; used by the print statement&#10;stderr -- standard error object; used for error messages&#10;  By assigning other file objects (or objects that behave like files)&#10;  to these, it is possible to redirect all of the interpreter's I/O.&#10;&#10;last_type -- type of last uncaught exception&#10;last_value -- value of last uncaught exception&#10;last_traceback -- traceback of last uncaught exception&#10;  These three are only available in an interactive session after a&#10;  traceback has been printed.&#10;&#10;exc_type -- type of exception currently being handled&#10;exc_value -- value of exception currently being handled&#10;exc_traceback -- traceback of exception currently being handled&#10;  The function exc_info() should be used instead of these three,&#10;  because it is thread-safe.&#10;&#10;Static objects:&#10;&#10;float_info -- a dict with information about the float inplementation.&#10;long_info -- a struct sequence with information about the long implementation.&#10;maxint -- the largest supported integer (the smallest is -maxint-1)&#10;maxsize -- the largest supported length of containers.&#10;maxunicode -- the largest supported character&#10;builtin_module_names -- tuple of module names built into this interpreter&#10;version -- the version of this interpreter as a string&#10;version_info -- version information as a named tuple&#10;hexversion -- version information encoded as a single integer&#10;copyright -- copyright notice pertaining to this interpreter&#10;platform -- platform identifier&#10;executable -- absolute path of the executable binary of the Python interpreter&#10;prefix -- prefix used to find the Python library&#10;exec_prefix -- prefix used to find the machine-specific Python library&#10;float_repr_style -- string indicating the style of repr() output for floats&#10;dllhandle -- [Windows only] integer handle of the Python DLL&#10;winver -- [Windows only] version number of the Python DLL&#10;__stdin__ -- the original stdin; don't touch!&#10;__stdout__ -- the original stdout; don't touch!&#10;__stderr__ -- the original stderr; don't touch!&#10;__displayhook__ -- the original displayhook; don't touch!&#10;__excepthook__ -- the original excepthook; don't touch!&#10;&#10;Functions:&#10;&#10;displayhook() -- print an object to the screen, and save it in __builtin__._&#10;excepthook() -- print an exception and its traceback to sys.stderr&#10;exc_info() -- return thread-safe information about the current exception&#10;exc_clear() -- clear the exception state for the current thread&#10;exit() -- exit the interpreter by raising SystemExit&#10;getdlopenflags() -- returns flags to be used for dlopen() calls&#10;getprofile() -- get the global profiling function&#10;getrefcount() -- return the reference count for an object (plus one :-)&#10;getrecursionlimit() -- return the max recursion depth for the interpreter&#10;getsizeof() -- return the size of an object in bytes&#10;gettrace() -- get the global debug tracing function&#10;setcheckinterval() -- control how often the interpreter checks for events&#10;setdlopenflags() -- set the flags to be used for dlopen() calls&#10;setprofile() -- set the global profiling function&#10;setrecursionlimit() -- set the max recursion depth for the interpreter&#10;settrace() -- set the global debug tracing function">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.api_version" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.argv" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.builtin_module_names" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.byteorder" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.call_tracing" func="yes">
			<Overload retVal="" descr="call_tracing(func, args) -&gt; object&#10;&#10;Call func(*args), while tracing is enabled.  The tracing state is&#10;saved, and restored afterwards.  This is intended to be called from&#10;a debugger from a checkpoint, to recursively debug some other code.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.callstats" func="yes">
			<Overload retVal="" descr="callstats() -&gt; tuple of integers&#10;&#10;Return a tuple of function call statistics, if CALL_PROFILE was defined&#10;when Python was built.  Otherwise, return None.&#10;&#10;When enabled, this function returns detailed, implementation-specific&#10;details about the number of function calls executed. The return value is&#10;a 11-tuple where the entries in the tuple are counts of:&#10;0. all function calls&#10;1. calls to PyFunction_Type objects&#10;2. PyFunction calls that do not create an argument tuple&#10;3. PyFunction calls that do not create an argument tuple&#10;   and bypass PyEval_EvalCodeEx()&#10;4. PyMethod calls&#10;5. PyMethod calls on bound methods&#10;6. PyType calls&#10;7. PyCFunction calls&#10;8. generator calls&#10;9. All other calls&#10;10. Number of stack pops performed by call_function()">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.copyright" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.displayhook" func="yes">
			<Overload retVal="" descr="displayhook(object) -&gt; None&#10;&#10;Print an object to sys.stdout and also save it in __builtin__._">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.dllhandle" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_clear" func="yes">
			<Overload retVal="" descr="exc_clear() -&gt; None&#10;&#10;Clear global information on the current exception.  Subsequent calls to&#10;exc_info() will return (None,None,None) until another exception is raised&#10;in the current thread or the execution stack returns to a frame where&#10;another exception is being handled.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_info" func="yes">
			<Overload retVal="" descr="exc_info() -&gt; (type, value, traceback)&#10;&#10;Return information about the most recent exception caught by an except&#10;clause in the current stack frame or in an older stack frame.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type" func="yes">
			<Overload retVal="" descr="Inappropriate argument type.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.excepthook" func="yes">
			<Overload retVal="" descr="excepthook(exctype, value, traceback) -&gt; None&#10;&#10;Handle an exception by displaying it with a traceback on sys.stderr.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exec_prefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.executable" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exit" func="yes">
			<Overload retVal="" descr="exit([status])&#10;&#10;Exit the interpreter by raising SystemExit(status).&#10;If the status is omitted or None, it defaults to zero (i.e., success).&#10;If the status is numeric, it will be used as the system exit status.&#10;If it is another kind of object, it will be printed and the system&#10;exit status will be one (i.e., failure).">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exitfunc" func="yes">
			<Overload retVal="" descr="run any registered exit functions&#10;&#10;_exithandlers is traversed in reverse order so functions are executed&#10;last in, first out.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.flags" func="yes">
			<Overload retVal="" descr="(flags)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.float_info" func="yes">
			<Overload retVal="" descr="(float_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.float_repr_style" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getcheckinterval" func="yes">
			<Overload retVal="" descr="getcheckinterval() -&gt; current check interval; see setcheckinterval().">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getdefaultencoding" func="yes">
			<Overload retVal="" descr="getdefaultencoding() -&gt; string&#10;&#10;Return the current default string encoding used by the Unicode &#10;implementation.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getfilesystemencoding" func="yes">
			<Overload retVal="" descr="getfilesystemencoding() -&gt; string&#10;&#10;Return the encoding used to convert Unicode filenames in&#10;operating system filenames.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getprofile" func="yes">
			<Overload retVal="" descr="getprofile()&#10;&#10;Return the profiling function set with sys.setprofile.&#10;See the profiler chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getrecursionlimit" func="yes">
			<Overload retVal="" descr="getrecursionlimit()&#10;&#10;Return the current value of the recursion limit, the maximum depth&#10;of the Python interpreter stack.  This limit prevents infinite&#10;recursion from causing an overflow of the C stack and crashing Python.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getrefcount" func="yes">
			<Overload retVal="" descr="getrefcount(object) -&gt; integer&#10;&#10;Return the reference count of object.  The count returned is generally&#10;one higher than you might expect, because it includes the (temporary)&#10;reference as an argument to getrefcount().">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getsizeof" func="yes">
			<Overload retVal="" descr="getsizeof(object, default) -&gt; int&#10;&#10;Return the size of object in bytes.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.gettrace" func="yes">
			<Overload retVal="" descr="gettrace()&#10;&#10;Return the global debug tracing function set with sys.settrace.&#10;See the debugger chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getwindowsversion" func="yes">
			<Overload retVal="" descr="getwindowsversion()&#10;&#10;Return information about the running version of Windows as a named tuple.&#10;The members are named: major, minor, build, platform, service_pack,&#10;service_pack_major, service_pack_minor, suite_mask, and product_type. For&#10;backward compatibility, only the first 5 items are available by indexing.&#10;All elements are numbers, except service_pack which is a string. Platform&#10;may be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,&#10;3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain&#10;controller, 3 for a server.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.hexversion" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.long_info" func="yes">
			<Overload retVal="" descr="(long_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxint" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxsize" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxunicode" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.modules" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path_hooks" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path_importer_cache" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.platform" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.prefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setcheckinterval" func="yes">
			<Overload retVal="" descr="setcheckinterval(n)&#10;&#10;Tell the Python interpreter to check for asynchronous events every&#10;n instructions.  This also affects how often thread switches occur.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setdefaultencoding" func="yes">
			<Overload retVal="" descr="setdefaultencoding(encoding)&#10;&#10;Set the current default string encoding used by the Unicode implementation.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setprofile" func="yes">
			<Overload retVal="" descr="setprofile(function)&#10;&#10;Set the profiling function.  It will be called on each function call&#10;and return.  See the profiler chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setrecursionlimit" func="yes">
			<Overload retVal="" descr="setrecursionlimit(n)&#10;&#10;Set the maximum depth of the Python interpreter stack to n.  This&#10;limit prevents infinite recursion from causing an overflow of the C&#10;stack and crashing Python.  The highest possible limit is platform-&#10;dependent.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.settrace" func="yes">
			<Overload retVal="" descr="settrace(function)&#10;&#10;Set the global debug tracing function.  It will be called on each&#10;function call.  See the debugger chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stderr" func="yes">
			<Overload retVal="" descr="(StreamWrapper)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stdin" func="yes">
			<Overload retVal="" descr="(file)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stdout" func="yes">
			<Overload retVal="" descr="(StreamWrapper)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.subversion" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.version" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.version_info" func="yes">
			<Overload retVal="" descr="(version_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.winver" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="system" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="tap" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="tap_and_hold" func="yes">
			<Overload retVal="" descr="Function of TouchActions">
			</Overload>
		</KeyWord>
		<KeyWord name="tearDown" func="yes">
			<Overload retVal="" descr="Function of unittest.TestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="tearDownClass" func="yes">
			<Overload retVal="" descr="Function of unittest.FunctionTestCase">
			</Overload>
		</KeyWord>
		<KeyWord name="tell" func="yes">
			<Overload retVal="" descr="tell() -&gt; current file position, an integer (may be a long integer).">
			</Overload>
		</KeyWord>
		<KeyWord name="template" func="yes">
			<Overload retVal="" descr="Function of re">
			</Overload>
		</KeyWord>
		<KeyWord name="tempnam" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="terminate" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="test" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="then" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="throw" func="yes">
			<Overload retVal="" descr="Function of GeneratorType">
			</Overload>
		</KeyWord>
		<KeyWord name="time" func="yes">
			<Overload retVal="" descr="This module provides various functions to manipulate time values.&#10;&#10;There are two standard representations of time.  One is the number&#10;of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer&#10;or a floating point number (to represent fractions of seconds).&#10;The Epoch is system-defined; on Unix, it is generally January 1st, 1970.&#10;The actual value can be retrieved by calling gmtime(0).&#10;&#10;The other representation is a tuple of 9 integers giving local time.&#10;The tuple items are:&#10;  year (four digits, e.g. 1998)&#10;  month (1-12)&#10;  day (1-31)&#10;  hours (0-23)&#10;  minutes (0-59)&#10;  seconds (0-59)&#10;  weekday (0-6, Monday is 0)&#10;  Julian day (day in the year, 1-366)&#10;  DST (Daylight Savings Time) flag (-1, 0 or 1)&#10;If the DST flag is 0, the time is given in the regular time zone;&#10;if it is 1, the time is given in the DST time zone;&#10;if it is -1, mktime() should guess based on the date and time.&#10;&#10;Variables:&#10;&#10;timezone -- difference in seconds between UTC and local standard time&#10;altzone -- difference in  seconds between UTC and local DST time&#10;daylight -- whether local time should reflect DST&#10;tzname -- tuple of (standard time zone name, DST time zone name)&#10;&#10;Functions:&#10;&#10;time() -- return current time in seconds since the Epoch as a float&#10;clock() -- return CPU time since process start as a float&#10;sleep() -- delay for a number of seconds given as a float&#10;gmtime() -- convert seconds since Epoch to UTC tuple&#10;localtime() -- convert seconds since Epoch to local time tuple&#10;asctime() -- convert time tuple to string&#10;ctime() -- convert time in seconds to string&#10;mktime() -- convert local time tuple to seconds since Epoch&#10;strftime() -- convert time tuple to string according to format specification&#10;strptime() -- parse string to time tuple according to format specification&#10;tzset() -- change the local timezone">
			</Overload>
		</KeyWord>
		<KeyWord name="time.accept2dyear" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.altzone" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.asctime" func="yes">
			<Overload retVal="" descr="asctime([tuple]) -&gt; string&#10;&#10;Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.&#10;When the time tuple is not present, current time as returned by localtime()&#10;is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.clock" func="yes">
			<Overload retVal="" descr="clock() -&gt; floating point number&#10;&#10;Return the CPU time or real time since the start of the process or since&#10;the first call to clock().  This has as much precision as the system&#10;records.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.ctime" func="yes">
			<Overload retVal="" descr="ctime(seconds) -&gt; string&#10;&#10;Convert a time in seconds since the Epoch to a string in local time.&#10;This is equivalent to asctime(localtime(seconds)). When the time tuple is&#10;not present, current time as returned by localtime() is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.gmtime" func="yes">
			<Overload retVal="" descr="gmtime([seconds]) -&gt; (tm_year, tm_mon, tm_mday, tm_hour, tm_min,&#10;                       tm_sec, tm_wday, tm_yday, tm_isdst)&#10;&#10;Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.&#10;GMT).  When 'seconds' is not passed in, convert the current time instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.localtime" func="yes">
			<Overload retVal="" descr="localtime([seconds]) -&gt; (tm_year,tm_mon,tm_mday,tm_hour,tm_min,&#10;                          tm_sec,tm_wday,tm_yday,tm_isdst)&#10;&#10;Convert seconds since the Epoch to a time tuple expressing local time.&#10;When 'seconds' is not passed in, convert the current time instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.mktime" func="yes">
			<Overload retVal="" descr="mktime(tuple) -&gt; floating point number&#10;&#10;Convert a time tuple in local time to seconds since the Epoch.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.sleep" func="yes">
			<Overload retVal="" descr="sleep(seconds)&#10;&#10;Delay execution for a given number of seconds.  The argument may be&#10;a floating point number for subsecond precision.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.strftime" func="yes">
			<Overload retVal="" descr="strftime(format[, tuple]) -&gt; string&#10;&#10;Convert a time tuple to a string according to a format specification.&#10;See the library reference manual for formatting codes. When the time tuple&#10;is not present, current time as returned by localtime() is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.strptime" func="yes">
			<Overload retVal="" descr="strptime(string, format) -&gt; struct_time&#10;&#10;Parse a string to a time tuple according to a format specification.&#10;See the library reference manual for formatting codes (same as strftime()).">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time" func="yes">
			<Overload retVal="" descr="The time value as returned by gmtime(), localtime(), and strptime(), and&#10;accepted by asctime(), mktime() and strftime().  May be considered as a&#10;sequence of 9 integers.&#10;&#10;Note that several fields' values are not the same as those defined by&#10;the C language standard for struct tm.  For example, the value of the&#10;field tm_year is the actual year, not year - 1900.  See individual&#10;fields' descriptions for details.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_hour" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_isdst" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_mday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_min" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_mon" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_sec" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_wday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_yday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_year" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.time" func="yes">
			<Overload retVal="" descr="time() -&gt; floating point number&#10;&#10;Return the current time in seconds since the Epoch.&#10;Fractions of a second may be present if the system clock provides them.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.timezone" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.tzname" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="times" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; unicode&#10;&#10;Return a titlecased version of S, i.e. words start with title case&#10;characters, all remaining cased characters have lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox" />
		<KeyWord name="tkMessageBox.ABORT" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.ABORTRETRYIGNORE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.CANCEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.Dialog" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.ERROR" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.IGNORE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.INFO" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.Message" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.NO" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.OK" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.OKCANCEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.QUESTION" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.RETRY" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.RETRYCANCEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.WARNING" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.YES" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.YESNO" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.YESNOCANCEL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.askokcancel" func="yes">
			<Overload retVal="" descr="Ask if operation should proceed; return true if the answer is ok">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.askquestion" func="yes">
			<Overload retVal="" descr="Ask a question">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.askretrycancel" func="yes">
			<Overload retVal="" descr="Ask if operation should be retried; return true if the answer is yes">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.askyesno" func="yes">
			<Overload retVal="" descr="Ask a question; return true if the answer is yes">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.askyesnocancel" func="yes">
			<Overload retVal="" descr="Ask a question; return true if the answer is yes, None if cancelled.">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.showerror" func="yes">
			<Overload retVal="" descr="Show an error message">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.showinfo" func="yes">
			<Overload retVal="" descr="Show an info message">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkMessageBox.showwarning" func="yes">
			<Overload retVal="" descr="Show a warning message">
				<Param name="[title=None" />
				<Param name="[message=None" />
				<Param name="[**]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter" />
		<KeyWord name="tkinter.ALL_EVENTS" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.DONT_WAIT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.EXCEPTION" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.FILE_EVENTS" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.IDLE_EVENTS" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.READABLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TCL_VERSION" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TIMER_EVENTS" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TK_VERSION" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TclError" />
		<KeyWord name="tkinter.TclError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TclError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.Tcl_Obj" />
		<KeyWord name="tkinter.Tcl_Obj.string" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.Tcl_Obj.typename" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.TkappType" />
		<KeyWord name="tkinter.TkttType" />
		<KeyWord name="tkinter.WINDOW_EVENTS" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.WRITABLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.create" />
		<KeyWord name="tkinter.createtimerhandler" />
		<KeyWord name="tkinter.dooneevent" />
		<KeyWord name="tkinter.getbusywaitinterval" func="yes">
			<Overload retVal="" descr="getbusywaitinterval() -&gt; int&#10;&#10;Return the current busy-wait interval between successive&#10;calls to Tcl_DoOneEvent in a threaded Python interpreter.">
			</Overload>
		</KeyWord>
		<KeyWord name="tkinter.mainloop" />
		<KeyWord name="tkinter.quit" />
		<KeyWord name="tkinter.setbusywaitinterval" func="yes">
			<Overload retVal="" descr="setbusywaitinterval(n) -&gt; None&#10;&#10;Set the busy-wait interval in milliseconds between successive&#10;calls to Tcl_DoOneEvent in a threaded Python interpreter.&#10;It should be set to a divisor of the maximum time between&#10;frames in an animation.">
			</Overload>
		</KeyWord>
		<KeyWord name="tmpfile" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="tmpnam" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="to_capabilities" func="yes">
			<Overload retVal="" descr="Function of ChromeOptions">
			</Overload>
		</KeyWord>
		<KeyWord name="tobytes" />
		<KeyWord name="tolist" />
		<KeyWord name="translate" func="yes">
			<Overload retVal="" descr="S.translate(table) -&gt; unicode&#10;&#10;Return a copy of the string S, where all characters have been mapped&#10;through the given translation table, which must be a mapping of&#10;Unicode ordinals to Unicode ordinals, Unicode strings or None.&#10;Unmapped characters are left untouched. Characters mapped to None&#10;are deleted.">
			</Overload>
		</KeyWord>
		<KeyWord name="truncate" func="yes">
			<Overload retVal="" descr="truncate([size]) -&gt; None.  Truncate the file to at most size bytes.&#10;&#10;Size defaults to the current file position, as returned by tell().">
			</Overload>
		</KeyWord>
		<KeyWord name="try" />
		<KeyWord name="tuple" func="yes">
			<Overload retVal="" descr="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items&#10;&#10;If the argument is a tuple, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="type" func="yes">
			<Overload retVal="" descr="type(object) -&gt; the object's type&#10;type(name, bases, dict) -&gt; a new type">
			</Overload>
		</KeyWord>
		<KeyWord name="type_keys" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="ui" />
		<KeyWord name="ui.Select" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="ui.WebDriverWait" />
		<KeyWord name="ui.WebDriverWait.until" func="yes">
			<Overload retVal="" descr="Calls the method provided with the driver as an argument until the         return value is not False.">
				<Param name="self" />
				<Param name="method" />
				<Param name="[message]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ui.WebDriverWait.until_not" func="yes">
			<Overload retVal="" descr="Calls the method provided with the driver as an argument until the           return value is False.">
				<Param name="self" />
				<Param name="method" />
				<Param name="[message]" />
			</Overload>
		</KeyWord>
		<KeyWord name="umask" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="uncheck" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="unichr" func="yes">
			<Overload retVal="" descr="unichr(i) -&gt; Unicode character&#10;&#10;Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff.">
			</Overload>
		</KeyWord>
		<KeyWord name="unicode" func="yes">
			<Overload retVal="" descr="unicode(string [, encoding[, errors]]) -&gt; object&#10;&#10;Create a new Unicode object from the given encoded string.&#10;encoding defaults to the current default string encoding.&#10;errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.">
			</Overload>
		</KeyWord>
		<KeyWord name="union" func="yes">
			<Overload retVal="" descr="Return the union of sets as a new set.&#10;&#10;(i.e. all elements that are in either set.)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest" func="yes">
			<Overload retVal="" descr="Python unit testing framework, based on Erich Gamma's JUnit and Kent Beck's&#10;Smalltalk testing framework.&#10;&#10;This module contains the core framework classes that form the basis of&#10;specific test cases and suites (TestCase, TestSuite etc.), and also a&#10;text-based utility class for running the tests and reporting the results&#10; (TextTestRunner).&#10;&#10;Simple usage:&#10;&#10;    import unittest&#10;&#10;    class IntegerArithmenticTestCase(unittest.TestCase):&#10;        def testAdd(self):  ## test method names begin 'test*'&#10;            self.assertEqual((1 + 2), 3)&#10;            self.assertEqual(0 + 1, 1)&#10;        def testMultiply(self):&#10;            self.assertEqual((0 * 10), 0)&#10;            self.assertEqual((5 * 8), 40)&#10;&#10;    if __name__ == '__main__':&#10;        unittest.main()&#10;&#10;Further information is available in the bundled documentation, and from&#10;&#10;  http://docs.python.org/library/unittest.html&#10;&#10;Copyright (c) 1999-2003 Steve Purcell&#10;Copyright (c) 2003-2010 Python Software Foundation&#10;This module is free software, and you may redistribute it and/or modify&#10;it under the same terms as Python itself, so long as this copyright message&#10;and disclaimer are retained in their original form.&#10;&#10;IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,&#10;SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF&#10;THIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH&#10;DAMAGE.&#10;&#10;THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT&#10;LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS,&#10;AND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,&#10;SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.BaseTestSuite" func="yes">
			<Overload retVal="" descr="A simple test suite that doesn't provide class or module shared fixtures.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.BaseTestSuite.addTest" />
		<KeyWord name="unittest.BaseTestSuite.addTests" />
		<KeyWord name="unittest.BaseTestSuite.countTestCases" />
		<KeyWord name="unittest.BaseTestSuite.debug" func="yes">
			<Overload retVal="" descr="Run the tests without collecting errors in a TestResult">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.BaseTestSuite.run" />
		<KeyWord name="unittest.FunctionTestCase" func="yes">
			<Overload retVal="" descr="A test case that wraps a test function.&#10;&#10;This is useful for slipping pre-existing test functions into the&#10;unittest framework. Optionally, set-up and tidy-up functions can be&#10;supplied. As with TestCase, the tidy-up ('tearDown') function will&#10;always be called if the set-up ('setUp') function ran successfully.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.addCleanup" func="yes">
			<Overload retVal="" descr="Add a function, with arguments, to be called when the test is&#10;completed. Functions added are called on a LIFO basis and are&#10;called after tearDown on test failure or success.&#10;&#10;Cleanup items are called even if setUp fails (unlike tearDown).">
				<Param name="self" />
				<Param name="function" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.addTypeEqualityFunc" func="yes">
			<Overload retVal="" descr="Add a type specific assertEqual style function to compare a type.&#10;&#10;This method is for use by TestCase subclasses that need to register&#10;their own type equality functions to provide nicer error messages.&#10;&#10;Args:&#10;    typeobj: The data type to call this function on when both values&#10;            are of the same type in assertEqual().&#10;    function: The callable taking two arguments and an optional&#10;            msg= argument that raises self.failureException with a&#10;            useful error message when the two arguments are not equal.">
				<Param name="self" />
				<Param name="typeobj" />
				<Param name="function" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertAlmostEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;If the two objects compare equal then they will automatically&#10;compare almost equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertAlmostEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;If the two objects compare equal then they will automatically&#10;compare almost equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertDictContainsSubset" func="yes">
			<Overload retVal="" descr="Checks whether actual is a superset of expected.">
				<Param name="self" />
				<Param name="expected" />
				<Param name="actual" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertDictEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="d1" />
				<Param name="d2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertFalse" func="yes">
			<Overload retVal="" descr="Check that the expression is false.">
				<Param name="self" />
				<Param name="expr" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertGreater" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &gt; b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertGreaterEqual" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &gt;= b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIn" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a in b), but with a nicer default message.">
				<Param name="self" />
				<Param name="member" />
				<Param name="container" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIs" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a is b), but with a nicer default message.">
				<Param name="self" />
				<Param name="expr1" />
				<Param name="expr2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIsInstance" func="yes">
			<Overload retVal="" descr="Same as self.assertTrue(isinstance(obj, cls)), with a nicer&#10;default message.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="cls" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIsNone" func="yes">
			<Overload retVal="" descr="Same as self.assertTrue(obj is None), with a nicer default message.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIsNot" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a is not b), but with a nicer default message.">
				<Param name="self" />
				<Param name="expr1" />
				<Param name="expr2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertIsNotNone" func="yes">
			<Overload retVal="" descr="Included for symmetry with assertIsNone.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertItemsEqual" func="yes">
			<Overload retVal="" descr="An unordered sequence specific comparison. It asserts that&#10;actual_seq and expected_seq have the same element counts.&#10;Equivalent to::&#10;&#10;    self.assertEqual(Counter(iter(actual_seq)),&#10;                     Counter(iter(expected_seq)))&#10;&#10;Asserts that each element has the same count in both sequences.&#10;Example:&#10;    - [0, 1, 1] and [1, 0, 1] compare equal.&#10;    - [0, 0, 1] and [0, 1] compare unequal.">
				<Param name="self" />
				<Param name="expected_seq" />
				<Param name="actual_seq" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertLess" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &lt; b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertLessEqual" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &lt;= b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertListEqual" func="yes">
			<Overload retVal="" descr="A list-specific equality assertion.&#10;&#10;Args:&#10;    list1: The first list to compare.&#10;    list2: The second list to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="list1" />
				<Param name="list2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertMultiLineEqual" func="yes">
			<Overload retVal="" descr="Assert that two multi-line strings are equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotAlmostEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;Objects that are equal automatically fail.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotAlmostEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;Objects that are equal automatically fail.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotIn" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a not in b), but with a nicer default message.">
				<Param name="self" />
				<Param name="member" />
				<Param name="container" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotIsInstance" func="yes">
			<Overload retVal="" descr="Included for symmetry with assertIsInstance.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="cls" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertNotRegexpMatches" func="yes">
			<Overload retVal="" descr="Fail the test if the text matches the regular expression.">
				<Param name="self" />
				<Param name="text" />
				<Param name="unexpected_regexp" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertRaises" func="yes">
			<Overload retVal="" descr="Fail unless an exception of class excClass is thrown&#10;by callableObj when invoked with arguments args and keyword&#10;arguments kwargs. If a different type of exception is&#10;thrown, it will not be caught, and the test case will be&#10;deemed to have suffered an error, exactly as for an&#10;unexpected exception.&#10;&#10;If called with callableObj omitted or None, will return a&#10;context object used like this::&#10;&#10;     with self.assertRaises(SomeException):&#10;         do_something()&#10;&#10;The context manager keeps a reference to the exception as&#10;the 'exception' attribute. This allows you to inspect the&#10;exception after the assertion::&#10;&#10;    with self.assertRaises(SomeException) as cm:&#10;        do_something()&#10;    the_exception = cm.exception&#10;    self.assertEqual(the_exception.error_code, 3)">
				<Param name="self" />
				<Param name="excClass" />
				<Param name="[callableObj=None" />
				<Param name="[**]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertRaisesRegexp" func="yes">
			<Overload retVal="" descr="Asserts that the message in a raised exception matches a regexp.&#10;&#10;Args:&#10;    expected_exception: Exception class expected to be raised.&#10;    expected_regexp: Regexp (re pattern object or string) expected&#10;            to be found in error message.&#10;    callable_obj: Function to be called.&#10;    args: Extra args.&#10;    kwargs: Extra kwargs.">
				<Param name="self" />
				<Param name="expected_exception" />
				<Param name="expected_regexp" />
				<Param name="[callable_obj=None" />
				<Param name="[**]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertRegexpMatches" func="yes">
			<Overload retVal="" descr="Fail the test unless the text matches the regular expression.">
				<Param name="self" />
				<Param name="text" />
				<Param name="expected_regexp" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertSequenceEqual" func="yes">
			<Overload retVal="" descr="An equality assertion for ordered sequences (like lists and tuples).&#10;&#10;For the purposes of this function, a valid ordered sequence type is one&#10;which can be indexed, has a length, and has an equality operator.&#10;&#10;Args:&#10;    seq1: The first sequence to compare.&#10;    seq2: The second sequence to compare.&#10;    seq_type: The expected datatype of the sequences, or None if no&#10;            datatype should be enforced.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="seq1" />
				<Param name="seq2" />
				<Param name="[msg=None" />
				<Param name="[seq_type=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertSetEqual" func="yes">
			<Overload retVal="" descr="A set-specific equality assertion.&#10;&#10;Args:&#10;    set1: The first set to compare.&#10;    set2: The second set to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.&#10;&#10;assertSetEqual uses ducktyping to support different types of sets, and&#10;is optimized for sets specifically (parameters must support a&#10;difference method).">
				<Param name="self" />
				<Param name="set1" />
				<Param name="set2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertTrue" func="yes">
			<Overload retVal="" descr="Check that the expression is true.">
				<Param name="self" />
				<Param name="expr" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.assertTupleEqual" func="yes">
			<Overload retVal="" descr="A tuple-specific equality assertion.&#10;&#10;Args:&#10;    tuple1: The first tuple to compare.&#10;    tuple2: The second tuple to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="tuple1" />
				<Param name="tuple2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.countTestCases" />
		<KeyWord name="unittest.FunctionTestCase.debug" func="yes">
			<Overload retVal="" descr="Run the test without collecting errors in a TestResult">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.defaultTestResult" />
		<KeyWord name="unittest.FunctionTestCase.doCleanups" func="yes">
			<Overload retVal="" descr="Execute all cleanup functions. Normally called for you after&#10;tearDown.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.fail" func="yes">
			<Overload retVal="" descr="Fail immediately, with the given message.">
				<Param name="self" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failIf" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failIfAlmostEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failIfEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failUnless" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failUnlessAlmostEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failUnlessEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failUnlessRaises" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.failureException" func="yes">
			<Overload retVal="" descr="Assertion failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.id" />
		<KeyWord name="unittest.FunctionTestCase.maxDiff" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.run" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[result=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.runTest" />
		<KeyWord name="unittest.FunctionTestCase.setUp" />
		<KeyWord name="unittest.FunctionTestCase.setUpClass" func="yes">
			<Overload retVal="" descr="Hook method for setting up class fixture before running tests in the class.">
				<Param name="cls" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.shortDescription" />
		<KeyWord name="unittest.FunctionTestCase.skipTest" func="yes">
			<Overload retVal="" descr="Skip this test.">
				<Param name="self" />
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.FunctionTestCase.tearDown" />
		<KeyWord name="unittest.FunctionTestCase.tearDownClass" func="yes">
			<Overload retVal="" descr="Hook method for deconstructing the class fixture after running all tests in the class.">
				<Param name="cls" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.SkipTest" func="yes">
			<Overload retVal="" descr="Raise this exception in a test to skip it.&#10;&#10;Usually you can use TestResult.skip() or one of the skipping decorators&#10;instead of raising this directly.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.SkipTest.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.SkipTest.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase" func="yes">
			<Overload retVal="" descr="A class whose instances are single test cases.&#10;&#10;By default, the test code itself should be placed in a method named&#10;'runTest'.&#10;&#10;If the fixture may be used for many test cases, create as&#10;many test methods as are needed. When instantiating such a TestCase&#10;subclass, specify in the constructor arguments the name of the test method&#10;that the instance is to execute.&#10;&#10;Test authors should subclass TestCase for their own tests. Construction&#10;and deconstruction of the test's environment ('fixture') can be&#10;implemented by overriding the 'setUp' and 'tearDown' methods respectively.&#10;&#10;If it is necessary to override the __init__ method, the base class&#10;__init__ method must always be called. It is important that subclasses&#10;should not change the signature of their __init__ method, since instances&#10;of the classes are instantiated automatically by parts of the framework&#10;in order to be run.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.addCleanup" func="yes">
			<Overload retVal="" descr="Add a function, with arguments, to be called when the test is&#10;completed. Functions added are called on a LIFO basis and are&#10;called after tearDown on test failure or success.&#10;&#10;Cleanup items are called even if setUp fails (unlike tearDown).">
				<Param name="self" />
				<Param name="function" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.addTypeEqualityFunc" func="yes">
			<Overload retVal="" descr="Add a type specific assertEqual style function to compare a type.&#10;&#10;This method is for use by TestCase subclasses that need to register&#10;their own type equality functions to provide nicer error messages.&#10;&#10;Args:&#10;    typeobj: The data type to call this function on when both values&#10;            are of the same type in assertEqual().&#10;    function: The callable taking two arguments and an optional&#10;            msg= argument that raises self.failureException with a&#10;            useful error message when the two arguments are not equal.">
				<Param name="self" />
				<Param name="typeobj" />
				<Param name="function" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertAlmostEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;If the two objects compare equal then they will automatically&#10;compare almost equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertAlmostEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;If the two objects compare equal then they will automatically&#10;compare almost equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertDictContainsSubset" func="yes">
			<Overload retVal="" descr="Checks whether actual is a superset of expected.">
				<Param name="self" />
				<Param name="expected" />
				<Param name="actual" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertDictEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="d1" />
				<Param name="d2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are unequal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertFalse" func="yes">
			<Overload retVal="" descr="Check that the expression is false.">
				<Param name="self" />
				<Param name="expr" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertGreater" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &gt; b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertGreaterEqual" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &gt;= b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIn" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a in b), but with a nicer default message.">
				<Param name="self" />
				<Param name="member" />
				<Param name="container" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIs" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a is b), but with a nicer default message.">
				<Param name="self" />
				<Param name="expr1" />
				<Param name="expr2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIsInstance" func="yes">
			<Overload retVal="" descr="Same as self.assertTrue(isinstance(obj, cls)), with a nicer&#10;default message.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="cls" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIsNone" func="yes">
			<Overload retVal="" descr="Same as self.assertTrue(obj is None), with a nicer default message.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIsNot" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a is not b), but with a nicer default message.">
				<Param name="self" />
				<Param name="expr1" />
				<Param name="expr2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertIsNotNone" func="yes">
			<Overload retVal="" descr="Included for symmetry with assertIsNone.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertItemsEqual" func="yes">
			<Overload retVal="" descr="An unordered sequence specific comparison. It asserts that&#10;actual_seq and expected_seq have the same element counts.&#10;Equivalent to::&#10;&#10;    self.assertEqual(Counter(iter(actual_seq)),&#10;                     Counter(iter(expected_seq)))&#10;&#10;Asserts that each element has the same count in both sequences.&#10;Example:&#10;    - [0, 1, 1] and [1, 0, 1] compare equal.&#10;    - [0, 0, 1] and [0, 1] compare unequal.">
				<Param name="self" />
				<Param name="expected_seq" />
				<Param name="actual_seq" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertLess" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &lt; b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertLessEqual" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a &lt;= b), but with a nicer default message.">
				<Param name="self" />
				<Param name="a" />
				<Param name="b" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertListEqual" func="yes">
			<Overload retVal="" descr="A list-specific equality assertion.&#10;&#10;Args:&#10;    list1: The first list to compare.&#10;    list2: The second list to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="list1" />
				<Param name="list2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertMultiLineEqual" func="yes">
			<Overload retVal="" descr="Assert that two multi-line strings are equal.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotAlmostEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;Objects that are equal automatically fail.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotAlmostEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta.&#10;&#10;Note that decimal places (from zero) are usually not the same&#10;as significant digits (measured from the most signficant digit).&#10;&#10;Objects that are equal automatically fail.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[places=None" />
				<Param name="[msg=None" />
				<Param name="[delta=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotEqual" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotEquals" func="yes">
			<Overload retVal="" descr="Fail if the two objects are equal as determined by the '=='&#10;operator.">
				<Param name="self" />
				<Param name="first" />
				<Param name="second" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotIn" func="yes">
			<Overload retVal="" descr="Just like self.assertTrue(a not in b), but with a nicer default message.">
				<Param name="self" />
				<Param name="member" />
				<Param name="container" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotIsInstance" func="yes">
			<Overload retVal="" descr="Included for symmetry with assertIsInstance.">
				<Param name="self" />
				<Param name="obj" />
				<Param name="cls" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertNotRegexpMatches" func="yes">
			<Overload retVal="" descr="Fail the test if the text matches the regular expression.">
				<Param name="self" />
				<Param name="text" />
				<Param name="unexpected_regexp" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertRaises" func="yes">
			<Overload retVal="" descr="Fail unless an exception of class excClass is thrown&#10;by callableObj when invoked with arguments args and keyword&#10;arguments kwargs. If a different type of exception is&#10;thrown, it will not be caught, and the test case will be&#10;deemed to have suffered an error, exactly as for an&#10;unexpected exception.&#10;&#10;If called with callableObj omitted or None, will return a&#10;context object used like this::&#10;&#10;     with self.assertRaises(SomeException):&#10;         do_something()&#10;&#10;The context manager keeps a reference to the exception as&#10;the 'exception' attribute. This allows you to inspect the&#10;exception after the assertion::&#10;&#10;    with self.assertRaises(SomeException) as cm:&#10;        do_something()&#10;    the_exception = cm.exception&#10;    self.assertEqual(the_exception.error_code, 3)">
				<Param name="self" />
				<Param name="excClass" />
				<Param name="[callableObj=None" />
				<Param name="[**]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertRaisesRegexp" func="yes">
			<Overload retVal="" descr="Asserts that the message in a raised exception matches a regexp.&#10;&#10;Args:&#10;    expected_exception: Exception class expected to be raised.&#10;    expected_regexp: Regexp (re pattern object or string) expected&#10;            to be found in error message.&#10;    callable_obj: Function to be called.&#10;    args: Extra args.&#10;    kwargs: Extra kwargs.">
				<Param name="self" />
				<Param name="expected_exception" />
				<Param name="expected_regexp" />
				<Param name="[callable_obj=None" />
				<Param name="[**]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertRegexpMatches" func="yes">
			<Overload retVal="" descr="Fail the test unless the text matches the regular expression.">
				<Param name="self" />
				<Param name="text" />
				<Param name="expected_regexp" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertSequenceEqual" func="yes">
			<Overload retVal="" descr="An equality assertion for ordered sequences (like lists and tuples).&#10;&#10;For the purposes of this function, a valid ordered sequence type is one&#10;which can be indexed, has a length, and has an equality operator.&#10;&#10;Args:&#10;    seq1: The first sequence to compare.&#10;    seq2: The second sequence to compare.&#10;    seq_type: The expected datatype of the sequences, or None if no&#10;            datatype should be enforced.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="seq1" />
				<Param name="seq2" />
				<Param name="[msg=None" />
				<Param name="[seq_type=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertSetEqual" func="yes">
			<Overload retVal="" descr="A set-specific equality assertion.&#10;&#10;Args:&#10;    set1: The first set to compare.&#10;    set2: The second set to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.&#10;&#10;assertSetEqual uses ducktyping to support different types of sets, and&#10;is optimized for sets specifically (parameters must support a&#10;difference method).">
				<Param name="self" />
				<Param name="set1" />
				<Param name="set2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertTrue" func="yes">
			<Overload retVal="" descr="Check that the expression is true.">
				<Param name="self" />
				<Param name="expr" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.assertTupleEqual" func="yes">
			<Overload retVal="" descr="A tuple-specific equality assertion.&#10;&#10;Args:&#10;    tuple1: The first tuple to compare.&#10;    tuple2: The second tuple to compare.&#10;    msg: Optional message to use on failure instead of a list of&#10;            differences.">
				<Param name="self" />
				<Param name="tuple1" />
				<Param name="tuple2" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.countTestCases" />
		<KeyWord name="unittest.TestCase.debug" func="yes">
			<Overload retVal="" descr="Run the test without collecting errors in a TestResult">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.defaultTestResult" />
		<KeyWord name="unittest.TestCase.doCleanups" func="yes">
			<Overload retVal="" descr="Execute all cleanup functions. Normally called for you after&#10;tearDown.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.fail" func="yes">
			<Overload retVal="" descr="Fail immediately, with the given message.">
				<Param name="self" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failIf" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failIfAlmostEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failIfEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failUnless" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failUnlessAlmostEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failUnlessEqual" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failUnlessRaises" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.failureException" func="yes">
			<Overload retVal="" descr="Assertion failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.id" />
		<KeyWord name="unittest.TestCase.maxDiff" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.run" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[result=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.setUp" func="yes">
			<Overload retVal="" descr="Hook method for setting up the test fixture before exercising it.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.setUpClass" func="yes">
			<Overload retVal="" descr="Hook method for setting up class fixture before running tests in the class.">
				<Param name="cls" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.shortDescription" func="yes">
			<Overload retVal="" descr="Returns a one-line description of the test, or None if no&#10;description has been provided.&#10;&#10;The default implementation of this method returns the first line of&#10;the specified test method's docstring.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.skipTest" func="yes">
			<Overload retVal="" descr="Skip this test.">
				<Param name="self" />
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.tearDown" func="yes">
			<Overload retVal="" descr="Hook method for deconstructing the test fixture after testing it.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestCase.tearDownClass" func="yes">
			<Overload retVal="" descr="Hook method for deconstructing the class fixture after running all tests in the class.">
				<Param name="cls" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader" func="yes">
			<Overload retVal="" descr="This class is responsible for loading tests according to various criteria&#10;and returning them wrapped in a TestSuite">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.discover" func="yes">
			<Overload retVal="" descr="Find and return all test modules from the specified start&#10;directory, recursing into subdirectories to find them. Only test files&#10;that match the pattern will be loaded. (Using shell style pattern&#10;matching.)&#10;&#10;All test modules must be importable from the top level of the project.&#10;If the start directory is not the top level directory then the top&#10;level directory must be specified separately.&#10;&#10;If a test package name (directory with '__init__.py') matches the&#10;pattern then the package will be checked for a 'load_tests' function. If&#10;this exists then it will be called with loader, tests, pattern.&#10;&#10;If load_tests exists then discovery does  *not* recurse into the package,&#10;load_tests is responsible for loading all tests in the package.&#10;&#10;The pattern is deliberately not stored as a loader attribute so that&#10;packages can continue discovery themselves. top_level_dir is stored so&#10;load_tests does not need to pass this argument in to loader.discover().">
				<Param name="self" />
				<Param name="start_dir" />
				<Param name="[pattern=test*.py" />
				<Param name="[top_level_dir=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.getTestCaseNames" func="yes">
			<Overload retVal="" descr="Return a sorted sequence of method names found within testCaseClass">
				<Param name="self" />
				<Param name="testCaseClass" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.loadTestsFromModule" func="yes">
			<Overload retVal="" descr="Return a suite of all tests cases contained in the given module">
				<Param name="self" />
				<Param name="module" />
				<Param name="[use_load_tests=True]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.loadTestsFromName" func="yes">
			<Overload retVal="" descr="Return a suite of all tests cases given a string specifier.&#10;&#10;The name may resolve either to a module, a test case class, a&#10;test method within a test case class, or a callable object which&#10;returns a TestCase or TestSuite instance.&#10;&#10;The method optionally resolves the names relative to a given module.">
				<Param name="self" />
				<Param name="name" />
				<Param name="[module=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.loadTestsFromNames" func="yes">
			<Overload retVal="" descr="Return a suite of all tests cases found using the given sequence&#10;of string specifiers. See 'loadTestsFromName()'.">
				<Param name="self" />
				<Param name="names" />
				<Param name="[module=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.loadTestsFromTestCase" func="yes">
			<Overload retVal="" descr="Return a suite of all tests cases contained in testCaseClass">
				<Param name="self" />
				<Param name="testCaseClass" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.sortTestMethodsUsing" func="yes">
			<Overload retVal="" descr="cmp(x, y) -&gt; integer&#10;&#10;Return negative if x&lt;y, zero if x==y, positive if x&gt;y.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.suiteClass" func="yes">
			<Overload retVal="" descr="A test suite is a composite test consisting of a number of TestCases.&#10;&#10;For use, create an instance of TestSuite, then add test case instances.&#10;When all tests have been added, the suite can be passed to a test&#10;runner, such as TextTestRunner. It will run the individual test cases&#10;in the order in which they were added, aggregating the results. When&#10;subclassing, do not forget to call the base class constructor.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestLoader.testMethodPrefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestProgram" func="yes">
			<Overload retVal="" descr="A command-line program that runs a set of tests; this is primarily&#10;for making test modules conveniently executable.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestProgram.USAGE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestProgram.createTests" />
		<KeyWord name="unittest.TestProgram.parseArgs" />
		<KeyWord name="unittest.TestProgram.runTests" />
		<KeyWord name="unittest.TestProgram.usageExit" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult" func="yes">
			<Overload retVal="" descr="Holder for test result information.&#10;&#10;Test results are automatically managed by the TestCase and TestSuite&#10;classes, and do not need to be explicitly manipulated by writers of tests.&#10;&#10;Each instance holds the total number of tests run, and collections of&#10;failures and errors that occurred among those test runs. The collections&#10;contain tuples of (testcase, exceptioninfo), where exceptioninfo is the&#10;formatted traceback of the error that occurred.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addError" func="yes">
			<Overload retVal="" descr="Called when an error has occurred. 'err' is a tuple of values as&#10;returned by sys.exc_info().">
				<Param name="self" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addExpectedFailure" func="yes">
			<Overload retVal="" descr="Called when an expected failure/error occured.">
				<Param name="self" />
				<Param name="test" />
				<Param name="err" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addFailure" func="yes">
			<Overload retVal="" descr="Called when an error has occurred. 'err' is a tuple of values as&#10;returned by sys.exc_info().">
				<Param name="self" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addSkip" func="yes">
			<Overload retVal="" descr="Called when a test is skipped.">
				<Param name="self" />
				<Param name="test" />
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addSuccess" func="yes">
			<Overload retVal="" descr="Called when a test has completed successfully">
				<Param name="self" />
				<Param name="test" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.addUnexpectedSuccess" func="yes">
			<Overload retVal="" descr="Called when a test was expected to fail, but succeed.">
				<Param name="self" />
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.printErrors" func="yes">
			<Overload retVal="" descr="Called by TestRunner after test run">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.startTest" func="yes">
			<Overload retVal="" descr="Called when the given test is about to be run">
				<Param name="self" />
				<Param name="test" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.startTestRun" func="yes">
			<Overload retVal="" descr="Called once before any tests are executed.&#10;&#10;See startTest for a method called before each test.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.stop" func="yes">
			<Overload retVal="" descr="Indicates that the tests should be aborted">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.stopTest" func="yes">
			<Overload retVal="" descr="Called when the given test has been run">
				<Param name="self" />
				<Param name="test" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.stopTestRun" func="yes">
			<Overload retVal="" descr="Called once after all tests are executed.&#10;&#10;See stopTest for a method called after each test.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestResult.wasSuccessful" func="yes">
			<Overload retVal="" descr="Tells whether or not this result was a success">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestSuite" func="yes">
			<Overload retVal="" descr="A test suite is a composite test consisting of a number of TestCases.&#10;&#10;For use, create an instance of TestSuite, then add test case instances.&#10;When all tests have been added, the suite can be passed to a test&#10;runner, such as TextTestRunner. It will run the individual test cases&#10;in the order in which they were added, aggregating the results. When&#10;subclassing, do not forget to call the base class constructor.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestSuite.addTest" />
		<KeyWord name="unittest.TestSuite.addTests" />
		<KeyWord name="unittest.TestSuite.countTestCases" />
		<KeyWord name="unittest.TestSuite.debug" func="yes">
			<Overload retVal="" descr="Run the tests without collecting errors in a TestResult">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TestSuite.run" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="result" />
				<Param name="[debug=False]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult" func="yes">
			<Overload retVal="" descr="A test result class that can print formatted text results to a stream.&#10;&#10;Used by TextTestRunner.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.addError" />
		<KeyWord name="unittest.TextTestResult.addExpectedFailure" />
		<KeyWord name="unittest.TextTestResult.addFailure" />
		<KeyWord name="unittest.TextTestResult.addSkip" />
		<KeyWord name="unittest.TextTestResult.addSuccess" />
		<KeyWord name="unittest.TextTestResult.addUnexpectedSuccess" />
		<KeyWord name="unittest.TextTestResult.getDescription" />
		<KeyWord name="unittest.TextTestResult.printErrorList" />
		<KeyWord name="unittest.TextTestResult.printErrors" />
		<KeyWord name="unittest.TextTestResult.separator1" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.separator2" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.startTest" />
		<KeyWord name="unittest.TextTestResult.startTestRun" func="yes">
			<Overload retVal="" descr="Called once before any tests are executed.&#10;&#10;See startTest for a method called before each test.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.stop" func="yes">
			<Overload retVal="" descr="Indicates that the tests should be aborted">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.stopTest" func="yes">
			<Overload retVal="" descr="Called when the given test has been run">
				<Param name="self" />
				<Param name="test" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.stopTestRun" func="yes">
			<Overload retVal="" descr="Called once after all tests are executed.&#10;&#10;See stopTest for a method called after each test.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestResult.wasSuccessful" func="yes">
			<Overload retVal="" descr="Tells whether or not this result was a success">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestRunner" func="yes">
			<Overload retVal="" descr="A test runner class that displays results in textual form.&#10;&#10;It prints out the names of tests as they are run, errors as they&#10;occur, and a summary of the results at the end of the test run.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestRunner.resultclass" func="yes">
			<Overload retVal="" descr="A test result class that can print formatted text results to a stream.&#10;&#10;Used by TextTestRunner.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.TextTestRunner.run" func="yes">
			<Overload retVal="" descr="Run the given test case or test suite.">
				<Param name="self" />
				<Param name="test" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.defaultTestLoader" func="yes">
			<Overload retVal="" descr="(TestLoader)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.expectedFailure" />
		<KeyWord name="unittest.findTestCases" func="yes">
			<Overload retVal="" descr=>
				<Param name="module" />
				<Param name="[prefix=test" />
				<Param name="[sortUsing=<built-in function cmp>" />
				<Param name="[suiteClass=<class 'unittest.suite.TestSuite'>]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.getTestCaseNames" func="yes">
			<Overload retVal="" descr=>
				<Param name="testCaseClass" />
				<Param name="prefix" />
				<Param name="[sortUsing=<built-in function cmp>]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.installHandler" />
		<KeyWord name="unittest.main" func="yes">
			<Overload retVal="" descr="A command-line program that runs a set of tests; this is primarily&#10;for making test modules conveniently executable.">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.main.USAGE" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.main.createTests" />
		<KeyWord name="unittest.main.parseArgs" />
		<KeyWord name="unittest.main.runTests" />
		<KeyWord name="unittest.main.usageExit" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[msg=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.makeSuite" func="yes">
			<Overload retVal="" descr=>
				<Param name="testCaseClass" />
				<Param name="[prefix=test" />
				<Param name="[sortUsing=<built-in function cmp>" />
				<Param name="[suiteClass=<class 'unittest.suite.TestSuite'>]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.registerResult" />
		<KeyWord name="unittest.removeHandler" func="yes">
			<Overload retVal="" descr=>
				<Param name="[method=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.removeResult" />
		<KeyWord name="unittest.skip" func="yes">
			<Overload retVal="" descr="Unconditionally skip a test.">
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.skipIf" func="yes">
			<Overload retVal="" descr="Skip a test if the condition is true.">
				<Param name="condition" />
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unittest.skipUnless" func="yes">
			<Overload retVal="" descr="Skip a test unless the condition is true.">
				<Param name="condition" />
				<Param name="reason" />
			</Overload>
		</KeyWord>
		<KeyWord name="unlink" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="unsetenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="until" func="yes">
			<Overload retVal="" descr="Function of WebDriverWait">
			</Overload>
		</KeyWord>
		<KeyWord name="until_not" func="yes">
			<Overload retVal="" descr="Function of WebDriverWait">
			</Overload>
		</KeyWord>
		<KeyWord name="update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="update_preferences" func="yes">
			<Overload retVal="" descr="Function of FirefoxProfile">
			</Overload>
		</KeyWord>
		<KeyWord name="upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; string&#10;&#10;Return a copy of the string S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="urandom" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="usageExit" func="yes">
			<Overload retVal="" descr="Function of unittest.TestProgram">
			</Overload>
		</KeyWord>
		<KeyWord name="use_xpath_library" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="utime" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="valid_boundary" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="vars" func="yes">
			<Overload retVal="" descr="vars([object]) -&gt; dictionary&#10;&#10;Without arguments, equivalent to locals().&#10;With an argument, equivalent to object.__dict__.">
			</Overload>
		</KeyWord>
		<KeyWord name="vformat" func="yes">
			<Overload retVal="" descr="Function of string.Formatter">
			</Overload>
		</KeyWord>
		<KeyWord name="viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="wait" func="yes">
			<Overload retVal="" descr="Function of subprocess.Popen">
			</Overload>
		</KeyWord>
		<KeyWord name="wait_for_condition" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="wait_for_frame_to_load" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="wait_for_page_to_load" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="wait_for_pop_up" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="waitpid" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="walk" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="warn" func="yes">
			<Overload retVal="" descr="Function of cgi">
			</Overload>
		</KeyWord>
		<KeyWord name="wasSuccessful" func="yes">
			<Overload retVal="" descr="Function of unittest.TextTestResult">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver" />
		<KeyWord name="webdriver.ActionChains" func="yes">
			<Overload retVal="" descr="Generate user actions.&#10;All actions are stored in the ActionChains object. Call perform() to fire&#10;stored actions.">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.click" func="yes">
			<Overload retVal="" descr="Clicks an element.&#10;&#10;:Args:&#10; - on_element: The element to click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.click_and_hold" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on an element.&#10;&#10;:Args:&#10; - on_element: The element to mouse down.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.context_click" func="yes">
			<Overload retVal="" descr="Performs a context-click (right click) on an element.&#10;&#10;:Args:&#10; - on_element: The element to context-click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.double_click" func="yes">
			<Overload retVal="" descr="Double-clicks an element.&#10;&#10;:Args:&#10; - on_element: The element to double-click.&#10;   If None, clicks on current mouse position.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.drag_and_drop" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on the source element,&#10;   then moves to the target element and releases the mouse button.&#10;&#10;:Args:&#10; - source: The element to mouse down.&#10; - target: The element to mouse up.">
				<Param name="self" />
				<Param name="source" />
				<Param name="target" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.drag_and_drop_by_offset" func="yes">
			<Overload retVal="" descr="Holds down the left mouse button on the source element,&#10;   then moves to the target element and releases the mouse button.&#10;&#10;:Args:&#10; - source: The element to mouse down.&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="source" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.key_down" func="yes">
			<Overload retVal="" descr="Sends a key press only, without releasing it.&#10;Should only be used with modifier keys (Control, Alt and Shift).&#10;&#10;:Args:&#10; - key: The modifier key to send. Values are defined in Keys class.&#10; - target: The element to send keys.&#10;   If None, sends a key to current focused element.">
				<Param name="self" />
				<Param name="value" />
				<Param name="[element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.key_up" func="yes">
			<Overload retVal="" descr="Releases a modifier key.&#10;&#10;:Args:&#10; - key: The modifier key to send. Values are defined in Keys class.&#10; - target: The element to send keys.&#10;   If None, sends a key to current focused element.">
				<Param name="self" />
				<Param name="value" />
				<Param name="[element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.move_by_offset" func="yes">
			<Overload retVal="" descr="Moving the mouse to an offset from current mouse position.&#10;&#10;:Args:&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.move_to_element" func="yes">
			<Overload retVal="" descr="Moving the mouse to the middle of an element.&#10;&#10;:Args:&#10; - to_element: The element to move to.">
				<Param name="self" />
				<Param name="to_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.move_to_element_with_offset" func="yes">
			<Overload retVal="" descr="Move the mouse by an offset of the specificed element.&#10;Offsets are relative to the top-left corner of the element.&#10;&#10;:Args:&#10; - to_element: The element to move to.&#10; - xoffset: X offset to move to.&#10; - yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="to_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.perform" func="yes">
			<Overload retVal="" descr="Performs all stored actions.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.release" func="yes">
			<Overload retVal="" descr="Releasing a held mouse button.&#10;&#10;:Args:&#10; - on_element: The element to mouse up.">
				<Param name="self" />
				<Param name="[on_element=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.send_keys" func="yes">
			<Overload retVal="" descr="Sends keys to current focused element.&#10;&#10;:Args:&#10; - keys_to_send: The keys to send.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ActionChains.send_keys_to_element" func="yes">
			<Overload retVal="" descr="Sends keys to an element.&#10;&#10;:Args:&#10; - element: The element to send keys.&#10; - keys_to_send: The keys to send.">
				<Param name="self" />
				<Param name="element" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome" func="yes">
			<Overload retVal="" descr="Controls the ChromeDriver and allows you to drive the browser.&#10;&#10;You will need to download the ChromeDriver executable from&#10;http://code.google.com/p/chromedriver/downloads/list">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the ChromeDriver executable&#10;that is started when starting the ChromeDriver">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Chrome.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions" />
		<KeyWord name="webdriver.ChromeOptions.add_argument" func="yes">
			<Overload retVal="" descr="Adds an argument to the list&#10;&#10;:Args:&#10; - Sets the arguments">
				<Param name="self" />
				<Param name="argument" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.add_experimental_option" func="yes">
			<Overload retVal="" descr="Adds an experimental option which is passed to chrome.&#10;&#10;Args:&#10;  name: The experimental option name.&#10;  value: The option value.">
				<Param name="self" />
				<Param name="name" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.add_extension" func="yes">
			<Overload retVal="" descr="Adds the path to the extension to a list that will be used to extract it&#10;to the ChromeDriver&#10;&#10;:Args:&#10; - extension: path to the *.crx file">
				<Param name="self" />
				<Param name="extension" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.arguments" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.binary_location" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.experimental_options" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.extensions" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.ChromeOptions.to_capabilities" func="yes">
			<Overload retVal="" descr="Creates a capabilities with all the options that have been set and&#10;&#10;returns a dictionary with everything">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities" />
		<KeyWord name="webdriver.DesiredCapabilities.ANDROID" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.CHROME" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.FIREFOX" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.HTMLUNIT" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.HTMLUNITWITHJS" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.INTERNETEXPLORER" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.IPAD" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.IPHONE" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.OPERA" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.PHANTOMJS" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.DesiredCapabilities.SAFARI" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox" />
		<KeyWord name="webdriver.Firefox.NATIVE_EVENTS_ALLOWED" func="yes">
			<Overload retVal="" descr="(bool)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.create_web_element" func="yes">
			<Overload retVal="" descr="Override from RemoteWebDriver to use firefox.WebElement.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.firefox_profile" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.quit" func="yes">
			<Overload retVal="" descr="Quits the driver and close every associated window.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Firefox.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile" />
		<KeyWord name="webdriver.FirefoxProfile.ANONYMOUS_PROFILE_NAME" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.DEFAULT_PREFERENCES" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.accept_untrusted_certs" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.add_extension" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[extension=webdriver.xpi]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.assume_untrusted_cert_issuer" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.encoded" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.native_events_enabled" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.path" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.port" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.set_preference" func="yes">
			<Overload retVal="" descr="sets the preference that we want in the profile.">
				<Param name="self" />
				<Param name="key" />
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.FirefoxProfile.set_proxy" />
		<KeyWord name="webdriver.FirefoxProfile.update_preferences" />
		<KeyWord name="webdriver.Ie" />
		<KeyWord name="webdriver.Ie.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.quit" />
		<KeyWord name="webdriver.Ie.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Ie.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera" func="yes">
			<Overload retVal="" descr="Controls the OperaDriver and allows you to drive the browser.">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the OperaDriver executable&#10;that is started when starting the OperaDriver">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Opera.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS" func="yes">
			<Overload retVal="" descr="Wrapper to communicate with PhantomJS through Ghostdriver.&#10;&#10;You will need to follow all the directions here:&#10;https://github.com/detro/ghostdriver">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.quit" func="yes">
			<Overload retVal="" descr="Closes the browser and shuts down the PhantomJS executable&#10;that is started when starting the PhantomJS">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.PhantomJS.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy" />
		<KeyWord name="webdriver.Proxy.add_to_capabilities" />
		<KeyWord name="webdriver.Proxy.auto_detect" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.ftp_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.http_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.no_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.proxyType" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.proxy_autoconfig_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.proxy_type" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Proxy.ssl_proxy" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote" func="yes">
			<Overload retVal="" descr="Controls a browser by sending commands to a remote server.&#10;This server is expected to be running the WebDriver wire protocol as defined&#10;here: http://code.google.com/p/selenium/wiki/JsonWireProtocol&#10;&#10;:Attributes:&#10; - command_executor - The command.CommandExecutor object used to execute commands.&#10; - error_handler - errorhandler.ErrorHandler object used to verify that the server did not return an error.&#10; - session_id - The session ID to send with every command.&#10; - capabilities - A dictionary of capabilities of the underlying browser for this instance's session.&#10; - proxy - A selenium.webdriver.common.proxy.Proxy object, to specify a proxy for the browser to use.">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.add_cookie" func="yes">
			<Overload retVal="" descr="Adds a cookie to your current session.&#10;&#10;:Args:&#10; - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;&#10;    optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;&#10;&#10;Usage:&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})&#10;    driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})">
				<Param name="self" />
				<Param name="cookie_dict" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.application_cache" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.back" func="yes">
			<Overload retVal="" descr="Goes one step backward in the browser history.&#10;&#10;:Usage:&#10;    driver.back()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.close" func="yes">
			<Overload retVal="" descr="Closes the current window.&#10;&#10;:Usage:&#10;    driver.close()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.create_web_element" func="yes">
			<Overload retVal="" descr="Creates a web element with the specified element_id.">
				<Param name="self" />
				<Param name="element_id" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.current_url" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.current_window_handle" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.delete_all_cookies" func="yes">
			<Overload retVal="" descr="Delete all cookies in the scope of the session.&#10;&#10;:Usage:&#10;    driver.delete_all_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.delete_cookie" func="yes">
			<Overload retVal="" descr="Deletes a single cookie with the given name.&#10;&#10;:Usage:&#10;    driver.delete_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.desired_capabilities" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.execute" func="yes">
			<Overload retVal="" descr="Sends a command to be executed by a command.CommandExecutor.&#10;&#10;:Args:&#10; - driver_command: The name of the command to execute as a string.&#10; - params: A dictionary of named parameters to send with the command.&#10;&#10;:Returns:&#10;  The command's JSON response loaded into a dictionary object.">
				<Param name="self" />
				<Param name="driver_command" />
				<Param name="[params=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.execute_async_script" func="yes">
			<Overload retVal="" descr="Asynchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_async_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.execute_script" func="yes">
			<Overload retVal="" descr="Synchronously Executes JavaScript in the current window/frame.&#10;&#10;:Args:&#10; - script: The JavaScript to execute.&#10; - \*args: Any applicable arguments for your JavaScript.&#10;&#10;:Usage:&#10;    driver.execute_script('document.title')">
				<Param name="self" />
				<Param name="script" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_element_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_element_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_class_name" func="yes">
			<Overload retVal="" descr="Finds an element by class name.&#10;&#10;:Args:&#10; - name: The class name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds an element by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_id" func="yes">
			<Overload retVal="" descr="Finds an element by id.&#10;&#10;:Args:&#10; - id\_ - The id of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_name" func="yes">
			<Overload retVal="" descr="Finds an element by name.&#10;&#10;:Args:&#10; - name: The name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds an element by a partial match of its link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partially match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds an element by tag name.&#10;&#10;:Args:&#10; - name: The tag name of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_element_by_xpath" func="yes">
			<Overload retVal="" descr="Finds an element by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the element to find.&#10;&#10;:Usage:&#10;    driver.find_element_by_xpath('//div/td[1]')">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements" func="yes">
			<Overload retVal="" descr="'Private' method used by the find_elements_by_* methods.&#10;&#10;:Usage:&#10;    Use the corresponding find_elements_by_* instead of this.">
				<Param name="self" />
				<Param name="[by=id" />
				<Param name="[value=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_class_name" func="yes">
			<Overload retVal="" descr="Finds elements by class name.&#10;&#10;:Args:&#10; - name: The class name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_class_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_css_selector" func="yes">
			<Overload retVal="" descr="Finds elements by css selector.&#10;&#10;:Args:&#10; - css_selector: The css selector to use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_element_by_css_selector('#foo')">
				<Param name="self" />
				<Param name="css_selector" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_id" func="yes">
			<Overload retVal="" descr="Finds multiple elements by id.&#10;&#10;:Args:&#10; - id\_ - The id of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_element_by_id('foo')">
				<Param name="self" />
				<Param name="id_" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by link text.&#10;&#10;:Args:&#10; - link_text: The text of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_link_text('Sign In')">
				<Param name="self" />
				<Param name="text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_name" func="yes">
			<Overload retVal="" descr="Finds elements by name.&#10;&#10;:Args:&#10; - name: The name of the elements to find.&#10;&#10;:Usage:&#10;    driver.find_elements_by_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_partial_link_text" func="yes">
			<Overload retVal="" descr="Finds elements by a partial match of their link text.&#10;&#10;:Args:&#10; - link_text: The text of the element to partial match on.&#10;&#10;:Usage:&#10;    driver.find_element_by_partial_link_text('Sign')">
				<Param name="self" />
				<Param name="link_text" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_tag_name" func="yes">
			<Overload retVal="" descr="Finds elements by tag name.&#10;&#10;:Args:&#10; - name: The tag name the use when finding elements.&#10;&#10;:Usage:&#10;    driver.find_elements_by_tag_name('foo')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.find_elements_by_xpath" func="yes">
			<Overload retVal="" descr="Finds multiple elements by xpath.&#10;&#10;:Args:&#10; - xpath - The xpath locator of the elements to be found.&#10;&#10;:Usage:&#10;    driver.find_elements_by_xpath(&quot;//div[contains(@class, 'foo')]&quot;)">
				<Param name="self" />
				<Param name="xpath" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.forward" func="yes">
			<Overload retVal="" descr="Goes one step forward in the browser history.&#10;&#10;:Usage:&#10;    driver.forward()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get" func="yes">
			<Overload retVal="" descr="Loads a web page in the current browser session.">
				<Param name="self" />
				<Param name="url" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_cookie" func="yes">
			<Overload retVal="" descr="Get a single cookie by name. Returns the cookie if found, None if not.&#10;&#10;:Usage:&#10;    driver.get_cookie('my_cookie')">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_cookies" func="yes">
			<Overload retVal="" descr="Returns a set of dictionaries, corresponding to cookies visible in the current session.&#10;&#10;:Usage:&#10;    driver.get_cookies()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_screenshot_as_base64" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window as a base64 encoded string&#10;   which is useful in embedded images in HTML.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_base64()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_screenshot_as_file" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;   any IOError, else returns True. Use full paths in your filename.&#10;&#10;:Args:&#10; - filename: The full path you wish to save your screenshot to.&#10;&#10;:Usage:&#10;    driver.get_screenshot_as_file('/Screenshots/foo.png')">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_window_position" func="yes">
			<Overload retVal="" descr="Gets the x,y position of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_position()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.get_window_size" func="yes">
			<Overload retVal="" descr="Gets the width and height of the current window.&#10;&#10;:Usage:&#10;    driver.get_window_size()">
				<Param name="self" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.implicitly_wait" func="yes">
			<Overload retVal="" descr="Sets a sticky timeout to implicitly wait for an element to be found,&#10;   or a command to complete. This method only needs to be called one&#10;   time per session. To set the timeout for calls to&#10;   execute_async_script, see set_script_timeout.&#10;&#10;:Args:&#10; - time_to_wait: Amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.implicitly_wait(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.is_online" func="yes">
			<Overload retVal="" descr="Returns a boolean if the browser is online or offline">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.maximize_window" func="yes">
			<Overload retVal="" descr="Maximizes the current window that webdriver is using">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.name" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.orientation" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.page_source" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.quit" func="yes">
			<Overload retVal="" descr="Quits the driver and closes every associated window.&#10;&#10;:Usage:&#10;    driver.quit()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.refresh" func="yes">
			<Overload retVal="" descr="Refreshes the current page.&#10;&#10;:Usage:&#10;    driver.refresh()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.save_screenshot" func="yes">
			<Overload retVal="" descr="Gets the screenshot of the current window. Returns False if there is&#10;any IOError, else returns True. Use full paths in your filename.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.set_page_load_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time to wait for a page load to complete&#10;   before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait&#10;&#10;:Usage:&#10;    driver.set_page_load_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.set_script_timeout" func="yes">
			<Overload retVal="" descr="Set the amount of time that the script should wait during an&#10;   execute_async_script call before throwing an error.&#10;&#10;:Args:&#10; - time_to_wait: The amount of time to wait (in seconds)&#10;&#10;:Usage:&#10;    driver.set_script_timeout(30)">
				<Param name="self" />
				<Param name="time_to_wait" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.set_window_position" func="yes">
			<Overload retVal="" descr="Sets the x,y position of the current window. (window.moveTo)&#10;&#10;:Args:&#10; - x: the x-coordinate in pixels to set the window position&#10; - y: the y-coordinate in pixels to set the window position&#10;&#10;:Usage:&#10;    driver.set_window_position(0,0)">
				<Param name="self" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.set_window_size" func="yes">
			<Overload retVal="" descr="Sets the width and height of the current window. (window.resizeTo)&#10;&#10;:Args:&#10; - width: the width in pixels to set the window to&#10; - height: the height in pixels to set the window to&#10;&#10;:Usage:&#10;    driver.set_window_size(800,600)">
				<Param name="self" />
				<Param name="width" />
				<Param name="height" />
				<Param name="[windowHandle=current]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.start_client" func="yes">
			<Overload retVal="" descr="Called before starting a new session. This method may be overridden&#10;to define custom startup behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.start_session" func="yes">
			<Overload retVal="" descr="Creates a new session with the desired capabilities.&#10;&#10;:Args:&#10; - browser_name - The name of the browser to request.&#10; - version - Which browser version to request.&#10; - platform - Which platform to request the browser on.&#10; - javascript_enabled - Whether the new session should support JavaScript.&#10; - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.">
				<Param name="self" />
				<Param name="desired_capabilities" />
				<Param name="[browser_profile=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.stop_client" func="yes">
			<Overload retVal="" descr="Called after executing a quit command. This method may be overridden&#10;to define custom shutdown behavior.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.switch_to_active_element" func="yes">
			<Overload retVal="" descr="Returns the element with focus, or BODY if nothing has focus.&#10;&#10;:Usage:&#10;    driver.switch_to_active_element()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.switch_to_alert" func="yes">
			<Overload retVal="" descr="Switches focus to an alert on the page.&#10;&#10;:Usage:&#10;    driver.switch_to_alert()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.switch_to_default_content" func="yes">
			<Overload retVal="" descr="Switch focus to the default frame.&#10;&#10;:Usage:&#10;    driver.switch_to_default_content()">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.switch_to_frame" func="yes">
			<Overload retVal="" descr="Switches focus to the specified frame, by index, name, or webelement.&#10;&#10;:Args:&#10; - frame_reference: The name of the window to switch to, an integer representing the index,&#10;                    or a webelement that is an (i)frame to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_frame('frame_name')&#10;    driver.switch_to_frame(1)&#10;    driver.switch_to_frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0])">
				<Param name="self" />
				<Param name="frame_reference" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.switch_to_window" func="yes">
			<Overload retVal="" descr="Switches focus to the specified window.&#10;&#10;:Args:&#10; - window_name: The name or window handle of the window to switch to.&#10;&#10;:Usage:&#10;    driver.switch_to_window('main')">
				<Param name="self" />
				<Param name="window_name" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.title" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.Remote.window_handles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions" func="yes">
			<Overload retVal="" descr="Generate touch actions. Works like ActionChains; actions are stored in the&#10;TouchActions object and are fired with perform().">
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.double_tap" func="yes">
			<Overload retVal="" descr="Double taps on a given element.&#10;&#10;Args:&#10;    -element: The element to tap.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.flick" func="yes">
			<Overload retVal="" descr="Flicks, starting anywhere on the screen.&#10;&#10;Args:&#10;    -xspeed: The X speed in pixels per second.&#10;    -yspeed: The Y speed in pixels per second.">
				<Param name="self" />
				<Param name="xspeed" />
				<Param name="yspeed" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.flick_element" func="yes">
			<Overload retVal="" descr="Flick starting at on_element, and moving by the xoffset and yoffset.&#10;&#10;Args:&#10;    -on_element: Flick will start at center of element.&#10;    -xoffset: X offset to flick to.&#10;    -yoffset: Y offset to flick to.&#10;    -speed: Pixels per second to flick.">
				<Param name="self" />
				<Param name="on_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
				<Param name="speed" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.long_press" func="yes">
			<Overload retVal="" descr="Long press on an element.&#10;&#10;Args:&#10;    -on_element: The element to long press.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.move" func="yes">
			<Overload retVal="" descr="Move held tap to specified location.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.perform" func="yes">
			<Overload retVal="" descr="Performs all stored actions.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.release" func="yes">
			<Overload retVal="" descr="Release previously issued tap and hold command, at specified location.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.scroll" func="yes">
			<Overload retVal="" descr="Touch and scroll, moving by xoffset and yoffset.&#10;&#10;Args:&#10;    -xoffset: X offset to move to.&#10;    -yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.scroll_from_element" func="yes">
			<Overload retVal="" descr="Touch and scroll starting at on_element, moving by xoffset and yoffset.&#10;&#10;Args:&#10;    -on_element: Element where scroll starts.&#10;    -xoffset: X offset to move to.&#10;    -yoffset: Y offset to move to.">
				<Param name="self" />
				<Param name="on_element" />
				<Param name="xoffset" />
				<Param name="yoffset" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.tap" func="yes">
			<Overload retVal="" descr="Taps on a given element.&#10;&#10;Args:&#10;    -element: The element to tap.">
				<Param name="self" />
				<Param name="on_element" />
			</Overload>
		</KeyWord>
		<KeyWord name="webdriver.TouchActions.tap_and_hold" func="yes">
			<Overload retVal="" descr="Tap and hold a given element.&#10;&#10;Args:&#10;    -xcoord: X Coordinates.&#10;    -ycoord: Y Coordinates.">
				<Param name="self" />
				<Param name="xcoord" />
				<Param name="ycoord" />
			</Overload>
		</KeyWord>
		<KeyWord name="when" func="yes">
			<Overload retVal="" descr="Function of behave">
			</Overload>
		</KeyWord>
		<KeyWord name="while" />
		<KeyWord name="window_focus" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="window_maximize" func="yes">
			<Overload retVal="" descr="Function of selenium.selenium">
			</Overload>
		</KeyWord>
		<KeyWord name="with" />
		<KeyWord name="write" func="yes">
			<Overload retVal="" descr="write(str) -&gt; None.  Write string str to file.&#10;&#10;Note that due to buffering, flush() or close() may be needed before&#10;the file on disk reflects the data written.">
			</Overload>
		</KeyWord>
		<KeyWord name="write_and_convert" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="write_plain_text" func="yes">
			<Overload retVal="" descr="Function of colorama.AnsiToWin32">
			</Overload>
		</KeyWord>
		<KeyWord name="writec" func="yes">
			<Overload retVal="" descr="Write to stdout in color.">
				<Param name="text" />
				<Param name="color" />
			</Overload>
		</KeyWord>
		<KeyWord name="writelines" func="yes">
			<Overload retVal="" descr="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file.&#10;&#10;Note that newlines are not added.  The sequence can be any iterable object&#10;producing strings. This is equivalent to calling write() for each string.">
			</Overload>
		</KeyWord>
		<KeyWord name="xrange" func="yes">
			<Overload retVal="" descr="xrange([start,] stop[, step]) -&gt; xrange object&#10;&#10;Like range(), but instead of returning a list, returns an object that&#10;generates the numbers in the range on demand.  For looping, this is &#10;slightly faster than range() and more memory efficient.">
			</Overload>
		</KeyWord>
		<KeyWord name="xreadlines" func="yes">
			<Overload retVal="" descr="xreadlines() -&gt; returns self.&#10;&#10;For backward compatibility. File objects now include the performance&#10;optimizations previously implemented in the xreadlines module.">
			</Overload>
		</KeyWord>
		<KeyWord name="yield" />
		<KeyWord name="zfill" func="yes">
			<Overload retVal="" descr="S.zfill(width) -&gt; string&#10;&#10;Pad a numeric string S with zeros on the left, to fill a field&#10;of the specified width.  The string S is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="zip" func="yes">
			<Overload retVal="" descr="zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]&#10;&#10;Return a list of tuples, where each tuple contains the i-th element&#10;from each of the argument sequences.  The returned list is truncated&#10;in length to the length of the shortest argument sequence.">
			</Overload>
		</KeyWord>
	</AutoComplete>
</NotepadPlus>
